@startuml Enterprise Loan Management System - Hexagonal Architecture (Java 21)
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title Enterprise Loan Management System - Hexagonal Architecture (Java 21 + Spring Boot 3.4.3)

Container_Boundary(hexagon, "Hexagonal Architecture") {
    
    ' Domain Core (Center of Hexagon)
    Container_Boundary(domain_core, "Domain Core") {
        Container(customer_aggregate, "Customer Aggregate", "Java 21 Domain Model", "Customer business rules with records and pattern matching")
        Container(loan_aggregate, "Loan Aggregate", "Java 21 Domain Model", "Loan business rules with value objects and domain events")
        Container(payment_aggregate, "Payment Aggregate", "Java 21 Domain Model", "Payment processing with virtual threads and event sourcing")
        Container(ai_domain, "AI Domain Services", "Java 21 Domain Model", "Spring AI integration with banking domain context")
        Container(security_domain, "Security Domain", "Java 21 Domain Model", "Zero Trust security with FAPI 2.0 and DPoP")
        Container(monitoring_domain, "Monitoring Domain", "Java 21 Domain Model", "Cross-region monitoring and federation")
        Container(shared_kernel, "Shared Kernel", "Java 21 Domain Model", "Common domain concepts, Money value objects, and domain events")
    }
    
    ' Application Layer (Ports)
    Container_Boundary(application_ports, "Application Layer - Use Cases & Ports") {
        Container(customer_port_in, "Customer Management Port", "Input Port", "Customer use cases with KYC and credit management")
        Container(loan_port_in, "Loan Origination Port", "Input Port", "Loan processing with AI-powered risk assessment")
        Container(payment_port_in, "Payment Processing Port", "Input Port", "Payment processing with reconciliation and scheduling")
        Container(ai_port_in, "AI Assistant Port", "Input Port", "Natural language processing and fraud detection")
        Container(security_port_in, "Security Port", "Input Port", "Zero Trust security assessment and threat detection")
        Container(monitoring_port_in, "Monitoring Port", "Input Port", "Cross-region monitoring and health checks")
        
        Container(customer_port_out, "Customer Repository Port", "Output Port", "Customer persistence with JPA and caching")
        Container(loan_port_out, "Loan Repository Port", "Output Port", "Loan persistence with audit trails")
        Container(payment_port_out, "Payment Repository Port", "Output Port", "Payment persistence with reconciliation")
        Container(event_port_out, "Event Publishing Port", "Output Port", "Kafka event streaming with SAGA coordination")
        Container(cache_port_out, "Cache Port", "Output Port", "Redis caching with multi-level strategy")
        Container(ai_port_out, "AI Service Port", "Output Port", "Spring AI and OpenAI integration")
        Container(security_port_out, "Security Port", "Output Port", "Keycloak and LDAP integration")
        Container(monitoring_port_out, "Monitoring Port", "Output Port", "Prometheus metrics and cross-region federation")
    }
}

' Left Side Adapters (Driving/Primary)
Container_Boundary(primary_adapters, "Primary Adapters (Driving)") {
    Container(rest_adapter, "REST API Adapter", "Spring Boot 3.4.3", "FAPI 2.0 compliant REST endpoints with DPoP")
    Container(graphql_adapter, "GraphQL Adapter", "Spring GraphQL", "GraphQL API with security integration")
    Container(websocket_adapter, "WebSocket Adapter", "Spring WebSocket", "Real-time notifications and updates")
    Container(grpc_adapter, "gRPC Adapter", "Spring Boot gRPC", "High-performance microservices communication")
    Container(kafka_consumer_adapter, "Kafka Consumer Adapter", "Spring Kafka", "Event-driven message processing")
}

' Right Side Adapters (Driven/Secondary)
Container_Boundary(secondary_adapters, "Secondary Adapters (Driven)") {
    Container(jpa_adapter, "JPA Adapter", "Spring Data JPA + Hibernate", "PostgreSQL persistence with optimized queries")
    Container(redis_adapter, "Redis Adapter", "Spring Data Redis", "Multi-level caching with ElastiCache")
    Container(kafka_adapter, "Kafka Adapter", "Spring Kafka", "Event streaming with SAGA orchestration")
    Container(springai_adapter, "Spring AI Adapter", "Spring AI Framework", "AI/ML integration with banking context")
    Container(openai_adapter, "OpenAI Adapter", "HTTP Client", "OpenAI API integration for NLP")
    Container(keycloak_adapter, "Keycloak Adapter", "OAuth 2.1 Client", "Identity and access management")
    Container(ldap_adapter, "LDAP Adapter", "Spring LDAP", "Enterprise directory integration")
    Container(prometheus_adapter, "Prometheus Adapter", "Micrometer", "Metrics collection and monitoring")
    Container(ml_adapter, "ML Adapter", "TensorFlow/PyTorch", "Machine learning model integration")
}

' Bottom Adapters (Infrastructure)
Container_Boundary(infrastructure_adapters, "Infrastructure Adapters") {
    Container(security_adapter, "Security Adapter", "Spring Security 6", "OAuth 2.1 and JWT processing")
    Container(fapi_adapter, "FAPI 2.0 Adapter", "Custom Security", "Financial-grade API compliance with DPoP")
    Container(zerotrust_adapter, "Zero Trust Adapter", "Custom Security", "Continuous verification and behavioral analysis")
    Container(monitoring_adapter, "Monitoring Adapter", "Micrometer/Prometheus", "Cross-region monitoring federation")
    Container(config_adapter, "Configuration Adapter", "Spring Boot Config", "Externalized configuration management")
    Container(istio_adapter, "Istio Adapter", "Service Mesh", "Envoy proxy and mTLS communication")
}

' External Systems
System_Ext(postgresql, "PostgreSQL 14+", "Primary database with advanced features")
System_Ext(redis_cache, "Redis 6+", "ElastiCache with clustering")
System_Ext(kafka_system, "Apache Kafka", "Event streaming with SAGA coordination")
System_Ext(openai_api, "OpenAI API", "GPT-4 and AI/ML services")
System_Ext(spring_ai_system, "Spring AI", "AI framework with banking context")
System_Ext(keycloak_system, "Keycloak", "OAuth 2.1 and FAPI 2.0 compliant IdP")
System_Ext(ldap_system, "LDAP Directory", "Enterprise user directory")
System_Ext(prometheus, "Prometheus", "Metrics collection and alerting")
System_Ext(grafana, "Grafana", "Metrics visualization and dashboards")
System_Ext(elk_stack, "ELK Stack", "Centralized logging and analysis")
System_Ext(istio_system, "Istio Service Mesh", "Service communication and security")

' Primary Adapter Relationships
Rel(rest_adapter, customer_port_in, "Drives", "HTTP/JSON")
Rel(rest_adapter, loan_port_in, "Drives", "HTTP/JSON")
Rel(rest_adapter, payment_port_in, "Drives", "HTTP/JSON")
Rel(rest_adapter, ai_port_in, "Drives", "HTTP/JSON")

Rel(graphql_adapter, customer_port_in, "Drives", "GraphQL")
Rel(graphql_adapter, loan_port_in, "Drives", "GraphQL")
Rel(graphql_adapter, payment_port_in, "Drives", "GraphQL")

Rel(websocket_adapter, customer_port_in, "Drives", "WebSocket")
Rel(websocket_adapter, loan_port_in, "Drives", "WebSocket")
Rel(websocket_adapter, payment_port_in, "Drives", "WebSocket")

' Domain Core Relationships
Rel(customer_port_in, customer_aggregate, "Uses", "Domain API")
Rel(loan_port_in, loan_aggregate, "Uses", "Domain API")
Rel(payment_port_in, payment_aggregate, "Uses", "Domain API")
Rel(ai_port_in, ai_domain, "Uses", "Domain API")
Rel(nlp_port_in, ai_domain, "Uses", "Domain API")

Rel(customer_aggregate, shared_kernel, "Uses", "Domain Events")
Rel(loan_aggregate, shared_kernel, "Uses", "Domain Events")
Rel(payment_aggregate, shared_kernel, "Uses", "Domain Events")
Rel(ai_domain, shared_kernel, "Uses", "Domain Events")

' Secondary Adapter Relationships
Rel(customer_port_out, jpa_adapter, "Implemented by", "Repository Pattern")
Rel(loan_port_out, jpa_adapter, "Implemented by", "Repository Pattern")
Rel(payment_port_out, jpa_adapter, "Implemented by", "Repository Pattern")

Rel(cache_port_out, redis_adapter, "Implemented by", "Cache Pattern")
Rel(event_port_out, kafka_adapter, "Implemented by", "Event Publishing")
Rel(ai_port_out, springai_adapter, "Implemented by", "AI Service Pattern")
Rel(ai_port_out, mcp_adapter, "Implemented by", "MCP Protocol")

' External System Connections
Rel(jpa_adapter, postgresql, "Persists to", "JDBC")
Rel(redis_adapter, redis_cache, "Caches in", "Redis Protocol")
Rel(kafka_adapter, kafka_system, "Publishes to", "Kafka Protocol")
Rel(springai_adapter, spring_ai_system, "Integrates with", "Spring AI Protocol")
Rel(openai_adapter, openai_api, "Calls", "HTTPS/REST API")
Rel(keycloak_adapter, keycloak_system, "Authenticates via", "OAuth 2.1/FAPI 2.0")
Rel(ldap_adapter, ldap_system, "Queries", "LDAP Protocol")
Rel(prometheus_adapter, prometheus, "Exports metrics to", "HTTP/Prometheus")
Rel(monitoring_adapter, grafana, "Visualizes via", "HTTP/API")
Rel(monitoring_adapter, elk_stack, "Logs to", "Logstash/HTTP")
Rel(istio_adapter, istio_system, "Communicates via", "Envoy Proxy/mTLS")
Rel(ml_adapter, spring_ai_system, "ML models via", "Spring AI Integration")

' Port to Port Relationships
Rel(customer_port_in, customer_port_out, "Uses", "Repository Interface")
Rel(loan_port_in, loan_port_out, "Uses", "Repository Interface")
Rel(payment_port_in, payment_port_out, "Uses", "Repository Interface")
Rel(customer_port_in, event_port_out, "Uses", "Event Publishing")
Rel(loan_port_in, event_port_out, "Uses", "Event Publishing")
Rel(payment_port_in, event_port_out, "Uses", "Event Publishing")
Rel(customer_port_in, cache_port_out, "Uses", "Cache Interface")
Rel(loan_port_in, cache_port_out, "Uses", "Cache Interface")
Rel(payment_port_in, cache_port_out, "Uses", "Cache Interface")
Rel(ai_port_in, ai_port_out, "Uses", "Spring AI Service Interface")
Rel(security_port_in, security_port_out, "Uses", "Security Service Interface")
Rel(monitoring_port_in, monitoring_port_out, "Uses", "Monitoring Service Interface")
Rel(customer_port_in, security_port_out, "Uses", "Security Validation")
Rel(loan_port_in, security_port_out, "Uses", "Security Validation")
Rel(payment_port_in, security_port_out, "Uses", "Security Validation")

@enduml