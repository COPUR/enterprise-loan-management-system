@startuml Bounded Contexts

!define CUSTOMER_COLOR #FFE4B5
!define LOAN_COLOR #E6F3FF
!define PAYMENT_COLOR #E6FFE6
!define SHARED_COLOR #F0F0F0

skinparam backgroundColor #FFFFFF
skinparam packageStyle rectangle

package "Loan Management System" {
    
    package "Shared Kernel" <<Frame>> SHARED_COLOR {
        component [AggregateRoot] as AggregateRoot
        component [Entity] as Entity
        component [ValueObject] as ValueObject
        component [DomainEvent] as DomainEvent
        component [EventPublisher] as EventPublisher
        
        package "Common Value Objects" {
            component [Money] as Money
            component [InterestRate] as InterestRate
            component [InstallmentCount] as InstallmentCount
        }
    }
    
    package "Customer Management Context" <<Bounded Context>> CUSTOMER_COLOR {
        
        package "Domain Model" {
            component [Customer] as CustomerAggregate <<Aggregate Root>>
            component [CustomerId] as CustomerId <<Value Object>>
            component [CreditLimit] as CreditLimit <<Value Object>>
        }
        
        package "Domain Services" {
            component [CreditAssessmentService] as CreditService
        }
        
        package "Domain Events" {
            component [CreditReserved] as CreditReserved
            component [CreditReleased] as CreditReleased
            component [CreditReservationFailed] as CreditReservationFailed
        }
        
        package "Application Services" {
            component [CustomerApplicationService] as CustomerAppService
        }
        
        package "Infrastructure" {
            component [CustomerController] as CustomerController
            component [CustomerRepository] as CustomerRepository
            component [CustomerEntity] as CustomerEntity
        }
        
        package "Ports" {
            interface "CustomerRepository" as ICustomerRepository
            interface "Use Cases" as CustomerUseCases
        }
    }
    
    package "Loan Origination Context" <<Bounded Context>> LOAN_COLOR {
        
        package "Domain Model" {
            component [Loan] as LoanAggregate <<Aggregate Root>>
            component [LoanInstallment] as LoanInstallment <<Entity>>
            component [LoanId] as LoanId <<Value Object>>
            component [InstallmentId] as InstallmentId <<Value Object>>
        }
        
        package "Domain Events" {
            component [LoanCreated] as LoanCreated
            component [LoanApplicationSubmitted] as LoanApplicationSubmitted
        }
        
        package "Application Services" {
            component [LoanApplicationService] as LoanAppService
            component [LoanCreationSaga] as LoanCreationSaga
        }
        
        package "Infrastructure" {
            component [LoanController] as LoanController
            component [LoanRepository] as LoanRepository
            component [LoanEntity] as LoanEntity
        }
        
        package "Ports" {
            interface "LoanRepository" as ILoanRepository
            interface "CreateLoanUseCase" as CreateLoanUseCase
            interface "ListLoansUseCase" as ListLoansUseCase
            interface "ListInstallmentsUseCase" as ListInstallmentsUseCase
        }
    }
    
    package "Payment Processing Context" <<Bounded Context>> PAYMENT_COLOR {
        
        package "Domain Model" {
            component [Payment] as PaymentAggregate <<Aggregate Root>>
            component [PaymentId] as PaymentId <<Value Object>>
        }
        
        package "Domain Services" {
            component [PaymentCalculationService] as PaymentCalcService
        }
        
        package "Domain Events" {
            component [PaymentInitiated] as PaymentInitiated
            component [PaymentProcessed] as PaymentProcessed
            component [LoanFullyPaid] as LoanFullyPaid
        }
        
        package "Application Services" {
            component [PaymentApplicationService] as PaymentAppService
        }
        
        package "Infrastructure" {
            component [PaymentController] as PaymentController
            component [PaymentRepository] as PaymentRepository
            component [PaymentEntity] as PaymentEntity
        }
        
        package "Ports" {
            interface "PaymentRepository" as IPaymentRepository
            interface "ProcessPaymentUseCase" as ProcessPaymentUseCase
        }
    }
    
    package "Infrastructure Services" {
        component [EventPublisherImpl] as EventPublisherImpl
        component [KafkaTemplate] as KafkaTemplate
        component [RedisTemplate] as RedisTemplate
        component [SecurityService] as SecurityService
    }
}

' Shared Kernel relationships
CustomerAggregate ..> Money : uses
CustomerAggregate ..> AggregateRoot : extends
LoanAggregate ..> Money : uses
LoanAggregate ..> InterestRate : uses
LoanAggregate ..> InstallmentCount : uses
LoanAggregate ..> AggregateRoot : extends
PaymentAggregate ..> Money : uses
PaymentAggregate ..> AggregateRoot : extends

' Context relationships - Anti-Corruption Layer pattern
CustomerAppService ..> EventPublisher : publishes events
LoanAppService ..> CustomerAppService : coordinates with
PaymentAppService ..> LoanAppService : coordinates with

' Event flow between contexts
CreditReserved ..> LoanCreationSaga : triggers
LoanCreated ..> PaymentAppService : informs
PaymentProcessed ..> CustomerAppService : triggers credit release

' Infrastructure dependencies
EventPublisherImpl ..|> EventPublisher : implements
CustomerRepository ..|> ICustomerRepository : implements
LoanRepository ..|> ILoanRepository : implements
PaymentRepository ..|> IPaymentRepository : implements

' Application service dependencies
CustomerAppService ..|> CustomerUseCases : implements
LoanAppService ..|> CreateLoanUseCase : implements
LoanAppService ..|> ListLoansUseCase : implements
LoanAppService ..|> ListInstallmentsUseCase : implements
PaymentAppService ..|> ProcessPaymentUseCase : implements

note top of "Customer Management Context" : Responsible for:\n- Customer data management\n- Credit limit operations\n- Credit risk assessment

note top of "Loan Origination Context" : Responsible for:\n- Loan creation and validation\n- Installment scheduling\n- Loan lifecycle management

note top of "Payment Processing Context" : Responsible for:\n- Payment processing\n- Discount/penalty calculations\n- Loan completion tracking

note as IntegrationPatterns
  <b>Integration Patterns Used:</b>
  
  1. <b>Shared Kernel:</b> Common value objects and base classes
  2. <b>Published Language:</b> Domain events for communication
  3. <b>Anti-Corruption Layer:</b> Application services isolate contexts
  4. <b>Event-Driven Architecture:</b> Loose coupling via domain events
  5. <b>SAGA Pattern:</b> Distributed transaction coordination
end note

note as ContextBoundaries
  <b>Context Boundaries:</b>
  
  • Each context has its own domain model
  • No direct domain object sharing between contexts
  • Communication through events and application services
  • Each context can evolve independently
  • Clear ownership of business capabilities
end note

@enduml
