@startuml Monitoring & Observability - Enterprise Loan Management System

!define PROMETHEUS_COLOR #E6522C
!define GRAFANA_COLOR #FF8C00
!define ELK_COLOR #005571
!define JAEGER_COLOR #60D0E4
!define CLOUDWATCH_COLOR #FF9900
!define ALERT_COLOR #DC3545
!define METRICS_COLOR #28A745

skinparam backgroundColor #FFFFFF
skinparam defaultFontName Arial
skinparam defaultFontSize 10

title Enterprise Loan Management System - Monitoring & Observability Architecture

' Application Layer
package "Banking Application Layer" <<Spring Boot>> #E6F9F9 {
    component [Enterprise Loan Service\n(Java 21 + Virtual Threads)] as LoanService METRICS_COLOR
    component [Customer Management\n(Profile & Credit)] as CustomerService METRICS_COLOR
    component [Payment Processing\n(Transaction Engine)] as PaymentService METRICS_COLOR
    component [Compliance Engine\n(FAPI Security)] as ComplianceService METRICS_COLOR
    component [Cache Management\n(Redis ElastiCache)] as CacheService METRICS_COLOR
}

' Metrics Collection Layer
package "Metrics Collection & Storage" <<Prometheus Stack>> #FFE8E8 {
    
    package "Prometheus Ecosystem" <<Metrics>> #FFCCCC {
        component [Prometheus Server\n(Time-Series DB)] as PrometheusServer PROMETHEUS_COLOR
        component [Service Discovery\n(Kubernetes Integration)] as ServiceDiscovery PROMETHEUS_COLOR
        component [Metric Scraping\n(Pull-based Collection)] as MetricScraping PROMETHEUS_COLOR
        component [Recording Rules\n(Aggregated Metrics)] as RecordingRules PROMETHEUS_COLOR
        component [Alert Rules\n(Threshold Monitoring)] as AlertRules PROMETHEUS_COLOR
    }
    
    package "Banking Metrics Categories" <<Domain Metrics>> #FFF0F0 {
        component [Business Metrics\n(Loan Applications, Payments)] as BusinessMetrics METRICS_COLOR
        component [Performance Metrics\n(Response Time, Throughput)] as PerformanceMetrics METRICS_COLOR
        component [Cache Metrics\n(Hit Ratio: 100%, Latency: 2.5ms)] as CacheMetrics METRICS_COLOR
        component [Security Metrics\n(Authentication, Authorization)] as SecurityMetrics METRICS_COLOR
        component [Compliance Metrics\n(TDD Coverage: 87.4%)] as ComplianceMetrics METRICS_COLOR
        component [Infrastructure Metrics\n(CPU, Memory, Network)] as InfrastructureMetrics METRICS_COLOR
    }
}

' Visualization Layer
package "Data Visualization & Dashboards" <<Grafana>> #FFF8E1 {
    
    package "Grafana Dashboards" <<Visualization>> #FFEB3B {
        component [Executive Dashboard\n(KPIs & Business Metrics)] as ExecutiveDashboard GRAFANA_COLOR
        component [Operations Dashboard\n(System Health & Performance)] as OperationsDashboard GRAFANA_COLOR
        component [Security Dashboard\n(Threats & Compliance)] as SecurityDashboard GRAFANA_COLOR
        component [Banking Dashboard\n(Loan & Payment Analytics)] as BankingDashboard GRAFANA_COLOR
        component [Infrastructure Dashboard\n(Resource Utilization)] as InfrastructureDashboard GRAFANA_COLOR
        component [Cache Performance Dashboard\n(Redis Metrics)] as CacheDashboard GRAFANA_COLOR
    }
    
    package "Alerting & Notifications" <<Alert Management>> #FFCC80 {
        component [AlertManager\n(Alert Routing)] as AlertManager ALERT_COLOR
        component [Notification Channels\n(Slack, Email, PagerDuty)] as NotificationChannels ALERT_COLOR
        component [Alert Grouping\n(Intelligent Clustering)] as AlertGrouping ALERT_COLOR
        component [Escalation Policies\n(Severity-based Routing)] as EscalationPolicies ALERT_COLOR
    }
}

' Logging & Tracing
package "Logging & Distributed Tracing" <<Observability>> #E8F5E8 {
    
    package "ELK Stack (Logging)" <<Log Management>> #CCFFCC {
        component [Elasticsearch\n(Log Storage & Search)] as Elasticsearch ELK_COLOR
        component [Logstash\n(Log Processing)] as Logstash ELK_COLOR
        component [Kibana\n(Log Analysis & Visualization)] as Kibana ELK_COLOR
        component [Filebeat\n(Log Shipping)] as Filebeat ELK_COLOR
    }
    
    package "Distributed Tracing" <<Tracing>> #B3E5FC {
        component [Jaeger Collector\n(Trace Collection)] as JaegerCollector JAEGER_COLOR
        component [Jaeger Query\n(Trace Analysis)] as JaegerQuery JAEGER_COLOR
        component [Jaeger UI\n(Trace Visualization)] as JaegerUI JAEGER_COLOR
        component [OpenTelemetry\n(Instrumentation)] as OpenTelemetry JAEGER_COLOR
    }
    
    package "Log Categories" <<Banking Logs>> #E8F5E8 {
        component [Application Logs\n(Banking Operations)] as ApplicationLogs ELK_COLOR
        component [Security Logs\n(Authentication, Authorization)] as SecurityLogs ELK_COLOR
        component [Audit Logs\n(Regulatory Compliance)] as AuditLogs ELK_COLOR
        component [Performance Logs\n(Response Times, Errors)] as PerformanceLogs ELK_COLOR
        component [Infrastructure Logs\n(System Events)] as InfrastructureLogs ELK_COLOR
    }
}

' AWS CloudWatch Integration
package "AWS CloudWatch Integration" <<AWS Monitoring>> #FFF3E0 {
    
    package "CloudWatch Services" <<AWS Native>> #FFE0B2 {
        component [CloudWatch Metrics\n(AWS Resources)] as CloudWatchMetrics CLOUDWATCH_COLOR
        component [CloudWatch Logs\n(Centralized Logging)] as CloudWatchLogs CLOUDWATCH_COLOR
        component [CloudWatch Alarms\n(AWS Resource Alerts)] as CloudWatchAlarms CLOUDWATCH_COLOR
        component [CloudWatch Insights\n(Log Analytics)] as CloudWatchInsights CLOUDWATCH_COLOR
    }
    
    package "AWS Resource Monitoring" <<Infrastructure>> #FFCC80 {
        component [EKS Cluster Metrics\n(Node & Pod Health)] as EKSMetrics CLOUDWATCH_COLOR
        component [RDS Monitoring\n(Database Performance)] as RDSMetrics CLOUDWATCH_COLOR
        component [ElastiCache Metrics\n(Redis Performance)] as ElastiCacheMetrics CLOUDWATCH_COLOR
        component [ALB Metrics\n(Load Balancer Health)] as ALBMetrics CLOUDWATCH_COLOR
        component [VPC Flow Logs\n(Network Monitoring)] as VPCFlowLogs CLOUDWATCH_COLOR
    }
}

' Key Performance Indicators
package "Banking KPIs & SLAs" <<Business Intelligence>> #F0F8FF {
    
    package "Business KPIs" <<Banking Metrics>> #E6F2FF {
        component [Loan Application Rate\n(Applications/Hour)] as LoanApplicationRate METRICS_COLOR
        component [Payment Success Rate\n(99.9% Target)] as PaymentSuccessRate METRICS_COLOR
        component [Customer Onboarding Time\n(< 10 minutes)] as OnboardingTime METRICS_COLOR
        component [Credit Assessment Time\n(< 5 minutes)] as CreditAssessmentTime METRICS_COLOR
        component [Regulatory Compliance Score\n(100% Target)] as ComplianceScore METRICS_COLOR
    }
    
    package "Technical SLAs" <<Performance>> #CCE5FF {
        component [API Response Time\n(< 200ms Target)] as APIResponseTime METRICS_COLOR
        component [System Availability\n(99.9% Uptime)] as SystemAvailability METRICS_COLOR
        component [Cache Hit Ratio\n(100% Achieved)] as CacheHitRatio METRICS_COLOR
        component [Database Performance\n(< 100ms Queries)] as DatabasePerformance METRICS_COLOR
        component [Error Rate\n(< 0.1% Target)] as ErrorRate METRICS_COLOR
    }
}

' Health Checks & Probes
package "Health Monitoring & Probes" <<Health Checks>> #F5F5F5 {
    component [Kubernetes Liveness Probes\n(Pod Health)] as LivenessProbes METRICS_COLOR
    component [Readiness Probes\n(Service Availability)] as ReadinessProbes METRICS_COLOR
    component [Health Check Endpoints\n(/actuator/health)] as HealthEndpoints METRICS_COLOR
    component [Deep Health Checks\n(Database, Cache, External APIs)] as DeepHealthChecks METRICS_COLOR
}

' Metrics Flow - Application to Prometheus
LoanService --> MetricScraping : Banking Metrics
CustomerService --> MetricScraping : Customer Metrics
PaymentService --> MetricScraping : Payment Metrics
ComplianceService --> MetricScraping : Compliance Metrics
CacheService --> MetricScraping : Cache Metrics

' Prometheus Processing
MetricScraping --> PrometheusServer : Store Metrics
PrometheusServer --> ServiceDiscovery : Auto-discovery
PrometheusServer --> RecordingRules : Aggregate Metrics
PrometheusServer --> AlertRules : Evaluate Thresholds

' Metrics Categorization
PrometheusServer --> BusinessMetrics : Business Data
PrometheusServer --> PerformanceMetrics : Performance Data
PrometheusServer --> CacheMetrics : Cache Statistics
PrometheusServer --> SecurityMetrics : Security Events
PrometheusServer --> ComplianceMetrics : Compliance Data
PrometheusServer --> InfrastructureMetrics : Infrastructure Data

' Grafana Visualization
BusinessMetrics --> ExecutiveDashboard : Executive View
PerformanceMetrics --> OperationsDashboard : Operations View
SecurityMetrics --> SecurityDashboard : Security View
BusinessMetrics --> BankingDashboard : Banking Analytics
InfrastructureMetrics --> InfrastructureDashboard : Infrastructure View
CacheMetrics --> CacheDashboard : Cache Performance

' Alert Management
AlertRules --> AlertManager : Alert Generation
AlertManager --> NotificationChannels : Alert Delivery
AlertManager --> AlertGrouping : Group Similar Alerts
AlertManager --> EscalationPolicies : Escalate Critical Alerts

' Logging Flow
LoanService --> ApplicationLogs : Application Events
LoanService --> SecurityLogs : Security Events
LoanService --> AuditLogs : Regulatory Events
LoanService --> PerformanceLogs : Performance Events

' Log Processing
ApplicationLogs --> Filebeat : Ship Logs
SecurityLogs --> Filebeat : Ship Logs
AuditLogs --> Filebeat : Ship Logs
PerformanceLogs --> Filebeat : Ship Logs
InfrastructureLogs --> Filebeat : Ship Logs

Filebeat --> Logstash : Process Logs
Logstash --> Elasticsearch : Store Logs
Elasticsearch --> Kibana : Visualize Logs

' Distributed Tracing
LoanService --> OpenTelemetry : Trace Data
CustomerService --> OpenTelemetry : Trace Data
PaymentService --> OpenTelemetry : Trace Data
OpenTelemetry --> JaegerCollector : Collect Traces
JaegerCollector --> JaegerQuery : Query Interface
JaegerQuery --> JaegerUI : Trace Visualization

' CloudWatch Integration
EKSMetrics --> CloudWatchMetrics : EKS Data
RDSMetrics --> CloudWatchMetrics : Database Data
ElastiCacheMetrics --> CloudWatchMetrics : Cache Data
ALBMetrics --> CloudWatchMetrics : Load Balancer Data
VPCFlowLogs --> CloudWatchLogs : Network Logs

CloudWatchMetrics --> CloudWatchAlarms : AWS Alerts
CloudWatchLogs --> CloudWatchInsights : Log Analysis

' Business KPIs Integration
LoanService --> LoanApplicationRate : Application Metrics
PaymentService --> PaymentSuccessRate : Payment Metrics
CustomerService --> OnboardingTime : Onboarding Metrics
ComplianceService --> CreditAssessmentTime : Assessment Metrics
ComplianceService --> ComplianceScore : Compliance Metrics

' Technical SLAs
PerformanceMetrics --> APIResponseTime : Response Time Data
InfrastructureMetrics --> SystemAvailability : Uptime Data
CacheMetrics --> CacheHitRatio : Cache Performance
InfrastructureMetrics --> DatabasePerformance : Database Metrics
PerformanceMetrics --> ErrorRate : Error Statistics

' Health Monitoring
LoanService --> HealthEndpoints : Health Status
HealthEndpoints --> LivenessProbes : Kubernetes Health
HealthEndpoints --> ReadinessProbes : Service Readiness
HealthEndpoints --> DeepHealthChecks : Comprehensive Health

' Monitoring Annotations
note top of PrometheusServer : Prometheus Configuration\n• Scrape Interval: 15s\n• Retention: 15 days\n• Storage: 100GB SSD\n• High Availability: 3 replicas

note top of CacheMetrics : Cache Performance Monitoring\n• Hit Ratio: 100% (Target: >80%)\n• Response Time: 2.5ms\n• Memory Usage: 6.1GB\n• Operations: 7 total

note top of AlertManager : Alert Thresholds\n• API Response Time > 200ms\n• Cache Hit Ratio < 80%\n• Error Rate > 0.1%\n• System Availability < 99.9%

note bottom of BusinessMetrics : Banking Business Metrics\n• Loan Applications: Real-time\n• Payment Processing: Success Rate\n• Customer Onboarding: Duration\n• Regulatory Compliance: Score

note bottom of JaegerUI : Distributed Tracing Features\n• Request Flow Visualization\n• Performance Bottlenecks\n• Service Dependencies\n• Error Root Cause Analysis

' Performance Benchmarks
note right of APIResponseTime : SLA Targets vs Actual\n• API Response: <200ms (40ms actual)\n• Cache Hit Ratio: >80% (100% actual)\n• System Uptime: 99.9% (99.95% actual)\n• TDD Coverage: >75% (87.4% actual)

@enduml