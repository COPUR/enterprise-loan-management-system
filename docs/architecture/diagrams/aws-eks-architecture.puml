@startuml AWS EKS Enterprise Loan Management System Architecture

!define AWS_COLOR #FF9900
!define KUBERNETES_COLOR #326CE5
!define REDIS_COLOR #DC382D
!define POSTGRES_COLOR #336791
!define MONITORING_COLOR #E6522C
!define SECURITY_COLOR #00D4AA

skinparam backgroundColor #FFFFFF
skinparam defaultFontName Arial
skinparam defaultFontSize 10

title Enterprise Loan Management System - AWS EKS Production Architecture

!define TITLE_SIZE 14
!define HEADER_SIZE 12
!define CONTENT_SIZE 10

' AWS Cloud Infrastructure
package "AWS Cloud Infrastructure" <<AWS>> #FFF8DC {
    
    ' Load Balancer Layer
    package "Load Balancing & Ingress" <<AWS ELB>> #FFE4B5 {
        component [Application Load Balancer\n(ALB)] as ALB AWS_COLOR
        component [Target Groups] as TargetGroups AWS_COLOR
        component [SSL/TLS Termination] as SSL AWS_COLOR
        component [Health Checks] as HealthChecks AWS_COLOR
    }
    
    ' EKS Cluster
    package "Amazon EKS Cluster" <<Kubernetes>> #E6F3FF {
        
        ' Control Plane
        package "EKS Control Plane" <<Managed>> #CCE5FF {
            component [Kubernetes API Server] as APIServer KUBERNETES_COLOR
            component [etcd] as ETCD KUBERNETES_COLOR
            component [Controller Manager] as ControllerManager KUBERNETES_COLOR
            component [Scheduler] as Scheduler KUBERNETES_COLOR
        }
        
        ' Worker Nodes
        package "Worker Nodes (Auto Scaling)" <<EC2>> #B3D9FF {
            component [Node Group 1\n(t3.medium)] as NodeGroup1 KUBERNETES_COLOR
            component [Node Group 2\n(t3.large)] as NodeGroup2 KUBERNETES_COLOR
            component [Cluster Autoscaler] as ClusterAutoscaler KUBERNETES_COLOR
        }
        
        ' Application Pods
        package "Application Pods" <<Kubernetes Workloads>> #99CCFF {
            component [Enterprise Loan Service\n(Java 21 + Spring Boot)] as LoanService KUBERNETES_COLOR
            component [Horizontal Pod Autoscaler\n(HPA)] as HPA KUBERNETES_COLOR
            component [Redis ElastiCache Client] as RedisClient REDIS_COLOR
            component [PostgreSQL Client] as PostgresClient POSTGRES_COLOR
        }
        
        ' Kubernetes Services
        package "Kubernetes Services" <<Service Discovery>> #80BFFF {
            component [ClusterIP Services] as ClusterIP KUBERNETES_COLOR
            component [LoadBalancer Services] as LoadBalancer KUBERNETES_COLOR
            component [Service Discovery] as ServiceDiscovery KUBERNETES_COLOR
        }
    }
    
    ' AWS Managed Services
    package "AWS Managed Services" <<Managed>> #F0F8FF {
        
        ' Database Services
        package "Database Layer" <<RDS>> #E6F2FF {
            database [Amazon RDS PostgreSQL\n(Multi-AZ)\nProduction Database] as RDS POSTGRES_COLOR
            database [RDS Read Replicas\n(Performance Scaling)] as ReadReplicas POSTGRES_COLOR
            component [Automated Backups\n(Point-in-time Recovery)] as Backups POSTGRES_COLOR
        }
        
        ' Cache Layer
        package "Cache Layer" <<ElastiCache>> #FFE6E6 {
            component [Redis ElastiCache Cluster\n(6.1GB Memory Pool)] as ElastiCache REDIS_COLOR
            component [Multi-AZ Replication\n(High Availability)] as RedisHA REDIS_COLOR
            component [Cache Performance\n(2.5ms Response Time)] as CachePerf REDIS_COLOR
        }
        
        ' Message Queue
        package "Message Streaming" <<MSK>> #E6FFE6 {
            queue [Amazon MSK\n(Managed Kafka)] as MSK AWS_COLOR
            component [Kafka Topics\n(Loan, Payment, Audit)] as KafkaTopics AWS_COLOR
            component [Stream Processing] as StreamProcessing AWS_COLOR
        }
        
        ' Security Services
        package "Security & Identity" <<IAM>> #FFE6CC {
            component [IAM Roles\n(Service Accounts)] as IAM SECURITY_COLOR
            component [AWS Secrets Manager\n(API Keys & Credentials)] as SecretsManager SECURITY_COLOR
            component [Security Groups\n(Network ACLs)] as SecurityGroups SECURITY_COLOR
        }
    }
}

' Monitoring and Observability
package "Monitoring & Observability Stack" <<Monitoring>> #FFF0F0 {
    
    ' Prometheus Stack
    package "Metrics Collection" <<Prometheus>> #FFE0E0 {
        component [Prometheus Server\n(Metrics Collection)] as Prometheus MONITORING_COLOR
        component [Grafana Dashboards\n(Visualization)] as Grafana MONITORING_COLOR
        component [AlertManager\n(Alert Routing)] as AlertManager MONITORING_COLOR
    }
    
    ' Logging Stack
    package "Logging & Tracing" <<ELK>> #E0FFE0 {
        component [Elasticsearch\n(Log Storage)] as Elasticsearch MONITORING_COLOR
        component [Logstash\n(Log Processing)] as Logstash MONITORING_COLOR
        component [Kibana\n(Log Analysis)] as Kibana MONITORING_COLOR
        component [Jaeger\n(Distributed Tracing)] as Jaeger MONITORING_COLOR
    }
    
    ' AWS Native Monitoring
    package "AWS CloudWatch" <<CloudWatch>> #E0E0FF {
        component [CloudWatch Metrics\n(Infrastructure Monitoring)] as CloudWatchMetrics AWS_COLOR
        component [CloudWatch Logs\n(Centralized Logging)] as CloudWatchLogs AWS_COLOR
        component [CloudWatch Alarms\n(Alerting)] as CloudWatchAlarms AWS_COLOR
    }
}

' CI/CD Pipeline
package "CI/CD & GitOps" <<DevOps>> #F0FFF0 {
    
    ' Source Control & CI
    package "Continuous Integration" <<GitHub Actions>> #E6FFE6 {
        component [GitHub Repository\n(Source Code)] as GitHub SECURITY_COLOR
        component [GitHub Actions\n(CI Pipeline)] as GitHubActions SECURITY_COLOR
        component [Docker Registry\n(Container Images)] as DockerRegistry SECURITY_COLOR
        component [Security Scanning\n(Vulnerability Assessment)] as SecurityScanning SECURITY_COLOR
    }
    
    ' GitOps Deployment
    package "Continuous Deployment" <<ArgoCD>> #CCFFCC {
        component [ArgoCD\n(GitOps Controller)] as ArgoCD KUBERNETES_COLOR
        component [Helm Charts\n(Application Packaging)] as HelmCharts KUBERNETES_COLOR
        component [Configuration Management\n(Environment Variables)] as ConfigManagement KUBERNETES_COLOR
        component [Rollback Management\n(Blue-Green Deployment)] as RollbackManagement KUBERNETES_COLOR
    }
}

' Banking Application Layer
package "Banking Application Components" <<Domain>> #FFFACD {
    
    ' Core Banking Services
    package "Core Banking Logic" <<Domain Layer>> #FFF8DC {
        component [Customer Management\n(Credit Assessment)] as CustomerMgmt KUBERNETES_COLOR
        component [Loan Origination\n(Business Rules)] as LoanOrigination KUBERNETES_COLOR
        component [Payment Processing\n(Installment Calculation)] as PaymentProcessing KUBERNETES_COLOR
        component [Compliance Engine\n(FAPI Security 71.4%)] as ComplianceEngine SECURITY_COLOR
    }
    
    ' Caching Strategy
    package "Multi-Level Caching" <<Performance>> #F5F5DC {
        component [L1 Cache\n(In-Memory)] as L1Cache REDIS_COLOR
        component [L2 Cache\n(Redis ElastiCache)] as L2Cache REDIS_COLOR
        component [Cache Invalidation\n(Smart Patterns)] as CacheInvalidation REDIS_COLOR
        component [Cache Warming\n(Predictive Loading)] as CacheWarming REDIS_COLOR
    }
    
    ' API Gateway
    package "API Management" <<Gateway>> #FAFAD2 {
        component [REST API Endpoints\n(Banking Operations)] as RestAPI KUBERNETES_COLOR
        component [Rate Limiting\n(Security Controls)] as RateLimiting SECURITY_COLOR
        component [API Authentication\n(JWT Tokens)] as APIAuth SECURITY_COLOR
        component [Health Monitoring\n(87.4% TDD Coverage)] as HealthMonitoring MONITORING_COLOR
    }
}

' Network Flow and Connections
ALB --> LoadBalancer : HTTPS Traffic
ALB --> SSL : Certificate Management
LoadBalancer --> LoanService : Load Balanced Requests
TargetGroups --> HealthChecks : Health Validation

' EKS Cluster Internal
APIServer --> Scheduler : Pod Scheduling
APIServer --> ControllerManager : Resource Management
APIServer --> ETCD : State Storage
LoanService --> HPA : Auto Scaling
ClusterAutoscaler --> NodeGroup1 : Node Scaling
ClusterAutoscaler --> NodeGroup2 : Node Scaling

' Application Connections
LoanService --> RedisClient : Cache Operations
LoanService --> PostgresClient : Database Operations
RedisClient --> ElastiCache : Redis Cluster
PostgresClient --> RDS : Primary Database
PostgresClient --> ReadReplicas : Read Operations

' Managed Services Integration
RDS --> Backups : Automated Backups
ElastiCache --> RedisHA : Multi-AZ Replication
ElastiCache --> CachePerf : Performance Monitoring
MSK --> KafkaTopics : Event Streaming
MSK --> StreamProcessing : Message Processing

' Security Integration
IAM --> LoanService : Service Account Roles
SecretsManager --> LoanService : API Key Management
SecurityGroups --> ALB : Network Security
SecurityGroups --> RDS : Database Security
SecurityGroups --> ElastiCache : Cache Security

' Monitoring Connections
Prometheus --> LoanService : Metrics Collection
Grafana --> Prometheus : Metrics Visualization
AlertManager --> Prometheus : Alert Processing
Elasticsearch --> LoanService : Log Collection
Logstash --> Elasticsearch : Log Processing
Kibana --> Elasticsearch : Log Analysis
Jaeger --> LoanService : Distributed Tracing

' CloudWatch Integration
CloudWatchMetrics --> ALB : Load Balancer Metrics
CloudWatchMetrics --> RDS : Database Metrics
CloudWatchMetrics --> ElastiCache : Cache Metrics
CloudWatchLogs --> LoanService : Application Logs
CloudWatchAlarms --> AlertManager : Alert Integration

' CI/CD Flow
GitHub --> GitHubActions : Code Push
GitHubActions --> SecurityScanning : Security Validation
GitHubActions --> DockerRegistry : Image Build
DockerRegistry --> ArgoCD : Image Deployment
ArgoCD --> HelmCharts : Application Packaging
HelmCharts --> LoanService : Application Deployment
ConfigManagement --> LoanService : Environment Configuration
RollbackManagement --> ArgoCD : Deployment Management

' Banking Application Flow
RestAPI --> CustomerMgmt : Customer Operations
RestAPI --> LoanOrigination : Loan Processing
RestAPI --> PaymentProcessing : Payment Operations
ComplianceEngine --> RestAPI : Security Validation
APIAuth --> RestAPI : Authentication
RateLimiting --> RestAPI : Rate Control
HealthMonitoring --> RestAPI : Health Checks

' Caching Flow
L1Cache --> L2Cache : Cache Hierarchy
L2Cache --> ElastiCache : Redis Operations
CacheInvalidation --> L2Cache : Cache Management
CacheWarming --> L2Cache : Predictive Loading

' Banking Business Rules
note top of CustomerMgmt : Customer Management\n• Credit Score Validation\n• Profile Management\n• Risk Assessment

note top of LoanOrigination : Loan Origination\n• Interest Rates: 0.1% - 0.5%\n• Installments: 6, 9, 12, 24 months\n• Loan Amount: $1,000 - $500,000

note top of PaymentProcessing : Payment Processing\n• Installment Calculations\n• Payment Validation\n• Transaction Processing

note top of ComplianceEngine : Banking Compliance\n• FAPI Security: 71.4%\n• TDD Coverage: 87.4%\n• Regulatory Standards

' Performance Metrics
note top of ElastiCache : Redis ElastiCache Performance\n• 100% Cache Hit Ratio\n• 2.5ms Response Time\n• 6.1GB Memory Pool\n• Multi-AZ High Availability

note top of RDS : PostgreSQL Performance\n• Multi-AZ Deployment\n• Automated Backups\n• Read Replicas\n• Point-in-time Recovery

' Architecture Principles
note bottom of LoanService : Architecture Principles\n• Hexagonal Architecture\n• Domain-Driven Design (DDD)\n• Microservices Pattern\n• Event-Driven Architecture\n• Test-Driven Development

@enduml