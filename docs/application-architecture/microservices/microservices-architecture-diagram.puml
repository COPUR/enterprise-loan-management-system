@startuml Enterprise Loan Management - Microservices Architecture

skinparam backgroundColor #FAFAFA
skinparam shadowing false
skinparam componentBorderColor #333333
skinparam componentBackgroundColor #E8F4FD
skinparam arrowColor #2196F3
skinparam arrowFontColor #333333

title Enterprise Loan Management System - Microservices Architecture

package "Client Layer" {
    [Web Frontend] as WEB #FFE0B2
    [Mobile App] as MOBILE #FFE0B2
    [Third Party] as THIRD_PARTY #FFE0B2
}

package "API Gateway Layer" {
    component [Redis-Integrated API Gateway] as GATEWAY #E1F5FE
    note right of GATEWAY : Circuit Breaker Patterns\nRate Limiting (Redis)\nToken Management\nOWASP Top 10 Security\nFAPI Compliance\nLoad Balancing
}

package "OAuth2.1 Identity & Security Layer" {
    component [Keycloak OAuth2.1 Server] as KEYCLOAK #E3F2FD
    component [LDAP Identity Provider] as LDAP #F0F4C3
    component [OWASP Security Filters] as SECURITY #F3E5F5
    component [Party Role Authorization] as PARTY_AUTH #FCE4EC
    
    note right of KEYCLOAK : Banking Realm\nJWT Token Management\nRole-based Access Control\nOAuth2.1 PKCE Flow\nAudit Event Logging\nSession Management
    note right of LDAP : Enterprise Directory\nUser Authentication\nGroup Membership\nDepartment Mapping\nSecurity Credentials
    note right of SECURITY : SQL Injection Protection\nXSS Prevention\nCSRF Protection\nSecurity Headers\nFAPI Compliance
    note right of PARTY_AUTH : Authoritative Role Source\nTemporal Access Control\nMonetary Limits\nBusiness Unit Scoping\nCompliance Validation
}

package "Microservices Layer" {
    
    package "Customer Management Service" {
        [Customer API] as CUSTOMER_API #C8E6C9
        [Customer Domain] as CUSTOMER_DOMAIN #C8E6C9 {
            - Credit Management
            - Account Status
            - Profile Validation
        }
        [Customer Repository] as CUSTOMER_REPO #C8E6C9
    }
    
    package "Loan Origination Service" {
        [Loan API] as LOAN_API #FFCDD2
        [Loan Domain] as LOAN_DOMAIN #FFCDD2 {
            - Business Rules (6,9,12,24)
            - Interest Rate (0.1-0.5%)
            - Installment Calculation
        }
        [Loan Repository] as LOAN_REPO #FFCDD2
    }
    
    package "Payment Processing Service" {
        [Payment API] as PAYMENT_API #DCEDC8
        [Payment Domain] as PAYMENT_DOMAIN #DCEDC8 {
            - Payment Distribution
            - Discount/Penalty (0.001)
            - Multi-installment Support
        }
        [Payment Repository] as PAYMENT_REPO #DCEDC8
    }
    
    package "Party Data Management Service" {
        [Party API] as PARTY_API #E1BEE7
        [Party Domain] as PARTY_DOMAIN #E1BEE7 {
            - Role Management
            - Group Membership
            - Temporal Access Control
            - Authority Levels
            - Compliance Tracking
        }
        [Party Repository] as PARTY_REPO #E1BEE7
    }
}

package "SAGA Orchestration Layer" {
    [Loan Creation SAGA] as LOAN_SAGA #FFF3E0 {
        - Customer Validation
        - Credit Reservation
        - Loan Creation
        - Installment Generation
        - Compensation Handling
    }
    
    [Payment Processing SAGA] as PAYMENT_SAGA #FFF3E0 {
        - Payment Validation
        - Installment Calculation
        - Payment Distribution
        - Status Updates
    }
}

package "Event Streaming Layer" {
    [Apache Kafka] as KAFKA #E0E0E0 {
        Topics:
        - customer-events
        - loan-events
        - payment-events
        - credit-events
        - saga-events
    }
}

package "Data Layer" {
    database "Customer DB" as CUSTOMER_DB #E8F5E8 {
        Schema: customer_db
        - customers
        - credit_reservations
    }
    
    database "Loan DB" as LOAN_DB #FFE8E8 {
        Schema: loan_db
        - loans
        - loan_installments
    }
    
    database "Payment DB" as PAYMENT_DB #E8F8E8 {
        Schema: payment_db
        - payments
        - payment_installments
    }
    
    database "Gateway DB" as GATEWAY_DB #F0F0F0 {
        Schema: banking_gateway
        - saga_states
        - audit_logs
        - session_data
    }
    
    database "Party DB" as PARTY_DB #F0E8F0 {
        Schema: party_management
        - parties
        - party_roles
        - party_groups
        - role_audit_log
    }
}

package "Cache Layer" {
    [Redis ElastiCache] as REDIS #FFE0E0 {
        - Token Cache
        - Rate Limiting
        - Session Storage
        - Circuit Breaker State
    }
}

package "Monitoring Layer" {
    [Prometheus] as PROMETHEUS #E8E8FF
    [Grafana] as GRAFANA #E8E8FF
    [Health Checks] as HEALTH #E8E8FF
}

' Client connections
WEB --> GATEWAY : HTTPS/REST
MOBILE --> GATEWAY : HTTPS/REST
THIRD_PARTY --> GATEWAY : FAPI/OpenBanking

' OAuth2.1 Identity Flow
LDAP --> KEYCLOAK : Identity Federation
KEYCLOAK --> PARTY_AUTH : Role Authorization
PARTY_AUTH --> PARTY_API : Role Resolution

' Gateway to Security  
GATEWAY --> KEYCLOAK : OAuth2.1 Token Validation
GATEWAY --> SECURITY : Security Validation
GATEWAY --> PARTY_AUTH : Business Authorization
GATEWAY --> REDIS : Cache/Rate Limit

' Security to Services
SECURITY --> CUSTOMER_API : Authorized Requests
SECURITY --> LOAN_API : Authorized Requests
SECURITY --> PAYMENT_API : Authorized Requests
SECURITY --> PARTY_API : Authorized Requests

' Service Internal Architecture
CUSTOMER_API --> CUSTOMER_DOMAIN
CUSTOMER_DOMAIN --> CUSTOMER_REPO
CUSTOMER_REPO --> CUSTOMER_DB

LOAN_API --> LOAN_DOMAIN
LOAN_DOMAIN --> LOAN_REPO
LOAN_REPO --> LOAN_DB

PAYMENT_API --> PAYMENT_DOMAIN
PAYMENT_DOMAIN --> PAYMENT_REPO
PAYMENT_REPO --> PAYMENT_DB

PARTY_API --> PARTY_DOMAIN
PARTY_DOMAIN --> PARTY_REPO
PARTY_REPO --> PARTY_DB

' SAGA Orchestration
LOAN_SAGA --> KAFKA : Publish Events
PAYMENT_SAGA --> KAFKA : Publish Events
KAFKA --> CUSTOMER_API : Event Consumption
KAFKA --> LOAN_API : Event Consumption
KAFKA --> PAYMENT_API : Event Consumption
KAFKA --> PARTY_API : Event Consumption

' SAGA State Management
LOAN_SAGA --> GATEWAY_DB : State Persistence
PAYMENT_SAGA --> GATEWAY_DB : State Persistence

' Monitoring
CUSTOMER_API --> PROMETHEUS : Metrics
LOAN_API --> PROMETHEUS : Metrics
PAYMENT_API --> PROMETHEUS : Metrics
PARTY_API --> PROMETHEUS : Metrics
KEYCLOAK --> PROMETHEUS : OAuth2.1 Metrics
GATEWAY --> PROMETHEUS : Metrics
PROMETHEUS --> GRAFANA : Visualization

' Health Checks
HEALTH --> CUSTOMER_API
HEALTH --> LOAN_API
HEALTH --> PAYMENT_API
HEALTH --> PARTY_API
HEALTH --> KEYCLOAK
HEALTH --> LDAP
HEALTH --> REDIS
HEALTH --> KAFKA

note right of GATEWAY
  **Circuit Breaker Configuration:**
  - Sliding Window: 100 requests
  - Failure Threshold: 50%
  - Half-open State: 3 calls
  - Wait Duration: 30 seconds
  
  **Rate Limiting:**
  - API Gateway: 1000 req/min
  - Auth Endpoints: 10 req/min
  - Per-IP tracking with Redis
end note

note right of LOAN_SAGA
  **SAGA Workflow Steps:**
  1. Validate Customer
  2. Reserve Credit
  3. Create Loan
  4. Generate Installments
  5. Complete Transaction
  
  **Compensation:**
  - Automatic timeout detection
  - Credit release on failure
  - Event-driven rollback
end note

note bottom of REDIS
  **Cache Strategy:**
  - Token validation: 24h TTL
  - Rate limit counters: 1min TTL
  - Circuit breaker state: Persistent
  - Session data: Configurable TTL
end note

@enduml