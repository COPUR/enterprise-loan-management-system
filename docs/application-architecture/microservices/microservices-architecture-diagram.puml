@startuml Enterprise Loan Management - Microservices Architecture

skinparam backgroundColor #FAFAFA
skinparam shadowing false
skinparam componentBorderColor #333333
skinparam componentBackgroundColor #E8F4FD
skinparam arrowColor #2196F3
skinparam arrowFontColor #333333

title Enterprise Banking System - Java 21 Microservices with Istio Service Mesh

package "Client Layer" {
    [Web Frontend] as WEB #FFE0B2
    [Mobile App] as MOBILE #FFE0B2
    [Third Party] as THIRD_PARTY #FFE0B2
}

package "Istio Service Mesh Gateway Layer" {
    component [Istio Ingress Gateway] as ISTIO_GATEWAY #B39DDB
    component [Istio Pilot] as ISTIO_PILOT #B39DDB
    component [Istio Citadel] as ISTIO_CITADEL #B39DDB
    component [Envoy Proxy Sidecar] as ENVOY_SIDECAR #E1BEE7
    
    note right of ISTIO_GATEWAY : Traffic Management\nSecurity Policies\nTLS Termination\nFAPI Compliance\nLoad Balancing\nCircuit Breaking
    note right of ISTIO_PILOT : Service Discovery\nTraffic Routing\nResilience Policies\nConfiguration Management
    note right of ISTIO_CITADEL : Certificate Management\nmTLS Encryption\nService-to-Service Auth\nZero Trust Security
    note right of ENVOY_SIDECAR : Request Routing\nLoad Balancing\nMetrics Collection\nDistributed Tracing
}

package "OAuth2.1 Identity & Security Layer" {
    component [Keycloak OAuth2.1 Server] as KEYCLOAK #E3F2FD
    component [LDAP Identity Provider] as LDAP #F0F4C3
    component [OWASP Security Filters] as SECURITY #F3E5F5
    component [Party Role Authorization] as PARTY_AUTH #FCE4EC
    
    note right of KEYCLOAK : Banking Realm\nJWT Token Management\nRole-based Access Control\nOAuth 2.1 + FAPI 2.0\nDPoP Token Binding\nAudit Event Logging\nSession Management
    note right of LDAP : Enterprise Directory\nUser Authentication\nGroup Membership\nDepartment Mapping\nSecurity Credentials
    note right of SECURITY : SQL Injection Protection\nXSS Prevention\nCSRF Protection\nSecurity Headers\nFAPI Compliance
    note right of PARTY_AUTH : Authoritative Role Source\nTemporal Access Control\nMonetary Limits\nBusiness Unit Scoping\nCompliance Validation
}

package "Microservices Layer" {
    
    package "Customer Management Service" {
        [Customer API] as CUSTOMER_API #C8E6C9
        [Envoy Sidecar] as CUSTOMER_ENVOY #E1BEE7
        [Customer Domain] as CUSTOMER_DOMAIN #C8E6C9
        note right of CUSTOMER_DOMAIN : - Java 21 Records & Pattern Matching\n- Credit Management with Virtual Threads\n- KYC Validation\n- Customer Status with Domain Events
        [Customer Repository] as CUSTOMER_REPO #C8E6C9
        note right of CUSTOMER_ENVOY : mTLS Encryption\nTraffic Control\nMetrics Collection\nCircuit Breaking\nZero Trust Validation
    }
    
    package "Loan Origination Service" {
        [Loan API] as LOAN_API #FFCDD2
        [Envoy Sidecar] as LOAN_ENVOY #E1BEE7
        [Loan Domain] as LOAN_DOMAIN #FFCDD2
        note right of LOAN_DOMAIN : - Business Rules (6,9,12,24)\n- Interest Rate (0.1-0.5%)\n- Installment Calculation
        [Loan Repository] as LOAN_REPO #FFCDD2
        note right of LOAN_ENVOY : mTLS Encryption\nLoad Balancing\nRetry Policies\nTimeout Management
    }
    
    package "Payment Processing Service" {
        [Payment API] as PAYMENT_API #DCEDC8
        [Envoy Sidecar] as PAYMENT_ENVOY #E1BEE7
        [Payment Domain] as PAYMENT_DOMAIN #DCEDC8
        note right of PAYMENT_DOMAIN : - Payment Distribution\n- Discount/Penalty (0.001)\n- Multi-installment Support
        [Payment Repository] as PAYMENT_REPO #DCEDC8
        note right of PAYMENT_ENVOY : Security Policies\nRate Limiting\nFault Injection\nObservability
    }
    
    package "Party Data Management Service" {
        [Party API] as PARTY_API #E1BEE7
        [Envoy Sidecar] as PARTY_ENVOY #E1BEE7
        [Party Domain] as PARTY_DOMAIN #E1BEE7
        note right of PARTY_DOMAIN : - Role Management\n- Group Membership\n- Temporal Access Control\n- Authority Levels\n- Compliance Tracking
        [Party Repository] as PARTY_REPO #E1BEE7
        note right of PARTY_ENVOY : Authorization Policies\nAudit Logging\nSecurity Headers\nCompliance Monitoring
    }
}

package "SAGA Orchestration Layer" {
    [Loan Creation SAGA] as LOAN_SAGA #FFF3E0
    note right of LOAN_SAGA : - Customer Validation\n- Credit Reservation\n- Loan Creation\n- Installment Generation\n- Compensation Handling
    
    [Payment Processing SAGA] as PAYMENT_SAGA #FFF3E0
    note right of PAYMENT_SAGA : - Payment Validation\n- Installment Calculation\n- Payment Distribution\n- Status Updates
}

package "Event Streaming Layer" {
    [Apache Kafka] as KAFKA #E0E0E0
    note right of KAFKA : Topics:\n- customer-events\n- loan-events\n- payment-events\n- credit-events\n- saga-events
}

package "Data Layer" {
    database "Customer DB" as CUSTOMER_DB #E8F5E8
    note right of CUSTOMER_DB : Schema: customer_db\n- customers\n- credit_reservations
    
    database "Loan DB" as LOAN_DB #FFE8E8
    note right of LOAN_DB : Schema: loan_db\n- loans\n- loan_installments
    
    database "Payment DB" as PAYMENT_DB #E8F8E8
    note right of PAYMENT_DB : Schema: payment_db\n- payments\n- payment_installments
    
    database "Gateway DB" as GATEWAY_DB #F0F0F0
    note right of GATEWAY_DB : Schema: banking_gateway\n- saga_states\n- audit_logs\n- session_data
    
    database "Party DB" as PARTY_DB #F0E8F0
    note right of PARTY_DB : Schema: party_management\n- parties\n- party_roles\n- party_groups\n- role_audit_log
}

package "Cache Layer" {
    [Redis ElastiCache] as REDIS #FFE0E0
    note right of REDIS : - Token Cache\n- Rate Limiting\n- Session Storage\n- Circuit Breaker State
}

package "Monitoring Layer" {
    [Prometheus] as PROMETHEUS #E8E8FF
    [Grafana] as GRAFANA #E8E8FF
    [Health Checks] as HEALTH #E8E8FF
}

' Client connections through Istio Ingress Gateway
WEB --> ISTIO_GATEWAY : HTTPS/REST
MOBILE --> ISTIO_GATEWAY : HTTPS/REST
THIRD_PARTY --> ISTIO_GATEWAY : FAPI/OpenBanking

' Istio Service Mesh Traffic Flow
ISTIO_GATEWAY --> CUSTOMER_ENVOY : mTLS
ISTIO_GATEWAY --> LOAN_ENVOY : mTLS
ISTIO_GATEWAY --> PAYMENT_ENVOY : mTLS
ISTIO_GATEWAY --> PARTY_ENVOY : mTLS

' Envoy Sidecars to Service APIs
CUSTOMER_ENVOY --> CUSTOMER_API : Internal
LOAN_ENVOY --> LOAN_API : Internal  
PAYMENT_ENVOY --> PAYMENT_API : Internal
PARTY_ENVOY --> PARTY_API : Internal

' OAuth2.1 Identity Flow with Istio
LDAP --> KEYCLOAK : Identity Federation
KEYCLOAK --> PARTY_AUTH : Role Authorization
PARTY_AUTH --> PARTY_API : Role Resolution

' Istio Gateway Security Integration
ISTIO_GATEWAY --> KEYCLOAK : OAuth2.1 Token Validation
ISTIO_GATEWAY --> SECURITY : Security Validation
ISTIO_CITADEL --> CUSTOMER_ENVOY : Certificate Management
ISTIO_CITADEL --> LOAN_ENVOY : Certificate Management
ISTIO_CITADEL --> PAYMENT_ENVOY : Certificate Management
ISTIO_CITADEL --> PARTY_ENVOY : Certificate Management

' Distributed Redis Cache Integration
CUSTOMER_ENVOY --> REDIS : Session Cache
LOAN_ENVOY --> REDIS : Rate Limiting
PAYMENT_ENVOY --> REDIS : Circuit Breaker State
PARTY_ENVOY --> REDIS : Role Cache
KEYCLOAK --> REDIS : Token Cache
ISTIO_PILOT --> CUSTOMER_ENVOY : Service Discovery
ISTIO_PILOT --> LOAN_ENVOY : Traffic Management  
ISTIO_PILOT --> PAYMENT_ENVOY : Load Balancing
ISTIO_PILOT --> PARTY_ENVOY : Resilience Policies

' Security to Services
SECURITY --> CUSTOMER_API : Authorized Requests
SECURITY --> LOAN_API : Authorized Requests
SECURITY --> PAYMENT_API : Authorized Requests
SECURITY --> PARTY_API : Authorized Requests

' Service Internal Architecture
CUSTOMER_API --> CUSTOMER_DOMAIN
CUSTOMER_DOMAIN --> CUSTOMER_REPO
CUSTOMER_REPO --> CUSTOMER_DB

LOAN_API --> LOAN_DOMAIN
LOAN_DOMAIN --> LOAN_REPO
LOAN_REPO --> LOAN_DB

PAYMENT_API --> PAYMENT_DOMAIN
PAYMENT_DOMAIN --> PAYMENT_REPO
PAYMENT_REPO --> PAYMENT_DB

PARTY_API --> PARTY_DOMAIN
PARTY_DOMAIN --> PARTY_REPO
PARTY_REPO --> PARTY_DB

' SAGA Orchestration
LOAN_SAGA --> KAFKA : Publish Events
PAYMENT_SAGA --> KAFKA : Publish Events
KAFKA --> CUSTOMER_API : Event Consumption
KAFKA --> LOAN_API : Event Consumption
KAFKA --> PAYMENT_API : Event Consumption
KAFKA --> PARTY_API : Event Consumption

' SAGA State Management
LOAN_SAGA --> GATEWAY_DB : State Persistence
PAYMENT_SAGA --> GATEWAY_DB : State Persistence

' Monitoring
CUSTOMER_API --> PROMETHEUS : Metrics
LOAN_API --> PROMETHEUS : Metrics
PAYMENT_API --> PROMETHEUS : Metrics
PARTY_API --> PROMETHEUS : Metrics
KEYCLOAK --> PROMETHEUS : OAuth2.1 Metrics
ISTIO_GATEWAY --> PROMETHEUS : Gateway Metrics
CUSTOMER_ENVOY --> PROMETHEUS : Sidecar Metrics
LOAN_ENVOY --> PROMETHEUS : Sidecar Metrics
PAYMENT_ENVOY --> PROMETHEUS : Sidecar Metrics
PARTY_ENVOY --> PROMETHEUS : Sidecar Metrics
PROMETHEUS --> GRAFANA : Visualization

' Health Checks
HEALTH --> CUSTOMER_API
HEALTH --> LOAN_API
HEALTH --> PAYMENT_API
HEALTH --> PARTY_API
HEALTH --> KEYCLOAK
HEALTH --> LDAP
HEALTH --> REDIS
HEALTH --> KAFKA

note right of ISTIO_GATEWAY
  **Istio Traffic Management:**
  - Circuit Breaker: 100 requests sliding window
  - Retry Policy: 3 attempts with 30s timeout
  - Rate Limiting: 1000 req/min per client
  - Load Balancing: Round Robin with health checks
  - TLS Termination: TLS 1.3 with FAPI compliance
  
  **Envoy Sidecar Policies:**
  - mTLS between all services
  - Authorization policies per service
  - Distributed tracing with Jaeger
  - Auth Endpoints: 10 req/min
  - Per-IP tracking with Redis
end note

note right of LOAN_SAGA
  **SAGA Workflow Steps:**
  1. Validate Customer
  2. Reserve Credit
  3. Create Loan
  4. Generate Installments
  5. Complete Transaction
  
  **Compensation:**
  - Automatic timeout detection
  - Credit release on failure
  - Event-driven rollback
end note

note bottom of REDIS
  **Cache Strategy:**
  - Token validation: 24h TTL
  - Rate limit counters: 1min TTL
  - Circuit breaker state: Persistent
  - Session data: Configurable TTL
end note

@enduml