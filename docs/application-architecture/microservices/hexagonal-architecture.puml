@startuml Hexagonal Architecture - Enterprise Loan Management System (Production)

!define PRIMARY_COLOR #4A90E2
!define SECONDARY_COLOR #7ED321
!define INFRASTRUCTURE_COLOR #F5A623
!define DOMAIN_COLOR #BD10E0
!define AWS_COLOR #FF9900
!define CACHE_COLOR #DC382D
!define SAGA_COLOR #E74C3C
!define EVENT_COLOR #9B59B6

skinparam backgroundColor #FFFFFF
skinparam componentStyle rectangle

title Enterprise Loan Management System - Event-Driven Hexagonal Architecture v1.0.0

package "Infrastructure Layer (AWS EKS)" <<Frame>> {
    
    package "Input Adapters" {
        component [REST API Controllers\n(BIAN Compliant)] as RestAPI INFRASTRUCTURE_COLOR
        component [Spring Boot Actuator\n(Health & Metrics)] as Actuator INFRASTRUCTURE_COLOR
        component [Kafka Event Consumers\n(EDA Message Processing)] as KafkaConsumers EVENT_COLOR
        component [SAGA Orchestration\n(SpringSagaOrchestrator)] as SagaOrchestrators SAGA_COLOR
        component [FAPI Security Layer\n(OAuth2.1 + JWT)] as SecurityLayer INFRASTRUCTURE_COLOR
        component [Event Store Listeners\n(Event Sourcing)] as EventStoreListeners EVENT_COLOR
    }
    
    package "Output Adapters" {
        component [JPA Entity Adapters\n(Separate from Domain)] as JpaRepositories INFRASTRUCTURE_COLOR
        component [Redis ElastiCache\n(100% Hit Ratio, 2.5ms)] as RedisCache CACHE_COLOR
        component [Kafka Event Publishers\n(Domain Event Streaming)] as KafkaPublishers EVENT_COLOR
        component [Event Store Repository\n(JpaEventStore)] as EventStore EVENT_COLOR
        component [External APIs\n(Berlin Group PSD2)] as ExternalAPIs INFRASTRUCTURE_COLOR
        component [SAGA State Store\n(Distributed TX State)] as SagaStateStore SAGA_COLOR
        component [Monitoring Adapters\n(Prometheus, CloudWatch)] as MonitoringAdapters INFRASTRUCTURE_COLOR
    }
    
    package "Configuration & Security" {
        component [Spring Configuration\n(Java 21, Virtual Threads)] as SpringConfig INFRASTRUCTURE_COLOR
        component [FAPI Security Config\n(Rate Limiting, SCA)] as SecurityConfig INFRASTRUCTURE_COLOR
        component [Cache Configuration\n(Multi-Level Strategy)] as CacheConfig CACHE_COLOR
        component [Kafka Configuration\n(Topic Routing, DLQ)] as KafkaConfig EVENT_COLOR
        component [AWS Integration\n(IAM, Secrets Manager)] as AWSIntegration AWS_COLOR
    }
}

package "Application Layer (Business Orchestration)" <<Frame>> {
    component [Customer Application Services\n(BIAN Consumer Loan)] as CustomerAppServices SECONDARY_COLOR
    component [Loan Application Services\n(BIAN Loan Origination)] as LoanAppServices SECONDARY_COLOR
    component [Payment Application Services\n(BIAN Payment Initiation)] as PaymentAppServices SECONDARY_COLOR
    component [SAGA Orchestrator\n(LoanOriginationSaga)] as LoanOriginationSaga SAGA_COLOR
    component [Event Handlers\n(Domain Event Processing)] as EventHandlers EVENT_COLOR
    component [Cache Management\n(Invalidation & Warming)] as CacheManagement CACHE_COLOR
    component [AIAssistant Service\n(Spring AI Integration)] as AIAssistant SECONDARY_COLOR
}

package "Domain Layer (Core Banking Logic)" <<Frame>> {
    
    package "Domain Aggregates - Event-Driven" {
        component [Customer Aggregate\n(Event Sourcing)] as CustomerAggregate DOMAIN_COLOR
        component [Loan Aggregate\n(424 lines + Events)] as LoanAggregate DOMAIN_COLOR
        component [LoanInstallment Entity\n(215 lines + State)] as LoanInstallmentEntity DOMAIN_COLOR
        component [Payment Aggregate\n(Transaction Events)] as PaymentAggregate DOMAIN_COLOR
        component [Party Management\n(Role & Authority)] as PartyAggregate DOMAIN_COLOR
    }
    
    package "Domain Events - EDA Foundation" {
        component [LoanApplicationInitiated\n(SAGA Start Event)] as LoanApplicationInitiated EVENT_COLOR
        component [CreditAssessmentCompleted\n(Assessment Event)] as CreditAssessmentCompleted EVENT_COLOR
        component [LoanApproved/Rejected\n(Decision Events)] as LoanDecisionEvents EVENT_COLOR
        component [PaymentProcessed\n(Payment Events)] as PaymentProcessed EVENT_COLOR
        component [SAGA Events\n(Orchestration Events)] as SagaEvents SAGA_COLOR
        component [BIAN Event Types\n(Banking Standards)] as BianEvents EVENT_COLOR
    }
    
    package "Value Objects & BIAN Types" {
        component [Money Value Object\n(Immutable Currency)] as MoneyVO DOMAIN_COLOR
        component [BIAN Data Types\n(NextGenPSD2 Compliant)] as BianDataTypes DOMAIN_COLOR
        component [Berlin Group Types\n(Payment Standards)] as BerlinGroupTypes DOMAIN_COLOR
        component [LoanId, CustomerId\n(Strong Typing)] as IdValueObjects DOMAIN_COLOR
        component [LoanType, LoanStatus\n(Business States)] as StatusValueObjects DOMAIN_COLOR
    }
    
    package "Domain Services - Event-Driven" {
        component [Credit Assessment Service\n(Event-Based Processing)] as CreditAssessmentService DOMAIN_COLOR
        component [Loan Calculation Service\n(Mathematical Precision)] as LoanCalculationService DOMAIN_COLOR
        component [Payment Processing Service\n(Event Sourcing)] as PaymentCalculationService DOMAIN_COLOR
        component [SAGA Coordination Service\n(Business Process)] as SagaCoordinationService SAGA_COLOR
    }
    
    package "Ports - Clean Interfaces" {
        component [Customer Repository Port\n(Event Store Interface)] as CustomerPort PRIMARY_COLOR
        component [Loan Repository Port\n(Event Sourcing Port)] as LoanPort PRIMARY_COLOR
        component [Payment Repository Port\n(Transaction Interface)] as PaymentPort PRIMARY_COLOR
        component [Event Store Port\n(Event Persistence)] as EventStorePort EVENT_COLOR
        component [SAGA State Port\n(Orchestration State)] as SagaStatePort SAGA_COLOR
        component [Event Publisher Port\n(Kafka Integration)] as EventPublisherPort EVENT_COLOR
    }
}

' External Systems (AWS Managed Services + Kafka)
cloud "AWS Managed Services" {
    database "Amazon RDS PostgreSQL\n(Multi-AZ, Event Store)" as Database AWS_COLOR
    queue "Amazon MSK Kafka\n(Event Streaming Platform)" as Kafka EVENT_COLOR
    storage "ElastiCache Redis Cluster\n(6.1GB, Multi-AZ Cache)" as Redis CACHE_COLOR
    component "CloudWatch\n(Monitoring & Alerting)" as CloudWatch AWS_COLOR
    component "Secrets Manager\n(API Keys & Credentials)" as SecretsManager AWS_COLOR
}

' BIAN Service Domains
package "BIAN Service Domains" <<Frame>> {
    component [Consumer Loan SD\n(Loan Management)] as ConsumerLoanSD DOMAIN_COLOR
    component [Payment Initiation SD\n(Payment Processing)] as PaymentInitiationSD DOMAIN_COLOR
    component [Party Data Management\n(Customer Data)] as PartyDataManagementSD DOMAIN_COLOR
    component [Credit Management SD\n(Credit Assessment)] as CreditManagementSD DOMAIN_COLOR
}

' Event-Driven Connections
KafkaConsumers --> EventHandlers : Process Events
EventHandlers --> LoanOriginationSaga : Trigger SAGA Steps
EventHandlers --> CustomerPort : Customer Events
EventHandlers --> LoanPort : Loan Events
EventHandlers --> PaymentPort : Payment Events

' SAGA Orchestration Flow
LoanOriginationSaga --> SagaCoordinationService : Coordinate Steps
SagaCoordinationService --> SagaStatePort : State Management
SagaStatePort --> SagaStateStore : Persist SAGA State

' Domain Event Publishing
CustomerAggregate --> LoanApplicationInitiated : raises
LoanAggregate --> CreditAssessmentCompleted : raises
LoanAggregate --> LoanDecisionEvents : raises
PaymentAggregate --> PaymentProcessed : raises
LoanOriginationSaga --> SagaEvents : raises

' Event Store Integration
EventStorePort --> EventStore : Persist Events
EventStore --> Database : Store Event Data
EventStoreListeners --> EventStorePort : Read Events

' Kafka Event Streaming
EventPublisherPort --> KafkaPublishers : Publish Domain Events
KafkaPublishers --> Kafka : Send to Topics
Kafka --> KafkaConsumers : Consume Events

' Application Layer Coordination
CustomerAppServices --> CustomerPort : Use Cases
LoanAppServices --> LoanPort : Use Cases
PaymentAppServices --> PaymentPort : Use Cases
AIAssistant --> LoanPort : AI-Enhanced Processing

' Domain Layer Internal Relationships
CustomerPort --> CustomerAggregate : orchestrates
LoanPort --> LoanAggregate : orchestrates
PaymentPort --> PaymentAggregate : orchestrates

' BIAN Service Domain Integration
ConsumerLoanSD --> LoanAggregate : BIAN Compliant
PaymentInitiationSD --> PaymentAggregate : Berlin Group
PartyDataManagementSD --> CustomerAggregate : Customer Data
CreditManagementSD --> CreditAssessmentService : Credit Services

' Value Objects Integration
CustomerAggregate --> MoneyVO : contains
CustomerAggregate --> BianDataTypes : contains
LoanAggregate --> BerlinGroupTypes : contains
LoanAggregate --> StatusValueObjects : contains
LoanAggregate --> LoanInstallmentEntity : contains

' Infrastructure Implementation
RestAPI --> SecurityLayer : FAPI Authentication
SecurityLayer --> CustomerAppServices : Authenticated Requests
SecurityLayer --> LoanAppServices : Authorized Access
SecurityLayer --> PaymentAppServices : Secure Processing

JpaRepositories --> Database : SQL Operations
RedisCache --> Redis : Cache Operations
KafkaConfig --> Kafka : Topic Configuration
MonitoringAdapters --> CloudWatch : Metrics & Logs

' Banking Business Rules with Events
note top of CustomerPort : Customer Management (Event-Driven)\n• Credit Score Validation (300-850)\n• Profile Management Events\n• Risk Assessment Processing\n• KYC Compliance Events

note top of LoanPort : Loan Management - Event Sourcing\n• Event-Driven State Management\n• SAGA Orchestration Support\n• 8+ Domain Events\n• Zero JPA Dependencies\n• Complete Event Lifecycle

note top of PaymentPort : Payment Processing (BIAN)\n• Berlin Group PSD2 Compliance\n• Event-Based Transactions\n• Payment Initiation Events\n• Real-time Processing

note top of LoanOriginationSaga : SAGA Pattern Implementation\n• Distributed Transaction Coordination\n• Automatic Compensation\n• Event-Driven State Machine\n• Business Process Orchestration

' Event-Driven Architecture Principles
note bottom of Kafka : Kafka Event Streaming\n• Topic-Based Routing\n• Event Sourcing Support\n• BIAN Event Standards\n• Dead Letter Queue (DLQ)\n• Retry Mechanisms

note bottom of EventStore : Event Store Features\n• Complete Event History\n• Event Replay Capability\n• Audit Trail Support\n• Temporal Queries\n• CQRS Integration

note bottom of SagaStateStore : SAGA State Management\n• Distributed TX State\n• Compensation Tracking\n• Timeout Handling\n• Recovery Support\n• State Visualization

' Production Readiness
note right of AWSIntegration : AWS EKS Production\n• Event-Driven Microservices\n• Kafka MSK Integration\n• Auto-scaling (HPA + CA)\n• FAPI Security Compliance\n• Event Sourcing Storage\n• SAGA State Persistence

' Color Legend
note as Legend
  <b>Event-Driven Architecture Colors:</b>
  <color:#BD10E0>■</color> Domain Layer (Banking Business Logic)
  <color:#4A90E2>■</color> Ports (Clean Architecture Interfaces)
  <color:#7ED321>■</color> Application Layer (Use Case Orchestration)
  <color:#F5A623>■</color> Infrastructure Layer (AWS Integration)
  <color:#FF9900>■</color> AWS Managed Services
  <color:#DC382D>■</color> Cache Layer (Redis ElastiCache)
  <color:#E74C3C>■</color> SAGA Orchestration
  <color:#9B59B6>■</color> Event-Driven Components
end note

@enduml