@startuml SAGA Pattern - Loan Creation Workflow
!theme plain

skinparam backgroundColor #FAFAFA
skinparam participant {
    BackgroundColor #E3F2FD
    BorderColor #1976D2
}
skinparam sequence {
    ArrowColor #1976D2
    LifeLineBorderColor #1976D2
    LifeLineBackgroundColor #E3F2FD
}

title SAGA Pattern - Event-Driven Distributed Transaction Workflow v1.0.0
!define SUBTITLE BIAN Compliant Event-Driven Architecture with Kafka and Compensation

participant "Banking Client\n(FAPI Compliant)" as CLIENT
participant "Istio Gateway\n(Service Mesh)" as GATEWAY
participant "Loan Service\n(BIAN Consumer Loan)" as LOAN
participant "SpringSagaOrchestrator\n(LoanOriginationSaga)" as SAGA
participant "Customer Service\n(BIAN Party Data)" as CUSTOMER
participant "Kafka MSK\n(Event Streaming)" as KAFKA
participant "Payment Service\n(BIAN Payment Init)" as PAYMENT
participant "Event Store\n(Event Sourcing)" as EVENTSTORE
participant "SAGA State Store\n(JPA Persistence)" as SAGASTORE

== BIAN-Compliant Loan Application Workflow ==

CLIENT -> GATEWAY : POST /api/v1/loans\n{amount: 50000, rate: 0.15, term: 24}\nAuthorization: Bearer <FAPI-JWT>
activate GATEWAY
note over GATEWAY : FAPI Security Validation\nRate Limiting: 1000/min\nStrong Customer Auth

GATEWAY -> LOAN : Create BIAN Loan Application
activate LOAN

LOAN -> LOAN : Validate Business Rules\n• Interest Rate: 0.1-0.5%\n• Term: [6,9,12,24] months\n• Amount: >$1000

LOAN -> EVENTSTORE : Store LoanApplicationInitiated
activate EVENTSTORE
EVENTSTORE -> KAFKA : Publish Domain Event
activate KAFKA

KAFKA -> SAGA : Consume LoanApplicationInitiated
activate SAGA
SAGA -> SAGASTORE : Create SAGA Instance\nSagaId: LOAN-SAGA-001\nStatus: INITIATED

note over SAGA : **SAGA State: INITIATED**\nLoanOriginationSaga Step 1\nValidate Customer Eligibility

SAGA -> KAFKA : Publish ValidateCustomerCommand\nTopic: banking.consumer-loan.commands
KAFKA -> CUSTOMER : Consume Validation Command
activate CUSTOMER

CUSTOMER -> CUSTOMER : BIAN Party Data Validation\n• Customer Profile Exists\n• KYC Status: VERIFIED\n• Credit Score: 720 (Valid)

CUSTOMER -> EVENTSTORE : Store CustomerValidated Event
EVENTSTORE -> KAFKA : Publish CustomerValidatedEvent\nTopic: banking.party-data.events

KAFKA -> SAGA : Consume CustomerValidatedEvent
SAGA -> SAGASTORE : Update SAGA State\nCurrentStep: CUSTOMER_VALIDATED

note over SAGA : **SAGA State: CUSTOMER_VALIDATED**\nLoanOriginationSaga Step 2\nCredit Limit Assessment

SAGA -> KAFKA : Publish AssessCreditLimitCommand\nWith BIAN Credit Assessment Data
KAFKA -> CUSTOMER : Consume Credit Assessment

CUSTOMER -> CUSTOMER : BIAN Credit Management\n• Available Credit: $100,000\n• Requested Amount: $50,000\n• Reserve Credit: SUCCESS

CUSTOMER -> EVENTSTORE : Store CreditReservedEvent
EVENTSTORE -> KAFKA : Publish CreditReservedEvent\nWith Berlin Group Payment Data

KAFKA -> SAGA : Consume CreditReservedEvent
SAGA -> SAGASTORE : Update SAGA State\nCurrentStep: CREDIT_RESERVED

note over SAGA : **SAGA State: CREDIT_RESERVED**\nLoanOriginationSaga Step 3\nLoan Creation & Risk Assessment

SAGA -> KAFKA : Publish CreateLoanCommand\nBIAN Consumer Loan Service
KAFKA -> LOAN : Consume Loan Creation Command

LOAN -> LOAN : Create Loan Aggregate\n• Principal: $50,000\n• Interest Rate: 15%\n• Total Amount: $57,500\n• BIAN Service Domain Compliance

LOAN -> EVENTSTORE : Store LoanCreatedEvent
EVENTSTORE -> KAFKA : Publish LoanCreatedEvent\nWith BIAN Loan Data Structure

KAFKA -> SAGA : Consume LoanCreatedEvent
SAGA -> SAGASTORE : Update SAGA State\nCurrentStep: LOAN_CREATED

note over SAGA : **SAGA State: LOAN_CREATED**\nLoanOriginationSaga Step 4\nInstallment Schedule Generation

SAGA -> KAFKA : Publish GenerateScheduleCommand\nBIAN Installment Planning
KAFKA -> LOAN : Consume Schedule Generation

LOAN -> LOAN : Generate Amortization Schedule\n• 24 Monthly Installments\n• Payment Amount: $2,395.83\n• First Due: 2025-07-01\n• BIAN Payment Structure

LOAN -> EVENTSTORE : Store ScheduleGeneratedEvent
EVENTSTORE -> KAFKA : Publish ScheduleGeneratedEvent

KAFKA -> SAGA : Consume ScheduleGeneratedEvent
SAGA -> SAGASTORE : Update SAGA State\nCurrentStep: COMPLETED\nStatus: SUCCESS

note over SAGA : **SAGA State: COMPLETED**\nLoanOriginationSaga SUCCESS\nAll Steps Executed Successfully

SAGA -> KAFKA : Publish LoanOriginationCompletedEvent\nFinal SAGA Event
deactivate SAGA

LOAN -> GATEWAY : Return BIAN Loan Response\nHTTP 201 Created
deactivate LOAN
GATEWAY -> CLIENT : FAPI Compliant Response\n{loanId: "LOAN-001", status: "APPROVED"}
deactivate GATEWAY

== SAGA Compensation Scenario: Credit Limit Exceeded ==

group Alternative Flow - SAGA Compensation Pattern
    CLIENT -> GATEWAY : POST /api/v1/loans\n{amount: 200000, rate: 0.15, term: 12}
    GATEWAY -> LOAN : Create Loan Application
    LOAN -> EVENTSTORE : Store LoanApplicationInitiated
    EVENTSTORE -> KAFKA : Publish Event
    KAFKA -> SAGA : Start LoanOriginationSaga
    activate SAGA
    
    SAGA -> SAGASTORE : Create SAGA Instance
    SAGA -> KAFKA : Publish ValidateCustomerCommand
    KAFKA -> CUSTOMER : Validate Customer
    CUSTOMER -> EVENTSTORE : Store CustomerValidated
    EVENTSTORE -> KAFKA : Publish CustomerValidatedEvent
    KAFKA -> SAGA : Customer Validation SUCCESS
    
    SAGA -> SAGASTORE : Update State: CUSTOMER_VALIDATED
    SAGA -> KAFKA : Publish AssessCreditLimitCommand
    KAFKA -> CUSTOMER : Assess Credit Limit
    
    note over CUSTOMER : **BIAN Credit Assessment FAILED**\nAvailable Credit: $100,000\nRequested Amount: $200,000\nCredit Limit Exceeded
    
    CUSTOMER -> EVENTSTORE : Store CreditAssessmentFailed
    EVENTSTORE -> KAFKA : Publish CreditAssessmentFailedEvent\nWith Failure Reason
    
    KAFKA -> SAGA : Consume Failure Event
    SAGA -> SAGASTORE : Update SAGA State\nStatus: COMPENSATING\nFailureReason: "Credit Limit Exceeded"
    
    note over SAGA : **SAGA State: COMPENSATING**\nAutomatic Compensation Started\nReverse Customer Validation
    
    SAGA -> KAFKA : Publish CompensateCustomerValidationCommand
    KAFKA -> CUSTOMER : Execute Compensation
    CUSTOMER -> CUSTOMER : Release Customer Lock\nRevert Validation State
    
    SAGA -> KAFKA : Publish CancelLoanApplicationCommand
    KAFKA -> LOAN : Cancel Loan Application
    LOAN -> LOAN : Update Application Status\nStatus: CANCELLED\nReason: CREDIT_LIMIT_EXCEEDED
    
    SAGA -> SAGASTORE : Update SAGA State\nStatus: COMPENSATED\nCompletedAt: timestamp
    
    note over SAGA : **SAGA State: COMPENSATED**\nCompensation Completed\nAll Side Effects Reversed
    
    deactivate SAGA
    
    LOAN -> GATEWAY : Return BIAN Error Response\nHTTP 422 Unprocessable Entity
    GATEWAY -> CLIENT : FAPI Error Response\n{error: "CREDIT_LIMIT_EXCEEDED", details: "Available: $100k"}
end

== Event-Driven Payment Processing with SAGA ==

CLIENT -> GATEWAY : POST /api/v1/payments/LOAN-001\n{amount: 2395.83}\nBIAN Payment Initiation
GATEWAY -> PAYMENT : Process BIAN Payment
activate PAYMENT

PAYMENT -> EVENTSTORE : Store PaymentInitiatedEvent
EVENTSTORE -> KAFKA : Publish PaymentInitiatedEvent\nTopic: banking.payment-initiation.events

KAFKA -> SAGA : Start Payment Processing SAGA
activate SAGA
SAGA -> SAGASTORE : Create Payment SAGA\nSagaType: PaymentProcessingSaga

note over SAGA : **Payment SAGA State: INITIATED**\nBerlin Group PSD2 Compliance\nPayment Validation Step

SAGA -> KAFKA : Publish ValidatePaymentCommand\nWith Strong Customer Authentication
KAFKA -> PAYMENT : Validate Payment Request

PAYMENT -> PAYMENT : BIAN Payment Validation\n• SCA Compliance Check\n• Payment Amount Validation\n• Account Verification\n• Anti-Fraud Screening

PAYMENT -> EVENTSTORE : Store PaymentValidatedEvent
EVENTSTORE -> KAFKA : Publish PaymentValidatedEvent

KAFKA -> SAGA : Consume PaymentValidatedEvent
SAGA -> SAGASTORE : Update Payment SAGA\nCurrentStep: PAYMENT_VALIDATED

note over SAGA : **Payment SAGA State: VALIDATED**\nInstallment Processing Step\nBIAN Payment Execution

SAGA -> KAFKA : Publish ProcessInstallmentCommand\nBIAN Consumer Loan Update
KAFKA -> LOAN : Process Installment Payment

LOAN -> LOAN : Update Loan State\n• Mark Installment as PAID\n• Calculate Early Payment Discount: $2.39\n• Update Outstanding Balance\n• Remaining Installments: 23

LOAN -> EVENTSTORE : Store InstallmentPaidEvent
EVENTSTORE -> KAFKA : Publish InstallmentPaidEvent\nWith BIAN Loan Update Data

KAFKA -> SAGA : Consume InstallmentPaidEvent
SAGA -> SAGASTORE : Update Payment SAGA\nCurrentStep: INSTALLMENT_PROCESSED

SAGA -> KAFKA : Publish CompletePaymentCommand
KAFKA -> PAYMENT : Finalize Payment

PAYMENT -> PAYMENT : Complete BIAN Payment\n• Payment Status: COMPLETED\n• Settlement Confirmation\n• Audit Trail Creation

PAYMENT -> EVENTSTORE : Store PaymentCompletedEvent
EVENTSTORE -> KAFKA : Publish PaymentCompletedEvent

KAFKA -> SAGA : Consume PaymentCompletedEvent
SAGA -> SAGASTORE : Update Payment SAGA\nStatus: COMPLETED\nCompletedAt: timestamp

note over SAGA : **Payment SAGA State: COMPLETED**\nBIAN Payment Process Complete\nAll Systems Updated

deactivate SAGA

PAYMENT -> GATEWAY : Return BIAN Payment Response
deactivate PAYMENT
GATEWAY -> CLIENT : Berlin Group Payment Response\n{paymentId: "PAY-001", status: "COMPLETED"}

== Event Sourcing & SAGA State Management ==

note over EVENTSTORE
**Event Store Implementation:**
• JpaEventStore with PostgreSQL
• Complete Event History Preservation
• Event Replay Capability for Recovery
• BIAN Event Type Standards
• Audit Trail for Compliance
• Temporal Query Support

**Event Types:**
• LoanApplicationInitiated
• CustomerValidatedEvent
• CreditAssessmentCompleted
• LoanCreatedEvent
• InstallmentScheduleGenerated
• PaymentProcessedEvent
• SAGA State Change Events
end note

note over SAGASTORE
**SAGA State Persistence:**
• SpringSagaOrchestrator Implementation
• PostgreSQL SAGA States Table
• Distributed Transaction Coordination
• Automatic Timeout Detection (5 min)
• Compensation Pattern Execution
• State Machine Visualization
• Recovery and Retry Logic

**SAGA Types:**
• LoanOriginationSaga
• PaymentProcessingSaga
• CreditAssessmentSaga
• CustomerOnboardingSaga
end note

note over KAFKA
**Kafka Event Streaming Platform:**
• Amazon MSK (Managed Kafka)
• Topic-Based Event Routing
• BIAN Event Schema Registry
• Dead Letter Queue (DLQ) Support
• Event Ordering Guarantees
• Exactly-Once Semantics
• Consumer Group Management

**Topic Strategy:**
• banking.consumer-loan.events
• banking.party-data.events
• banking.payment-initiation.events
• banking.credit-management.events
• banking.saga-orchestration.events
end note

@enduml