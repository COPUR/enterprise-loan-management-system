@startuml Domain Model

!define AGGREGATE_ROOT_COLOR #FFE4B5
!define ENTITY_COLOR #E6F3FF
!define VALUE_OBJECT_COLOR #E6FFE6
!define DOMAIN_SERVICE_COLOR #FFE6F3
!define EVENT_COLOR #FFE6E6
!define BIAN_COLOR #E6E6FF
!define SAGA_COLOR #FFEEEE

title Enterprise Banking Domain Model - Event-Driven Architecture v1.0.0

package "Shared Kernel - Event Sourcing Foundation" {
    abstract class AggregateRoot<<Root>> AGGREGATE_ROOT_COLOR {
        -domainEvents: List<DomainEvent>
        -version: Long
        -createdAt: OffsetDateTime
        -updatedAt: OffsetDateTime
        +addDomainEvent(event: DomainEvent)
        +getDomainEvents(): List<DomainEvent>
        +clearDomainEvents()
        +getVersion(): Long
        +incrementVersion()
    }
    
    abstract class Entity<<Entity>> ENTITY_COLOR {
        -id: DomainId
        -createdAt: OffsetDateTime
        -updatedAt: OffsetDateTime
        -version: Long
        +equals(other: Entity): boolean
        +hashCode(): int
    }
    
    abstract class DomainId<<Value Object>> VALUE_OBJECT_COLOR {
        -value: String
        +getValue(): String
        +equals(other: DomainId): boolean
        +hashCode(): int
    }
    
    interface ValueObject<<Value Object>> VALUE_OBJECT_COLOR {
        +validate()
        +equals(other: ValueObject): boolean
        +hashCode(): int
    }
    
    abstract class DomainEvent<<Event>> EVENT_COLOR {
        -eventId: String
        -aggregateId: String
        -occurredOn: OffsetDateTime
        -eventType: String
        -eventVersion: String
        -correlationId: String
        -causationId: String
        +getEventId(): String
        +getAggregateId(): String
        +getOccurredOn(): OffsetDateTime
    }
    
    class Money<<Value Object>> VALUE_OBJECT_COLOR {
        -amount: BigDecimal
        -currency: Currency
        +of(amount: BigDecimal): Money
        +of(amount: BigDecimal, currency: Currency): Money
        +add(other: Money): Money
        +subtract(other: Money): Money
        +multiply(factor: BigDecimal): Money
        +divide(divisor: BigDecimal): Money
        +isGreaterThan(other: Money): boolean
        +isZero(): boolean
        +negate(): Money
    }
    
    class InterestRate<<Value Object>> VALUE_OBJECT_COLOR {
        -rate: BigDecimal
        +of(rate: BigDecimal): InterestRate
        +calculateInterest(principal: Money, months: Integer): Money
        +asPercentage(): BigDecimal
        +isWithinBankingRange(): boolean
    }
}

package "BIAN Service Domains - Event-Driven" {
    
    package "Consumer Loan Service Domain" BIAN_COLOR {
        class LoanBehaviorQualifier<<BIAN>> BIAN_COLOR {
            +INITIATE: String
            +UPDATE: String
            +CONTROL: String
            +EXCHANGE: String
            +EXECUTE: String
            +REQUEST: String
            +RETRIEVE: String
        }
        
        class ConsumerLoanServiceDomain<<BIAN Service Domain>> BIAN_COLOR {
            -serviceDomainId: String
            -serviceDomainName: String
            -functionalPatterns: List<String>
            +initiateLoanArrangement(): ServiceDomainActivity
            +updateLoanArrangement(): ServiceDomainActivity
            +controlLoanArrangement(): ServiceDomainActivity
        }
    }
    
    package "Party Data Management Service Domain" BIAN_COLOR {
        class PartyDataBehaviorQualifier<<BIAN>> BIAN_COLOR {
            +INITIATE: String
            +UPDATE: String
            +CONTROL: String
            +EXCHANGE: String
            +RETRIEVE: String
        }
        
        class PartyDataManagementSD<<BIAN Service Domain>> BIAN_COLOR {
            -serviceDomainId: String
            +initiatePartyDataDirectory(): ServiceDomainActivity
            +updatePartyReference(): ServiceDomainActivity
            +retrievePartyReference(): ServiceDomainActivity
        }
    }
    
    package "Payment Initiation Service Domain" BIAN_COLOR {
        class PaymentInitiationSD<<BIAN Service Domain>> BIAN_COLOR {
            -serviceDomainId: String
            +initiatePaymentTransaction(): ServiceDomainActivity
            +updatePaymentTransaction(): ServiceDomainActivity
            +executePaymentTransaction(): ServiceDomainActivity
        }
        
        class BerlinGroupPaymentTypes<<Berlin Group PSD2>> BIAN_COLOR {
            +SEPA_CREDIT_TRANSFER: String
            +INSTANT_SEPA_CREDIT_TRANSFER: String
            +TARGET2_PAYMENT: String
            +CROSS_BORDER_TRANSFER: String
        }
    }
}

package "Customer Management - Event Sourcing" {
    class Customer<<Aggregate Root>> AGGREGATE_ROOT_COLOR {
        -customerId: CustomerId
        -name: String
        -surname: String
        -email: String
        -creditLimit: CreditLimit
        -usedCreditLimit: Money
        -kycStatus: KYCStatus
        -creditScore: CreditScore
        -riskLevel: CreditRiskLevel
        +create(id: CustomerId, name: String, email: String): Customer
        +reserveCredit(amount: Money, correlationId: String): boolean
        +releaseCredit(amount: Money, correlationId: String)
        +updateCreditLimit(newLimit: Money, reason: String)
        +getAvailableCredit(): Money
        +hasSufficientCredit(amount: Money): boolean
        +updateKYCStatus(status: KYCStatus, verifiedBy: String)
        +updateCreditScore(score: CreditScore, assessedBy: String)
    }
    
    class CustomerId<<Value Object>> VALUE_OBJECT_COLOR {
        -value: String
        +of(value: String): CustomerId
        +generate(): CustomerId
    }
    
    class CreditLimit<<Value Object>> VALUE_OBJECT_COLOR {
        -limit: Money
        +of(limit: Money): CreditLimit
        +increase(amount: Money): CreditLimit
        +decrease(amount: Money): CreditLimit
        +isWithinBankingLimits(): boolean
    }
    
    class KYCStatus<<Value Object>> VALUE_OBJECT_COLOR {
        +PENDING: KYCStatus
        +VERIFIED: KYCStatus
        +REJECTED: KYCStatus
        +EXPIRED: KYCStatus
        +of(status: String): KYCStatus
    }
    
    class CreditScore<<Value Object>> VALUE_OBJECT_COLOR {
        -score: Integer
        +of(score: Integer): CreditScore
        +isExcellent(): boolean
        +isGood(): boolean
        +isFair(): boolean
        +isPoor(): boolean
    }
    
    class CreditAssessmentService<<Domain Service>> DOMAIN_SERVICE_COLOR {
        +assessCreditworthiness(customer: Customer): CreditAssessmentResult
        +calculateMaximumLoanAmount(customer: Customer): Money
        +evaluateRiskLevel(customer: Customer): CreditRiskLevel
        +validateCreditReservation(customer: Customer, amount: Money): boolean
    }
    
    ' Customer Domain Events
    class CustomerCreatedEvent<<Event>> EVENT_COLOR {
        -customerId: String
        -name: String
        -email: String
        -initialCreditLimit: Money
        -kycStatus: String
        -correlationId: String
    }
    
    class CreditReservedEvent<<Event>> EVENT_COLOR {
        -customerId: String
        -reservedAmount: Money
        -remainingCredit: Money
        -reservationId: String
        -correlationId: String
        -sagaId: String
    }
    
    class CreditReleasedEvent<<Event>> EVENT_COLOR {
        -customerId: String
        -releasedAmount: Money
        -availableCredit: Money
        -releaseReason: String
        -correlationId: String
    }
    
    class CreditAssessmentCompletedEvent<<Event>> EVENT_COLOR {
        -customerId: String
        -assessmentResult: String
        -creditScore: Integer
        -riskLevel: String
        -assessedBy: String
        -correlationId: String
    }
    
    enum CreditRiskLevel {
        LOW
        MEDIUM
        HIGH
        VERY_HIGH
    }
}

package "Loan Management - Event-Driven Domain" {
    class Loan<<Aggregate Root>> AGGREGATE_ROOT_COLOR {
        -id: LoanId
        -customerId: CustomerId
        -principalAmount: Money
        -outstandingBalance: Money
        -interestRate: InterestRate
        -termInMonths: Integer
        -loanType: LoanType
        -status: LoanStatus
        -purpose: String
        -applicationDate: LocalDate
        -approvalDate: LocalDate
        -disbursementDate: LocalDate
        -approvedBy: String
        -rejectionReason: String
        -installments: List<LoanInstallment>
        -sagaId: String
        +create(customerId: CustomerId, amount: Money, rate: InterestRate, term: Integer): Loan
        +approve(approvedBy: String, correlationId: String)
        +reject(reason: String, rejectedBy: String, correlationId: String)
        +disburse(disbursementDate: LocalDate, correlationId: String)
        +processPayment(amount: Money, paymentDate: LocalDate, sagaId: String)
        +markAsDefaulted(reason: String, correlationId: String)
        +restructure(newRate: InterestRate, newTerm: Integer, reason: String)
        +generateAmortizationSchedule()
        +calculateMonthlyPayment(): Money
        +getTotalInterest(): Money
        +getNextPaymentDue(): LocalDate
        +isOverdue(): boolean
        +isFullyPaid(): boolean
        +setSagaId(sagaId: String)
        +getSagaId(): String
    }
    
    class LoanInstallment<<Entity>> ENTITY_COLOR {
        -id: LoanInstallmentId
        -loanId: LoanId
        -installmentNumber: Integer
        -dueDate: LocalDate
        -principalAmount: Money
        -interestAmount: Money
        -totalAmount: Money
        -paidAmount: Money
        -paymentDate: LocalDate
        -status: InstallmentStatus
        -sagaId: String
        +create(loanId: LoanId, number: Integer, dueDate: LocalDate): LoanInstallment
        +processPayment(amount: Money, paymentDate: LocalDate, sagaId: String)
        +calculateEarlyPaymentDiscount(paymentDate: LocalDate): Money
        +calculateLatePaymentPenalty(paymentDate: LocalDate): Money
        +isOverdue(): boolean
        +isPartiallyPaid(): boolean
        +isPaid(): boolean
        +getRemainingAmount(): Money
    }
    
    class LoanId<<Value Object>> VALUE_OBJECT_COLOR {
        -value: String
        +of(value: String): LoanId
        +generate(): LoanId
    }
    
    class LoanInstallmentId<<Value Object>> VALUE_OBJECT_COLOR {
        -value: String
        +of(value: String): LoanInstallmentId
        +generate(): LoanInstallmentId
    }
    
    class LoanType<<Value Object>> VALUE_OBJECT_COLOR {
        -type: String
        +PERSONAL: LoanType
        +MORTGAGE: LoanType
        +AUTO: LoanType
        +BUSINESS: LoanType
        +EDUCATIONAL: LoanType
        +of(type: String): LoanType
        +getBianServiceDomain(): String
    }
    
    class LoanStatus<<Value Object>> VALUE_OBJECT_COLOR {
        -status: String
        +PENDING: LoanStatus
        +APPROVED: LoanStatus
        +REJECTED: LoanStatus
        +ACTIVE: LoanStatus
        +PAID_OFF: LoanStatus
        +DEFAULTED: LoanStatus
        +CANCELLED: LoanStatus
        +of(status: String): LoanStatus
        +canTransitionTo(newStatus: LoanStatus): boolean
    }
    
    class InstallmentStatus<<Value Object>> VALUE_OBJECT_COLOR {
        -status: String
        +PENDING: InstallmentStatus
        +PAID: InstallmentStatus
        +PARTIALLY_PAID: InstallmentStatus
        +OVERDUE: InstallmentStatus
        +of(status: String): InstallmentStatus
    }
    
    ' Loan Domain Events with SAGA Support
    class LoanApplicationInitiatedEvent<<Event>> EVENT_COLOR {
        -loanId: String
        -customerId: String
        -requestedAmount: Money
        -interestRate: BigDecimal
        -termInMonths: Integer
        -loanType: String
        -purpose: String
        -sagaId: String
        -correlationId: String
    }
    
    class LoanCreatedEvent<<Event>> EVENT_COLOR {
        -loanId: String
        -customerId: String
        -principalAmount: Money
        -interestRate: BigDecimal
        -termInMonths: Integer
        -totalAmount: Money
        -monthlyPayment: Money
        -sagaId: String
        -correlationId: String
    }
    
    class LoanApprovedEvent<<Event>> EVENT_COLOR {
        -loanId: String
        -customerId: String
        -approvedAmount: Money
        -approvedBy: String
        -approvalDate: LocalDate
        -sagaId: String
        -correlationId: String
    }
    
    class LoanRejectedEvent<<Event>> EVENT_COLOR {
        -loanId: String
        -customerId: String
        -rejectionReason: String
        -rejectedBy: String
        -rejectionDate: LocalDate
        -sagaId: String
        -correlationId: String
    }
    
    class InstallmentScheduleGeneratedEvent<<Event>> EVENT_COLOR {
        -loanId: String
        -customerId: String
        -totalInstallments: Integer
        -monthlyPayment: Money
        -firstDueDate: LocalDate
        -lastDueDate: LocalDate
        -sagaId: String
        -correlationId: String
    }
    
    class InstallmentPaidEvent<<Event>> EVENT_COLOR {
        -loanId: String
        -installmentId: String
        -paymentAmount: Money
        -paidDate: LocalDate
        -remainingBalance: Money
        -sagaId: String
        -correlationId: String
    }
    
    class LoanFullyPaidEvent<<Event>> EVENT_COLOR {
        -loanId: String
        -customerId: String
        -totalAmountPaid: Money
        -finalPaymentDate: LocalDate
        -sagaId: String
        -correlationId: String
    }
}

package "Payment Processing - Berlin Group Compliant" {
    class Payment<<Aggregate Root>> AGGREGATE_ROOT_COLOR {
        -paymentId: PaymentId
        -loanId: LoanId
        -customerId: CustomerId
        -paymentAmount: Money
        -paymentDate: OffsetDateTime
        -status: PaymentStatus
        -paymentType: BerlinGroupPaymentType
        -installmentsPaid: Integer
        -totalDiscount: Money
        -totalPenalty: Money
        -strongCustomerAuthId: String
        -isLoanFullyPaid: boolean
        -sagaId: String
        +initiate(loanId: LoanId, amount: Money, paymentType: BerlinGroupPaymentType): Payment
        +validateSCA(scaId: String): boolean
        +processPayment(result: PaymentResult, sagaId: String)
        +getTotalAmountSpent(): Money
        +isSuccessful(): boolean
        +requiresStrongAuthentication(): boolean
    }
    
    class PaymentId<<Value Object>> VALUE_OBJECT_COLOR {
        -value: String
        +of(value: String): PaymentId
        +generate(): PaymentId
    }
    
    class BerlinGroupPaymentType<<Value Object>> VALUE_OBJECT_COLOR {
        -type: String
        +SEPA_CREDIT_TRANSFER: BerlinGroupPaymentType
        +INSTANT_SEPA_CREDIT_TRANSFER: BerlinGroupPaymentType
        +TARGET2_PAYMENT: BerlinGroupPaymentType
        +of(type: String): BerlinGroupPaymentType
        +requiresSCA(): boolean
    }
    
    enum PaymentStatus {
        INITIATED
        SCA_REQUIRED
        AUTHORISED
        PROCESSING
        COMPLETED
        FAILED
        REJECTED
        CANCELLED
    }
    
    class PaymentCalculationService<<Domain Service>> DOMAIN_SERVICE_COLOR {
        +calculatePayment(installments: List<LoanInstallment>, amount: Money): PaymentCalculationResult
        +validatePaymentAmount(amount: Money): ValidationResult
        +calculateEarlyPaymentDiscount(installments: List<LoanInstallment>, date: LocalDate): Money
        +calculatePenalties(installments: List<LoanInstallment>, date: LocalDate): Money
        +isAdvancePaymentAllowed(installments: List<LoanInstallment>, date: LocalDate): boolean
    }
    
    ' Payment Domain Events with SAGA Support
    class PaymentInitiatedEvent<<Event>> EVENT_COLOR {
        -paymentId: String
        -loanId: String
        -customerId: String
        -paymentAmount: Money
        -paymentType: String
        -scaRequired: Boolean
        -sagaId: String
        -correlationId: String
    }
    
    class PaymentAuthorisedEvent<<Event>> EVENT_COLOR {
        -paymentId: String
        -scaId: String
        -authorisedAt: OffsetDateTime
        -sagaId: String
        -correlationId: String
    }
    
    class PaymentProcessedEvent<<Event>> EVENT_COLOR {
        -paymentId: String
        -loanId: String
        -customerId: String
        -processedAmount: Money
        -installmentsPaid: Integer
        -totalDiscount: Money
        -isLoanFullyPaid: Boolean
        -processedAt: OffsetDateTime
        -sagaId: String
        -correlationId: String
    }
    
    class PaymentFailedEvent<<Event>> EVENT_COLOR {
        -paymentId: String
        -loanId: String
        -failureReason: String
        -failureCode: String
        -failedAt: OffsetDateTime
        -sagaId: String
        -correlationId: String
    }
}

package "SAGA Orchestration - Event-Driven Coordination" SAGA_COLOR {
    
    class LoanOriginationSaga<<SAGA>> SAGA_COLOR {
        -sagaId: String
        -loanId: String
        -customerId: String
        -requestedAmount: Money
        -currentStep: SagaStep
        -status: SagaStatus
        -compensationRequired: Boolean
        -startedAt: OffsetDateTime
        -completedAt: OffsetDateTime
        -failureReason: String
        +start(loanApplicationEvent: LoanApplicationInitiatedEvent)
        +processCustomerValidation(event: CustomerValidatedEvent)
        +processCreditReservation(event: CreditReservedEvent)
        +processLoanCreation(event: LoanCreatedEvent)
        +processInstallmentGeneration(event: InstallmentScheduleGeneratedEvent)
        +handleFailure(failureEvent: DomainEvent)
        +compensate(reason: String)
        +complete()
    }
    
    class PaymentProcessingSaga<<SAGA>> SAGA_COLOR {
        -sagaId: String
        -paymentId: String
        -loanId: String
        -customerId: String
        -paymentAmount: Money
        -currentStep: SagaStep
        -status: SagaStatus
        -startedAt: OffsetDateTime
        +start(paymentInitiatedEvent: PaymentInitiatedEvent)
        +processPaymentAuthorisation(event: PaymentAuthorisedEvent)
        +processInstallmentUpdate(event: InstallmentPaidEvent)
        +processLoanStatusUpdate(event: LoanStatusUpdatedEvent)
        +complete()
    }
    
    enum SagaStatus {
        INITIATED
        RUNNING
        COMPLETED
        COMPENSATING
        COMPENSATED
        FAILED
        TIMEOUT
    }
    
    enum SagaStep {
        CUSTOMER_VALIDATION
        CREDIT_ASSESSMENT
        CREDIT_RESERVATION
        LOAN_CREATION
        INSTALLMENT_GENERATION
        PAYMENT_VALIDATION
        PAYMENT_PROCESSING
        LOAN_UPDATE
        COMPLETED
    }
    
    ' SAGA Events
    class SagaStartedEvent<<Event>> EVENT_COLOR {
        -sagaId: String
        -sagaType: String
        -triggeredBy: String
        -startedAt: OffsetDateTime
        -correlationId: String
    }
    
    class SagaCompletedEvent<<Event>> EVENT_COLOR {
        -sagaId: String
        -sagaType: String
        -completedAt: OffsetDateTime
        -totalSteps: Integer
        -executionTimeMs: Long
        -correlationId: String
    }
    
    class SagaCompensatedEvent<<Event>> EVENT_COLOR {
        -sagaId: String
        -sagaType: String
        -compensationReason: String
        -compensatedAt: OffsetDateTime
        -stepsCompensated: Integer
        -correlationId: String
    }
}

' Relationships - Event-Driven Architecture
AggregateRoot --|> Entity
Customer --|> AggregateRoot
Loan --|> AggregateRoot
Payment --|> AggregateRoot
LoanInstallment --|> Entity

Customer *-- CustomerId
Customer *-- CreditLimit
Customer *-- Money
Customer *-- KYCStatus
Customer *-- CreditScore

Loan *-- LoanId
Loan *-- CustomerId
Loan *-- Money
Loan *-- InterestRate
Loan *-- LoanType
Loan *-- LoanStatus
Loan *-- LoanInstallment

LoanInstallment *-- LoanInstallmentId
LoanInstallment *-- LoanId
LoanInstallment *-- Money
LoanInstallment *-- InstallmentStatus

Payment *-- PaymentId
Payment *-- LoanId
Payment *-- CustomerId
Payment *-- Money
Payment *-- BerlinGroupPaymentType
Payment *-- PaymentStatus

' SAGA Relationships
LoanOriginationSaga *-- SagaStatus
LoanOriginationSaga *-- SagaStep
PaymentProcessingSaga *-- SagaStatus
PaymentProcessingSaga *-- SagaStep

' Value Objects Implementation
Money ..|> ValueObject
InterestRate ..|> ValueObject
CustomerId ..|> DomainId
CreditLimit ..|> ValueObject
KYCStatus ..|> ValueObject
CreditScore ..|> ValueObject
LoanId ..|> DomainId
LoanInstallmentId ..|> DomainId
LoanType ..|> ValueObject
LoanStatus ..|> ValueObject
InstallmentStatus ..|> ValueObject
PaymentId ..|> DomainId
BerlinGroupPaymentType ..|> ValueObject

' Domain Events Inheritance
CustomerCreatedEvent --|> DomainEvent
CreditReservedEvent --|> DomainEvent
CreditReleasedEvent --|> DomainEvent
CreditAssessmentCompletedEvent --|> DomainEvent
LoanApplicationInitiatedEvent --|> DomainEvent
LoanCreatedEvent --|> DomainEvent
LoanApprovedEvent --|> DomainEvent
LoanRejectedEvent --|> DomainEvent
InstallmentScheduleGeneratedEvent --|> DomainEvent
InstallmentPaidEvent --|> DomainEvent
LoanFullyPaidEvent --|> DomainEvent
PaymentInitiatedEvent --|> DomainEvent
PaymentAuthorisedEvent --|> DomainEvent
PaymentProcessedEvent --|> DomainEvent
PaymentFailedEvent --|> DomainEvent
SagaStartedEvent --|> DomainEvent
SagaCompletedEvent --|> DomainEvent
SagaCompensatedEvent --|> DomainEvent

' Event Publishing Relationships
Customer ..> CustomerCreatedEvent : raises
Customer ..> CreditReservedEvent : raises
Customer ..> CreditReleasedEvent : raises
Customer ..> CreditAssessmentCompletedEvent : raises
Loan ..> LoanApplicationInitiatedEvent : raises
Loan ..> LoanCreatedEvent : raises
Loan ..> LoanApprovedEvent : raises
Loan ..> LoanRejectedEvent : raises
Loan ..> InstallmentScheduleGeneratedEvent : raises
Loan ..> InstallmentPaidEvent : raises
Loan ..> LoanFullyPaidEvent : raises
Payment ..> PaymentInitiatedEvent : raises
Payment ..> PaymentAuthorisedEvent : raises
Payment ..> PaymentProcessedEvent : raises
Payment ..> PaymentFailedEvent : raises
LoanOriginationSaga ..> SagaStartedEvent : raises
LoanOriginationSaga ..> SagaCompletedEvent : raises
LoanOriginationSaga ..> SagaCompensatedEvent : raises
PaymentProcessingSaga ..> SagaStartedEvent : raises
PaymentProcessingSaga ..> SagaCompletedEvent : raises

' Domain Services
CreditAssessmentService ..> Customer : evaluates
CreditAssessmentService ..> CreditRiskLevel : returns
PaymentCalculationService ..> LoanInstallment : calculates
PaymentCalculationService ..> Money : returns

' BIAN Service Domain Integration
ConsumerLoanServiceDomain ..> Loan : manages
PartyDataManagementSD ..> Customer : manages
PaymentInitiationSD ..> Payment : processes

@enduml