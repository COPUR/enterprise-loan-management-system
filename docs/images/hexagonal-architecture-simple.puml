@startuml Enhanced Enterprise Banking - Hexagonal Architecture
!theme plain

title Enhanced Enterprise Banking System\nHexagonal Architecture with DDD and Event-Driven Design

package "Primary Adapters (Driving)" {
  [REST API Controller] as RestAPI
  [GraphQL Endpoint] as GraphQL
  [Kafka Event Listener] as KafkaListener
  [Scheduled Jobs] as ScheduledJobs
  [Admin Interface] as AdminUI
}

package "Application Layer" {
  package "Use Cases (Ports In)" {
    [Loan Application Use Case] as LoanUseCase
    [Payment Processing Use Case] as PaymentUseCase
    [Customer Management Use Case] as CustomerUseCase
    [AI Services Use Case] as AIUseCase
    [Compliance Use Case] as ComplianceUseCase
  }
  
  package "Application Services" {
    [Loan Application Service] as LoanAppSvc
    [SAGA Orchestrator] as SAGAOrchestrator
    [Event Handler Service] as EventHandler
    [Command Handler Service] as CommandHandler
    [Query Handler Service] as QueryHandler
  }
}

package "Domain Layer (Core Business Logic)" {
  package "Domain Models" {
    [Loan Aggregate] as LoanAggregate
    [Customer Aggregate] as CustomerAggregate
    [Payment Aggregate] as PaymentAggregate
    [Risk Assessment Entity] as RiskEntity
    [Compliance Entity] as ComplianceEntity
  }
  
  package "Domain Services" {
    [Loan Calculation Service] as LoanCalcSvc
    [Risk Assessment Service] as RiskSvc
    [Compliance Validation Service] as ComplianceSvc
    [AI Decision Service] as AIDecisionSvc
  }
  
  package "Domain Events" {
    [Loan Application Submitted] as LoanSubmittedEvent
    [Loan Approved] as LoanApprovedEvent
    [Payment Processed] as PaymentEvent
    [Risk Assessment Completed] as RiskEvent
    [Fraud Detected] as FraudEvent
  }
}

package "Secondary Adapters (Driven)" {
  package "Persistence (Ports Out)" {
    [JPA Repository] as JPARepo
    [Event Store] as EventStore
    [Redis Cache] as RedisCache
    [Vector Database] as VectorDB
  }
  
  package "External Services" {
    [Credit Bureau API] as CreditBureau
    [Payment Gateway] as PaymentGateway
    [AI/ML Platform] as AIMLPlatform
    [Notification Service] as NotificationSvc
    [Audit Service] as AuditSvc
  }
  
  package "Messaging" {
    [Kafka Event Publisher] as KafkaPublisher
    [Event Bus] as EventBus
    [SAGA Coordination] as SAGACoordination
  }
}

package "Infrastructure" {
  [PostgreSQL] as PostgreSQL
  [Redis Cluster] as Redis
  [Kafka Cluster] as Kafka
  [Qdrant Vector DB] as Qdrant
  [Spring AI/MCP] as SpringAI
  [OAuth2.1 Server] as OAuth2
}

' Primary Adapter connections
RestAPI --> LoanUseCase : HTTP Requests
GraphQL --> LoanUseCase : GraphQL Queries/Mutations
KafkaListener --> EventHandler : External Events
ScheduledJobs --> LoanAppSvc : Batch Processing
AdminUI --> LoanUseCase : Administrative Operations

' Application Layer connections
LoanUseCase --> LoanAppSvc : Orchestrate Business Logic
PaymentUseCase --> LoanAppSvc : Payment Operations
CustomerUseCase --> LoanAppSvc : Customer Operations
AIUseCase --> LoanAppSvc : AI-Powered Decisions
ComplianceUseCase --> LoanAppSvc : Compliance Checks

LoanAppSvc --> SAGAOrchestrator : Complex Workflows
EventHandler --> CommandHandler : Process Commands
EventHandler --> QueryHandler : Handle Queries

' Domain Layer connections
LoanAppSvc --> LoanAggregate : Domain Operations
LoanAppSvc --> CustomerAggregate : Customer Domain
LoanAppSvc --> PaymentAggregate : Payment Domain
LoanAppSvc --> RiskEntity : Risk Assessment
LoanAppSvc --> ComplianceEntity : Compliance Validation

LoanAggregate --> LoanCalcSvc : Business Calculations
LoanAggregate --> RiskSvc : Risk Analysis
CustomerAggregate --> ComplianceSvc : Compliance Validation
PaymentAggregate --> AIDecisionSvc : AI-Powered Decisions

LoanAggregate --> LoanSubmittedEvent : Domain Events
LoanAggregate --> LoanApprovedEvent : Domain Events
PaymentAggregate --> PaymentEvent : Domain Events
RiskEntity --> RiskEvent : Domain Events
ComplianceEntity --> FraudEvent : Domain Events

' Secondary Adapter connections
LoanAggregate --> JPARepo : Persistence
CustomerAggregate --> JPARepo : Persistence
PaymentAggregate --> JPARepo : Persistence
EventHandler --> EventStore : Event Sourcing
LoanAppSvc --> RedisCache : Caching
AIDecisionSvc --> VectorDB : AI Embeddings

LoanAppSvc --> CreditBureau : External Credit Check
PaymentAggregate --> PaymentGateway : Payment Processing
AIDecisionSvc --> AIMLPlatform : ML Inference
LoanAppSvc --> NotificationSvc : Customer Notifications
LoanAggregate --> AuditSvc : Audit Logging

LoanSubmittedEvent --> KafkaPublisher : Event Publishing
LoanApprovedEvent --> KafkaPublisher : Event Publishing
PaymentEvent --> KafkaPublisher : Event Publishing
RiskEvent --> KafkaPublisher : Event Publishing
FraudEvent --> KafkaPublisher : Event Publishing

SAGAOrchestrator --> EventBus : SAGA Coordination
SAGAOrchestrator --> SAGACoordination : Distributed Transactions

' Infrastructure connections
JPARepo --> PostgreSQL : Database Access
RedisCache --> Redis : Caching Layer
EventStore --> PostgreSQL : Event Persistence
VectorDB --> Qdrant : Vector Storage
KafkaPublisher --> Kafka : Event Streaming
AIMLPlatform --> SpringAI : AI Integration
LoanUseCase --> OAuth2 : Security Context

' Hexagon boundaries
note top of RestAPI : Primary Adapters\n(Drive the Application)
note bottom of PostgreSQL : Infrastructure\n(External Dependencies)
note left of LoanAggregate : Domain Core\n(Business Logic)
note right of JPARepo : Secondary Adapters\n(Driven by Application)

@enduml