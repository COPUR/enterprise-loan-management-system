@startuml Load Testing Architecture - Enterprise Loan Management System

!define TESTING_COLOR #E74C3C
!define CHAOS_COLOR #9B59B6
!define MONITORING_COLOR #3498DB
!define CI_CD_COLOR #27AE60
!define INFRASTRUCTURE_COLOR #F39C12
!define REPORTING_COLOR #E67E22

skinparam backgroundColor #FFFFFF
skinparam defaultFontName Arial
skinparam defaultFontSize 10

title Enterprise Loan Management System - Comprehensive Load Testing Architecture

' Load Testing Framework
package "Load Testing Framework" <<Testing Infrastructure>> #FFE8E8 {
    
    package "Core Testing Tools" <<Load Generation>> #FFCCCC {
        component [wrk HTTP Benchmarking\n(Primary Load Generator)] as WrkTool TESTING_COLOR
        component [Apache Bench (ab)\n(Fallback Load Generator)] as ApacheBench TESTING_COLOR
        component [curl HTTP Client\n(API Testing & Health Checks)] as CurlTool TESTING_COLOR
        component [jq JSON Processor\n(Response Parsing & Validation)] as JqTool TESTING_COLOR
    }
    
    package "Test Orchestration" <<Test Management>> #FFD6D6 {
        component [Comprehensive Load Test Script\n(e2e-comprehensive-load-test.sh)] as LoadTestScript TESTING_COLOR
        component [Environment Configuration\n(Variables & Profiles)] as EnvironmentConfig TESTING_COLOR
        component [Test Execution Engine\n(Bash Script Framework)] as TestEngine TESTING_COLOR
        component [Quality Gates\n(Pass/Fail Criteria)] as QualityGates TESTING_COLOR
    }
    
    package "API Testing Components" <<Endpoint Testing>> #FFEAEA {
        component [Banking API Tests\n(/api/v1/loans, /api/v1/customers)] as BankingAPITests TESTING_COLOR
        component [System Health Tests\n(/actuator/health, /actuator/metrics)] as HealthTests TESTING_COLOR
        component [Authentication Tests\n(JWT Token Management)] as AuthTests TESTING_COLOR
        component [Response Validation\n(Status Codes, Response Times)] as ResponseValidation TESTING_COLOR
    }
}

' Chaos Engineering
package "Chaos Engineering Framework" <<Fault Injection>> #F4E8FF {
    
    package "Chaos Scenarios" <<Fault Types>> #E8D5FF {
        component [Network Latency Simulation\n(tc - Traffic Control)] as NetworkLatency CHAOS_COLOR
        component [CPU Load Stress\n(Background Process Generation)] as CPUStress CHAOS_COLOR
        component [Memory Pressure\n(stress command)] as MemoryPressure CHAOS_COLOR
        component [Random Failures\n(Circuit Breaker Testing)] as RandomFailures CHAOS_COLOR
    }
    
    package "System Monitoring During Chaos" <<Resilience Testing>> #EBD9FF {
        component [API Response Monitoring\n(During Fault Injection)] as ChaosAPIMonitoring CHAOS_COLOR
        component [Recovery Time Measurement\n(System Healing Detection)] as RecoveryTiming CHAOS_COLOR
        component [Performance Degradation Analysis\n(Impact Assessment)] as PerformanceDegradation CHAOS_COLOR
        component [Failure Rate Tracking\n(Fault Tolerance Metrics)] as FailureRateTracking CHAOS_COLOR
    }
}

' Performance Testing
package "Scalability & Performance Testing" <<Load Patterns>> #E8F6FF {
    
    package "Load Patterns" <<User Simulation>> #CCE5FF {
        component [Progressive Load Testing\n(10→25→50→100→200 users)] as ProgressiveLoad TESTING_COLOR
        component [Banking Peak Load\n(Morning/Evening Rush Simulation)] as PeakLoad TESTING_COLOR
        component [Sustained Load Testing\n(Extended Duration Testing)] as SustainedLoad TESTING_COLOR
        component [Stress Testing\n(Beyond Normal Capacity)] as StressTest TESTING_COLOR
    }
    
    package "Database Performance" <<Data Layer Testing>> #B3D9FF {
        component [Database Stress Testing\n(Concurrent Connections)] as DatabaseStress TESTING_COLOR
        component [Redis Cache Testing\n(Performance Validation)] as CachePerformance TESTING_COLOR
        component [Connection Pool Testing\n(Resource Utilization)] as ConnectionPoolTest TESTING_COLOR
        component [Transaction Throughput\n(Banking Operations)] as TransactionThroughput TESTING_COLOR
    }
}

' Target System Under Test
package "Enterprise Banking System (Target)" <<System Under Test>> #E8FFE8 {
    
    package "Application Services" <<Banking Services>> #CCFFCC {
        component [Loan Management Service\n(Hexagonal Architecture)] as LoanService INFRASTRUCTURE_COLOR
        component [Customer Management Service\n(Profile & Credit)] as CustomerService INFRASTRUCTURE_COLOR
        component [Payment Processing Service\n(Transaction Engine)] as PaymentService INFRASTRUCTURE_COLOR
        component [OAuth2.1 Authentication\n(Keycloak Integration)] as AuthService INFRASTRUCTURE_COLOR
    }
    
    package "Infrastructure Layer" <<System Infrastructure>> #B3FFB3 {
        component [PostgreSQL Database\n(AWS RDS Multi-AZ)] as Database INFRASTRUCTURE_COLOR
        component [Redis ElastiCache\n(100% Hit Ratio)] as RedisCache INFRASTRUCTURE_COLOR
        component [Kubernetes Cluster\n(AWS EKS)] as K8sCluster INFRASTRUCTURE_COLOR
        component [Load Balancer\n(AWS ALB)] as LoadBalancer INFRASTRUCTURE_COLOR
    }
}

' Mock Testing Environment
package "Mock Testing Environment" <<Test Doubles>> #FFF8E1 {
    component [Mock Banking API Server\n(Python HTTP Server)] as MockServer TESTING_COLOR
    component [JWT Token Simulation\n(Authentication Mock)] as MockAuth TESTING_COLOR
    component [Banking Response Simulation\n(Realistic Latency & Errors)] as MockResponses TESTING_COLOR
    component [Health Check Simulation\n(Status Endpoint Mock)] as MockHealth TESTING_COLOR
}

' Results & Reporting
package "Test Results & Reporting" <<Analytics & Reporting>> #FFF0E8 {
    
    package "Metrics Collection" <<Data Collection>> #FFE0CC {
        component [Performance Metrics\n(Response Time, Throughput)] as PerformanceMetrics REPORTING_COLOR
        component [Error Rate Analysis\n(Success/Failure Tracking)] as ErrorAnalysis REPORTING_COLOR
        component [System Resource Metrics\n(CPU, Memory, Network)] as ResourceMetrics REPORTING_COLOR
        component [Business Metrics\n(Banking KPIs)] as BusinessMetrics REPORTING_COLOR
    }
    
    package "Report Generation" <<Output Formats>> #FFCC99 {
        component [JSON Test Summary\n(Structured Results)] as JSONReports REPORTING_COLOR
        component [JUnit XML Reports\n(CI/CD Integration)] as JUnitXML REPORTING_COLOR
        component [Failure Logs\n(Detailed Error Analysis)] as FailureLogs REPORTING_COLOR
        component [Executive Summary\n(Business Dashboard)] as ExecutiveSummary REPORTING_COLOR
    }
}

' CI/CD Integration
package "CI/CD Integration" <<Pipeline Integration>> #E8FFE8 {
    
    package "GitHub Actions Integration" <<CI Pipeline>> #CCFFCC {
        component [Load Testing Job\n(Pipeline Step)] as CILoadTestJob CI_CD_COLOR
        component [Quality Gate Validation\n(Pass/Fail Decision)] as CIQualityGates CI_CD_COLOR
        component [Artifact Storage\n(Test Reports Archive)] as CIArtifacts CI_CD_COLOR
        component [Notification System\n(Slack, Email Alerts)] as CINotifications CI_CD_COLOR
    }
    
    package "Environment Management" <<Test Environments>> #B3FFB3 {
        component [Local Testing\n(Developer Workstation)] as LocalTesting CI_CD_COLOR
        component [Staging Environment\n(Pre-Production Testing)] as StagingTesting CI_CD_COLOR
        component [Production Monitoring\n(Read-Only Performance Tests)] as ProductionMonitoring CI_CD_COLOR
        component [Baseline Testing\n(Performance Regression Detection)] as BaselineTesting CI_CD_COLOR
    }
}

' Monitoring & Observability Integration
package "Monitoring Integration" <<Performance Observability>> #F0F8FF {
    component [Prometheus Metrics Export\n(Test Metrics Integration)] as PrometheusExport MONITORING_COLOR
    component [Grafana Dashboard\n(Load Testing Visualization)] as GrafanaDashboard MONITORING_COLOR
    component [CloudWatch Integration\n(AWS Infrastructure Metrics)] as CloudWatchIntegration MONITORING_COLOR
    component [Alert Management\n(Performance Threshold Alerts)] as AlertManagement MONITORING_COLOR
}

' Test Execution Flow
LoadTestScript --> EnvironmentConfig : Load Configuration
LoadTestScript --> TestEngine : Execute Tests
TestEngine --> QualityGates : Validate Results

' API Testing Flow
TestEngine --> BankingAPITests : Execute API Tests
TestEngine --> HealthTests : System Health Validation
TestEngine --> AuthTests : Authentication Testing
BankingAPITests --> ResponseValidation : Validate Responses

' Load Generation
WrkTool --> BankingAPITests : Generate Load
ApacheBench --> BankingAPITests : Fallback Load Generation
CurlTool --> HealthTests : Health Checks
JqTool --> ResponseValidation : Parse JSON Responses

' Chaos Engineering Flow
TestEngine --> NetworkLatency : Network Chaos
TestEngine --> CPUStress : CPU Chaos
TestEngine --> MemoryPressure : Memory Chaos
TestEngine --> RandomFailures : Failure Injection

NetworkLatency --> ChaosAPIMonitoring : Monitor During Chaos
CPUStress --> ChaosAPIMonitoring : Monitor During Chaos
MemoryPressure --> ChaosAPIMonitoring : Monitor During Chaos
RandomFailures --> ChaosAPIMonitoring : Monitor During Chaos

ChaosAPIMonitoring --> RecoveryTiming : Measure Recovery
ChaosAPIMonitoring --> PerformanceDegradation : Analyze Impact
ChaosAPIMonitoring --> FailureRateTracking : Track Failures

' Scalability Testing Flow
TestEngine --> ProgressiveLoad : Execute Progressive Tests
TestEngine --> PeakLoad : Banking Peak Simulation
TestEngine --> SustainedLoad : Extended Testing
TestEngine --> StressTest : Stress Testing

' Database Testing Flow
TestEngine --> DatabaseStress : Database Load
TestEngine --> CachePerformance : Cache Validation
TestEngine --> ConnectionPoolTest : Connection Testing
TestEngine --> TransactionThroughput : Transaction Testing

' Target System Interactions
BankingAPITests --> LoanService : Loan API Calls
BankingAPITests --> CustomerService : Customer API Calls
BankingAPITests --> PaymentService : Payment API Calls
AuthTests --> AuthService : Authentication Requests

' Infrastructure Load
LoanService --> Database : Database Queries
LoanService --> RedisCache : Cache Operations
CustomerService --> Database : Database Queries
CustomerService --> RedisCache : Cache Operations
PaymentService --> Database : Database Queries

' Mock Environment Usage
TestEngine --> MockServer : Mock Testing
MockServer --> MockAuth : Authentication Mock
MockServer --> MockResponses : Response Simulation
MockServer --> MockHealth : Health Mock

' Results Collection
BankingAPITests --> PerformanceMetrics : Performance Data
ChaosAPIMonitoring --> ErrorAnalysis : Error Data
TestEngine --> ResourceMetrics : System Metrics
BankingAPITests --> BusinessMetrics : Banking KPIs

' Report Generation
PerformanceMetrics --> JSONReports : Structured Data
ErrorAnalysis --> FailureLogs : Error Details
ResourceMetrics --> JSONReports : System Data
BusinessMetrics --> ExecutiveSummary : Business Report

JSONReports --> JUnitXML : CI Format
FailureLogs --> JUnitXML : Error Integration

' CI/CD Integration Flow
TestEngine --> CILoadTestJob : Pipeline Execution
QualityGates --> CIQualityGates : Validation Results
JSONReports --> CIArtifacts : Store Reports
CIQualityGates --> CINotifications : Alert on Failure

' Environment Integration
TestEngine --> LocalTesting : Local Execution
TestEngine --> StagingTesting : Staging Execution
TestEngine --> ProductionMonitoring : Production Monitoring
JSONReports --> BaselineTesting : Baseline Comparison

' Monitoring Integration
PerformanceMetrics --> PrometheusExport : Export Metrics
PrometheusExport --> GrafanaDashboard : Visualize Performance
ResourceMetrics --> CloudWatchIntegration : AWS Metrics
ErrorAnalysis --> AlertManagement : Performance Alerts

' Configuration Notes
note top of LoadTestScript : Load Testing Configuration\n• Environment Variables: 15+ parameters\n• Concurrent Users: 10-200 configurable\n• Test Duration: 60-3600 seconds\n• Quality Gates: Response time, Success rate

note top of WrkTool : Load Generation Capabilities\n• HTTP/HTTPS support\n• Concurrent connections: 1-1000\n• Request rate limiting\n• Custom headers & authentication\n• Lua scripting support

note top of NetworkLatency : Chaos Engineering Scenarios\n• Network delays: 50-500ms\n• CPU load: 1-8 cores stress\n• Memory pressure: 1-4GB\n• Random failures: 10-50% rate

note top of MockServer : Mock Server Features\n• Banking API endpoints simulation\n• Realistic response times (50-200ms)\n• JWT authentication simulation\n• Configurable failure rates\n• Health check endpoints

note bottom of JSONReports : Report Formats\n• JSON: Structured test results\n• JUnit XML: CI/CD integration\n• CSV: Data analysis friendly\n• HTML: Executive dashboards\n• Prometheus: Metrics export

note bottom of Database : Performance Targets\n• API Response Time: < 200ms\n• Success Rate: > 95%\n• Concurrent Users: 200+\n• Cache Hit Ratio: > 80%\n• Database Queries: < 100ms

' Test Metrics
note right of PerformanceMetrics : Key Performance Indicators\n• Requests per Second: 100-500\n• Average Latency: 50-200ms\n• P99 Latency: < 500ms\n• Error Rate: < 1%\n• Throughput: 1000+ TPS

@enduml