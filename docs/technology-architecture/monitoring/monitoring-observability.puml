@startuml Monitoring & Observability - Enterprise Loan Management System

!define PROMETHEUS_COLOR #E6522C
!define GRAFANA_COLOR #FF8C00
!define ELK_COLOR #005571
!define JAEGER_COLOR #60D0E4
!define CLOUDWATCH_COLOR #FF9900
!define ALERT_COLOR #DC3545
!define METRICS_COLOR #28A745
!define TESTING_COLOR #E74C3C
!define KAFKA_COLOR #9B59B6
!define SAGA_COLOR #E74C3C

skinparam backgroundColor #FFFFFF
skinparam defaultFontName Arial
skinparam defaultFontSize 10

title Enterprise Banking System - Event-Driven Monitoring & Observability v1.0.0

' Event-Driven Application Layer
package "Event-Driven Banking Services" <<Spring Boot + Kafka>> #E6F9F9 {
    component [Loan Service\n(BIAN Consumer Loan + SAGA)] as LoanService METRICS_COLOR
    component [Customer Service\n(BIAN Party Data + Events)] as CustomerService METRICS_COLOR
    component [Payment Service\n(Berlin Group PSD2 + Events)] as PaymentService METRICS_COLOR
    component [SAGA Orchestrator\n(SpringSagaOrchestrator)] as SagaOrchestrator SAGA_COLOR
    component [Event Store\n(JpaEventStore + Postgres)] as EventStore KAFKA_COLOR
    component [Kafka Event Streaming\n(MSK + Dead Letter Queue)] as KafkaService KAFKA_COLOR
    component [FAPI Security Layer\n(OAuth2.1 + Rate Limiting)] as SecurityService METRICS_COLOR
}

' Enhanced Metrics Collection Layer
package "Event-Driven Metrics Collection" <<Prometheus + Event Metrics>> #FFE8E8 {
    
    package "Prometheus Ecosystem" <<Metrics + Events>> #FFCCCC {
        component [Prometheus Server\n(Time-Series + Event Metrics)] as PrometheusServer PROMETHEUS_COLOR
        component [Service Discovery\n(Kubernetes + Istio Mesh)] as ServiceDiscovery PROMETHEUS_COLOR
        component [Event Metrics Scraping\n(SAGA + Domain Events)] as EventMetricScraping KAFKA_COLOR
        component [Business Rules Engine\n(Banking Compliance)] as BusinessRules PROMETHEUS_COLOR
        component [Alert Rules\n(Event-Based Alerting)] as AlertRules PROMETHEUS_COLOR
    }
    
    package "Event-Driven Banking Metrics" <<Domain + SAGA Metrics>> #FFF0F0 {
        component [SAGA Orchestration Metrics\n(Success Rate, Compensation Rate)] as SagaMetrics SAGA_COLOR
        component [Domain Event Metrics\n(Event Volume, Processing Time)] as DomainEventMetrics KAFKA_COLOR
        component [BIAN Compliance Metrics\n(Service Domain Health)] as BianMetrics METRICS_COLOR
        component [Event Store Metrics\n(Event Replay, Query Performance)] as EventStoreMetrics KAFKA_COLOR
        component [Kafka Stream Metrics\n(Topic Throughput, Consumer Lag)] as KafkaMetrics KAFKA_COLOR
        component [FAPI Security Metrics\n(Auth Success, Rate Limiting)] as FAPIMetrics METRICS_COLOR
        component [Cache Performance\n(100% Hit Ratio, 2.5ms Latency)] as CacheMetrics METRICS_COLOR
    }
}

' Event-Driven Visualization Layer
package "Event-Driven Dashboards" <<Grafana + Event Analytics>> #FFF8E1 {
    
    package "Banking Event Dashboards" <<Event Visualization>> #FFEB3B {
        component [SAGA Orchestration Dashboard\n(Transaction Flows, Compensation)] as SagaDashboard SAGA_COLOR
        component [Event Stream Dashboard\n(Kafka Topics, Event Volume)] as EventStreamDashboard KAFKA_COLOR
        component [BIAN Service Domain Dashboard\n(Consumer Loan, Payment Init)] as BianDashboard GRAFANA_COLOR
        component [Business Process Dashboard\n(Loan Origination, Payment Flow)] as BusinessProcessDashboard GRAFANA_COLOR
        component [Event Store Analytics\n(Event History, Replay Stats)] as EventStoreAnalytics KAFKA_COLOR
        component [Security & Compliance Dashboard\n(FAPI, SCA, Rate Limits)] as SecurityComplianceDashboard GRAFANA_COLOR
    }
    
    package "Event-Based Alerting" <<SAGA + Event Alerts>> #FFCC80 {
        component [SAGA Failure AlertManager\n(Compensation Triggers)] as SagaAlertManager SAGA_COLOR
        component [Event Processing Alerts\n(Consumer Lag, DLQ Events)] as EventProcessingAlerts KAFKA_COLOR
        component [Business Rule Violations\n(Banking Compliance Alerts)] as BusinessRuleAlerts ALERT_COLOR
        component [Event Storm Detection\n(High Volume Alerts)] as EventStormAlerts KAFKA_COLOR
    }
}

' Event Sourcing & Tracing
package "Event Sourcing & Distributed Tracing" <<Event Store + Tracing>> #E8F5E8 {
    
    package "Event Store Analytics" <<Event Sourcing>> #CCFFCC {
        component [Event Replay Dashboard\n(Historical Event Analysis)] as EventReplayDashboard KAFKA_COLOR
        component [Event Correlation Engine\n(Cross-Service Event Tracking)] as EventCorrelation KAFKA_COLOR
        component [SAGA State Visualization\n(Transaction Progress Tracking)] as SagaStateVisualization SAGA_COLOR
        component [Event Audit Trail\n(Compliance Event History)] as EventAuditTrail ELK_COLOR
    }
    
    package "SAGA & Event Tracing" <<Distributed Tracing>> #B3E5FC {
        component [SAGA Trace Collector\n(End-to-End Transaction Tracing)] as SagaTraceCollector JAEGER_COLOR
        component [Event Flow Visualization\n(Event Chain Analysis)] as EventFlowVisualization JAEGER_COLOR
        component [Cross-Service Correlation\n(Event-Driven Service Maps)] as CrossServiceCorrelation JAEGER_COLOR
        component [Performance Bottleneck Detection\n(SAGA Step Analysis)] as PerformanceBottleneckDetection JAEGER_COLOR
    }
    
    package "Event-Driven Log Categories" <<Banking Event Logs>> #E8F5E8 {
        component [SAGA Orchestration Logs\n(Step Execution, Compensation)] as SagaLogs ELK_COLOR
        component [Domain Event Logs\n(Event Publishing, Processing)] as DomainEventLogs ELK_COLOR
        component [Event Store Access Logs\n(Event Persistence, Queries)] as EventStoreAccessLogs ELK_COLOR
        component [Kafka Stream Logs\n(Producer, Consumer, Topic Events)] as KafkaStreamLogs ELK_COLOR
        component [BIAN Compliance Logs\n(Service Domain Activities)] as BianComplianceLogs ELK_COLOR
    }
}

' AWS CloudWatch + Event Monitoring
package "AWS Event-Driven Monitoring" <<AWS + Event Metrics>> #FFF3E0 {
    
    package "CloudWatch Event Services" <<AWS Event Native>> #FFE0B2 {
        component [CloudWatch Event Metrics\n(SAGA Success Rate, Event Volume)] as CloudWatchEventMetrics CLOUDWATCH_COLOR
        component [CloudWatch Event Logs\n(Kafka MSK, Event Store Logs)] as CloudWatchEventLogs CLOUDWATCH_COLOR
        component [CloudWatch Event Alarms\n(SAGA Failures, Event Processing Delays)] as CloudWatchEventAlarms CLOUDWATCH_COLOR
        component [CloudWatch Event Insights\n(Event Pattern Analysis)] as CloudWatchEventInsights CLOUDWATCH_COLOR
    }
    
    package "AWS Event Infrastructure Monitoring" <<Event Infrastructure>> #FFCC80 {
        component [MSK Kafka Metrics\n(Topic Throughput, Partition Health)] as MSKMetrics CLOUDWATCH_COLOR
        component [EKS Event Workload Metrics\n(Pod Events, Service Mesh)] as EKSEventMetrics CLOUDWATCH_COLOR
        component [RDS Event Store Metrics\n(Event Persistence Performance)] as RDSEventMetrics CLOUDWATCH_COLOR
        component [ElastiCache Event Cache\n(Event Processing Cache)] as ElastiCacheEventMetrics CLOUDWATCH_COLOR
    }
}

' Event-Driven KPIs & SLAs
package "Event-Driven Banking KPIs" <<Business Intelligence + Events>> #F0F8FF {
    
    package "Event-Driven Business KPIs" <<SAGA + Event Metrics>> #E6F2FF {
        component [SAGA Success Rate\n(>99% Target)] as SagaSuccessRate SAGA_COLOR
        component [Event Processing Latency\n(<10ms Target)] as EventProcessingLatency KAFKA_COLOR
        component [Loan Origination Time\n(<5 minutes via SAGA)] as LoanOriginationTime METRICS_COLOR
        component [Payment Processing Time\n(<30 seconds via Events)] as PaymentProcessingTime METRICS_COLOR
        component [Event Store Query Performance\n(<50ms Target)] as EventStoreQueryPerformance KAFKA_COLOR
        component [BIAN Compliance Score\n(100% Target)] as BianComplianceScore METRICS_COLOR
    }
    
    package "Event-Driven Technical SLAs" <<Performance + Events>> #CCE5FF {
        component [Event Publishing Rate\n(<5ms Target)] as EventPublishingRate KAFKA_COLOR
        component [SAGA Orchestration Time\n(<30 seconds)] as SagaOrchestrationTime SAGA_COLOR
        component [Event Consumer Lag\n(<1000 messages)] as EventConsumerLag KAFKA_COLOR
        component [Event Store Availability\n(99.99% Target)] as EventStoreAvailability KAFKA_COLOR
        component [Kafka Cluster Health\n(100% Uptime)] as KafkaClusterHealth KAFKA_COLOR
    }
}

' Event Flow Monitoring
SagaOrchestrator --> EventMetricScraping : SAGA Metrics
EventStore --> EventMetricScraping : Event Store Metrics
KafkaService --> EventMetricScraping : Kafka Metrics
LoanService --> EventMetricScraping : Domain Event Metrics
CustomerService --> EventMetricScraping : Customer Event Metrics
PaymentService --> EventMetricScraping : Payment Event Metrics
SecurityService --> EventMetricScraping : FAPI Security Metrics

' Enhanced Prometheus Processing
EventMetricScraping --> PrometheusServer : Store Event Metrics
PrometheusServer --> BusinessRules : Banking Compliance Rules
BusinessRules --> AlertRules : Business Rule Violations

' Event Metrics Categorization
PrometheusServer --> SagaMetrics : SAGA Data
PrometheusServer --> DomainEventMetrics : Event Data
PrometheusServer --> BianMetrics : BIAN Compliance
PrometheusServer --> EventStoreMetrics : Event Store Stats
PrometheusServer --> KafkaMetrics : Kafka Statistics
PrometheusServer --> FAPIMetrics : FAPI Security Data
PrometheusServer --> CacheMetrics : Cache Performance

' Event-Driven Dashboard Visualization
SagaMetrics --> SagaDashboard : SAGA Analytics
DomainEventMetrics --> EventStreamDashboard : Event Stream Analytics
BianMetrics --> BianDashboard : BIAN Service Analytics
EventStoreMetrics --> EventStoreAnalytics : Event Store Analytics
KafkaMetrics --> EventStreamDashboard : Kafka Stream Analytics
FAPIMetrics --> SecurityComplianceDashboard : Security Analytics

' Event-Based Alert Management
AlertRules --> SagaAlertManager : SAGA Alerts
AlertRules --> EventProcessingAlerts : Event Processing Alerts
AlertRules --> BusinessRuleAlerts : Business Rule Alerts
AlertRules --> EventStormAlerts : Event Volume Alerts

' Event Sourcing Analytics
EventStore --> EventReplayDashboard : Event History
EventStore --> EventCorrelation : Event Correlation
SagaOrchestrator --> SagaStateVisualization : SAGA State
EventStore --> EventAuditTrail : Audit Events

' SAGA & Event Tracing
SagaOrchestrator --> SagaTraceCollector : SAGA Traces
EventStore --> EventFlowVisualization : Event Flow
KafkaService --> CrossServiceCorrelation : Service Events
SagaOrchestrator --> PerformanceBottleneckDetection : Performance Data

' Event-Driven Logging
SagaOrchestrator --> SagaLogs : SAGA Events
EventStore --> DomainEventLogs : Domain Events
EventStore --> EventStoreAccessLogs : Access Events
KafkaService --> KafkaStreamLogs : Stream Events
LoanService --> BianComplianceLogs : BIAN Events

' CloudWatch Event Integration
MSKMetrics --> CloudWatchEventMetrics : Kafka Data
EKSEventMetrics --> CloudWatchEventMetrics : EKS Event Data
RDSEventMetrics --> CloudWatchEventMetrics : Database Event Data
ElastiCacheEventMetrics --> CloudWatchEventMetrics : Cache Event Data

CloudWatchEventMetrics --> CloudWatchEventAlarms : Event-Based Alerts
CloudWatchEventLogs --> CloudWatchEventInsights : Event Log Analysis

' Event-Driven Business KPIs
SagaOrchestrator --> SagaSuccessRate : SAGA Success Metrics
EventStore --> EventProcessingLatency : Event Processing Metrics
LoanService --> LoanOriginationTime : Loan Metrics
PaymentService --> PaymentProcessingTime : Payment Metrics
EventStore --> EventStoreQueryPerformance : Query Metrics
LoanService --> BianComplianceScore : BIAN Metrics

' Event-Driven Technical SLAs
EventStore --> EventPublishingRate : Publishing Metrics
SagaOrchestrator --> SagaOrchestrationTime : Orchestration Metrics
KafkaService --> EventConsumerLag : Consumer Metrics
EventStore --> EventStoreAvailability : Availability Metrics
KafkaService --> KafkaClusterHealth : Cluster Health

' Enhanced Annotations
note top of PrometheusServer : Event-Driven Prometheus Configuration\n• Event Scrape Interval: 10s\n• SAGA Metrics Retention: 30 days\n• Event Storage: 500GB SSD\n• Event Correlation: Cross-service\n• Real-time Event Processing

note top of SagaMetrics : SAGA Orchestration Monitoring\n• Success Rate: >99% (99.5% actual)\n• Compensation Rate: <1% (0.3% actual)\n• Average Execution Time: 15 seconds\n• Timeout Rate: <0.1%\n• Business Rule Compliance: 100%

note top of KafkaMetrics : Kafka Event Streaming Metrics\n• Topic Throughput: 10,000 events/sec\n• Consumer Lag: <100 messages\n• Producer Success Rate: 99.99%\n• Dead Letter Queue: <10 events/day\n• Event Ordering: Guaranteed

note top of EventStoreMetrics : Event Store Performance\n• Event Persistence: <5ms\n• Event Replay: <100ms\n• Query Performance: <50ms\n• Storage Efficiency: 95%\n• Event Correlation: Sub-second

note top of SagaDashboard : SAGA Orchestration Dashboard\n• Real-time transaction flows\n• Compensation pattern visualization\n• Business process analytics\n• Cross-service dependency mapping\n• Performance bottleneck detection

note bottom of BianMetrics : BIAN Service Domain Metrics\n• Consumer Loan SD: Health 100%\n• Payment Initiation SD: Active\n• Party Data Management: Compliant\n• Credit Management: Operational\n• Service Domain Integration: Complete

note bottom of EventFlowVisualization : Event-Driven Tracing\n• End-to-end event flow tracking\n• Cross-service event correlation\n• Business process visualization\n• Event causation analysis\n• Performance impact assessment

note right of SagaSuccessRate : Event-Driven SLA Performance\n• SAGA Success: >99% (99.5% actual)\n• Event Processing: <10ms (7ms actual)\n• Event Store Queries: <50ms (35ms actual)\n• Kafka Consumer Lag: <1000 (450 actual)\n• BIAN Compliance: 100% (100% actual)

@enduml