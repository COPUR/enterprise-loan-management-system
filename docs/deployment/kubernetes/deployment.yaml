apiVersion: apps/v1
kind: Deployment
metadata:
  name: loan-management-app
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: banking-platform
    app.kubernetes.io/managed-by: helm
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Enterprise Loan Management System application deployment"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: loan-management-system
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: loan-management-system
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: banking-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8000"
        co.elastic.logs/enabled: "true"
        co.elastic.logs/multiline.pattern: '^\d{4}-\d{2}-\d{2}'
        co.elastic.logs/multiline.negate: "true"
        co.elastic.logs/multiline.match: "after"
    spec:
      serviceAccountName: loan-management-sa
      automountServiceAccountToken: true
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Init containers for dependency checks
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: loan-management-config
              key: database.host
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: loan-management-config
              key: database.port
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: loan-management-secrets
              key: database.username
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
      
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h $REDIS_HOST -p $REDIS_PORT ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: loan-management-config
              key: redis.host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: loan-management-config
              key: redis.port
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
      
      containers:
      - name: loan-management-app
        image: loan-management-system:1.0.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: management
          containerPort: 8080
          protocol: TCP
        
        # Environment variables
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production,kubernetes"
        - name: SERVER_PORT
          value: "8000"
        - name: MANAGEMENT_SERVER_PORT
          value: "8080"
        - name: JVM_OPTS
          value: "-Xms512m -Xmx1g -XX:+UseG1GC -XX:+UseStringDeduplication"
        - name: JAVA_TOOL_OPTIONS
          value: "-Dspring.aop.proxy-target-class=false -Djava.security.egd=file:/dev/./urandom"
        
        # Database configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: loan-management-secrets
              key: database.url
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: loan-management-secrets
              key: database.username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: loan-management-secrets
              key: database.password
        
        # Redis configuration
        - name: SPRING_DATA_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: loan-management-config
              key: redis.host
        - name: SPRING_DATA_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: loan-management-config
              key: redis.port
        
        # Kafka configuration
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: loan-management-config
              key: kafka.bootstrap-servers
        
        # JWT configuration
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: loan-management-secrets
              key: jwt.secret
        
        # Health check endpoints
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: management
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: management
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /actuator/health
            port: management
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Resource requirements
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 15
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 2Gi
      - name: config-volume
        configMap:
          name: loan-management-config
          defaultMode: 0444
      - name: secrets-volume
        secret:
          secretName: loan-management-secrets
          defaultMode: 0400
      
      # Pod settings
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      
      # Node selection and tolerations
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: application
      
      affinity:
        # Pod anti-affinity to spread pods across nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - loan-management-system
              topologyKey: kubernetes.io/hostname
        
        # Node affinity for application nodes
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - application
      
      tolerations:
      - key: "application-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: loan-management-hpa
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: loan-management-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: loan-management-pdb
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: disruption-budget
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: loan-management-system
      app.kubernetes.io/component: application
