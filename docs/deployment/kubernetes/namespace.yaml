apiVersion: v1
kind: Namespace
metadata:
  name: loan-management-system
  labels:
    name: loan-management-system
    environment: production
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: banking-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Enterprise Loan Management System namespace"
    contact: "dev@bank.com"
    cost-center: "engineering"
    compliance: "financial-services"

---
# Resource quota to control resource consumption
apiVersion: v1
kind: ResourceQuota
metadata:
  name: loan-management-quota
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: resource-quota
spec:
  hard:
    # Compute resources
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    
    # Storage resources
    requests.storage: 100Gi
    persistentvolumeclaims: "10"
    
    # Object counts
    pods: "20"
    services: "10"
    secrets: "20"
    configmaps: "20"
    replicationcontrollers: "0"
    deployments.apps: "10"
    replicasets.apps: "10"
    statefulsets.apps: "5"
    jobs.batch: "10"
    cronjobs.batch: "5"

---
# Limit range to set default resource limits for pods
apiVersion: v1
kind: LimitRange
metadata:
  name: loan-management-limits
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: limit-range
spec:
  limits:
  # Pod limits
  - type: Pod
    max:
      cpu: "2"
      memory: 4Gi
    min:
      cpu: 10m
      memory: 64Mi
  
  # Container limits
  - type: Container
    default:
      cpu: 500m
      memory: 1Gi
    defaultRequest:
      cpu: 100m
      memory: 256Mi
    max:
      cpu: "2"
      memory: 4Gi
    min:
      cpu: 10m
      memory: 64Mi
  
  # Persistent Volume Claim limits
  - type: PersistentVolumeClaim
    max:
      storage: 50Gi
    min:
      storage: 1Gi

---
# Network policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: loan-management-network-policy
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: network-policy
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow ingress from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow ingress from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow inter-pod communication within namespace
  - from:
    - podSelector: {}
  
  egress:
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow egress to external services (database, kafka, redis)
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9092  # Kafka
  
  # Allow HTTPS egress for external API calls
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Pod Security Policy (if using PSP)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: loan-management-psp
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: pod-security-policy
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  readOnlyRootFilesystem: false
  seLinux:
    rule: 'RunAsAny'

---
# Service Account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loan-management-sa
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: service-account
  annotations:
    # AWS IAM role for service accounts (if using EKS)
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/loan-management-role
automountServiceAccountToken: true

---
# Role for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: loan-management-role
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
# Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: loan-management-rolebinding
  namespace: loan-management-system
  labels:
    app.kubernetes.io/name: loan-management-system
    app.kubernetes.io/component: role-binding
subjects:
- kind: ServiceAccount
  name: loan-management-sa
  namespace: loan-management-system
roleRef:
  kind: Role
  name: loan-management-role
  apiGroup: rbac.authorization.k8s.io
