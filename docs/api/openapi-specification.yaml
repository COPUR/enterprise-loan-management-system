openapi: 3.1.0
info:
  title: Enterprise Banking Platform API
  description: |
    Comprehensive banking API for loan management, payment processing, and customer services.
    
    ## Features
    - **FAPI 2.0 Compliant**: Implements Financial-grade API security standards
    - **Idempotency**: All POST/PUT operations support idempotency keys
    - **HATEOAS**: Hypermedia-driven API with navigational links
    - **Real-time Events**: Server-Sent Events for live updates
    - **OpenTelemetry**: Distributed tracing and observability
    - **OAuth 2.1**: Modern security with PKCE and scoped access
    
    ## Security
    This API implements OAuth 2.1 with FAPI 2.0 security profile including:
    - Mutual TLS (mTLS) for client authentication
    - JWT Secured Authorization Response Mode (JARM)
    - Pushed Authorization Requests (PAR)
    - Rich Authorization Requests (RAR)
    
    ## Rate Limiting
    - Authentication endpoints: 5 requests/minute
    - Financial operations: 10 requests/minute  
    - Read operations: 100 requests/minute
    - Admin operations: 2 requests/minute
    
    ## Idempotency
    All state-changing operations (POST, PUT, PATCH) require an `Idempotency-Key` header.
    The key should be a unique identifier for the request (UUID recommended).
    
  version: 1.0.0
  contact:
    name: API Support
    url: https://banking.local/support
    email: api-support@banking.local
  license:
    name: Proprietary
    url: https://banking.local/license
  termsOfService: https://banking.local/terms

servers:
  - url: https://api.banking.local
    description: Production server
  - url: https://api-staging.banking.local
    description: Staging server
  - url: https://api-dev.banking.local
    description: Development server

security:
  - oauth2: []
  - mtls: []

paths:
  # Customer Management Endpoints
  /api/v1/customers:
    post:
      operationId: createCustomer
      summary: Create Customer
      description: Creates a new customer account with comprehensive KYC validation and credit assessment
      tags: ["Customer Management"]
      security:
        - oauth2: ["customer:write"]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/FAPIFinancialId'
        - $ref: '#/components/parameters/FAPIInteractionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
            examples:
              individual:
                summary: Individual customer
                value:
                  firstName: John
                  lastName: Doe
                  email: john.doe@example.com
                  phoneNumber: "+1-555-0123"
                  dateOfBirth: "1985-06-15"
                  ssn: "123-45-6789"
                  address:
                    street: "123 Main St"
                    city: "Anytown"
                    state: "CA"
                    zipCode: "12345"
                    country: "US"
                  creditLimit: 50000.00
                  currency: "USD"
      responses:
        '201':
          description: Customer created successfully
          headers:
            X-Resource-Id:
              description: Customer ID
              schema:
                type: string
            X-Idempotency-Key:
              description: Echo of the idempotency key
              schema:
                type: string
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CustomerHalResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /api/v1/customers/{customerId}:
    get:
      operationId: getCustomer
      summary: Get Customer Details
      description: Retrieves customer information with hypermedia controls
      tags: ["Customer Management"]
      security:
        - oauth2: ["customer:read"]
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer identifier
          schema:
            type: string
            pattern: '^CUST-[0-9]{8}$'
          example: "CUST-12345678"
      responses:
        '200':
          description: Customer found
          headers:
            X-Resource-Version:
              description: Resource version for optimistic locking
              schema:
                type: string
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CustomerHalResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/customers/{customerId}/events:
    get:
      operationId: getCustomerEvents
      summary: Customer Event Stream
      description: Real-time stream of customer events using Server-Sent Events
      tags: ["Customer Management"]
      security:
        - oauth2: ["customer:read"]
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: timeoutSeconds
          in: query
          description: Event stream timeout in seconds
          schema:
            type: integer
            default: 300
            minimum: 30
            maximum: 3600
      responses:
        '200':
          description: Event stream established
          content:
            text/event-stream:
              schema:
                type: string
                format: binary

  # Loan Management Endpoints
  /api/v1/loans:
    post:
      operationId: createLoanApplication
      summary: Create Loan Application
      description: Initiates a new loan application with comprehensive credit assessment and risk evaluation
      tags: ["Loan Management"]
      security:
        - oauth2: ["loan:write"]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/FAPIFinancialId'
        - $ref: '#/components/parameters/FAPIInteractionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanRequest'
            examples:
              personal_loan:
                summary: Personal loan application
                value:
                  customerId: "CUST-12345678"
                  principalAmount: 25000.00
                  currency: "USD"
                  annualInterestRate: 8.5
                  termInMonths: 60
              mortgage:
                summary: Mortgage application
                value:
                  customerId: "CUST-87654321"
                  principalAmount: 350000.00
                  currency: "USD"
                  annualInterestRate: 4.25
                  termInMonths: 360
      responses:
        '201':
          description: Loan application created successfully
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/LoanHalResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    get:
      operationId: searchLoans
      summary: Search Loans
      description: Search and filter loans with pagination support
      tags: ["Loan Management"]
      security:
        - oauth2: ["loan:read"]
      parameters:
        - name: customerId
          in: query
          description: Customer ID filter
          schema:
            type: string
        - name: status
          in: query
          description: Loan status filter
          schema:
            type: string
            enum: ["PENDING_APPROVAL", "APPROVED", "REJECTED", "ACTIVE", "PAID_OFF", "DEFAULTED"]
        - name: minAmount
          in: query
          description: Minimum amount filter
          schema:
            type: number
            format: decimal
        - name: maxAmount
          in: query
          description: Maximum amount filter
          schema:
            type: number
            format: decimal
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: Search results
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/LoanSearchResponse'

  /api/v1/loans/{loanId}:
    get:
      operationId: getLoan
      summary: Get Loan Details
      description: Retrieves comprehensive loan information with hypermedia controls
      tags: ["Loan Management"]
      security:
        - oauth2: ["loan:read"]
      parameters:
        - name: loanId
          in: path
          required: true
          description: Loan identifier
          schema:
            type: string
            pattern: '^LOAN-[0-9]{8}$'
          example: "LOAN-12345678"
      responses:
        '200':
          description: Loan found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/LoanHalResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/loans/{loanId}/approve:
    put:
      operationId: approveLoan
      summary: Approve Loan
      description: Approve a pending loan application after underwriting review
      tags: ["Loan Management"]
      security:
        - oauth2: ["loan:approve"]
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanApprovalRequest'
      responses:
        '200':
          description: Loan approved
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/LoanHalResponse'

  # Payment Processing Endpoints
  /api/v1/payments:
    post:
      operationId: processPayment
      summary: Process Payment
      description: Initiates a new payment with comprehensive validation, fraud detection, and real-time settlement
      tags: ["Payment Processing"]
      security:
        - oauth2: ["payment:write"]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/FAPIFinancialId'
        - $ref: '#/components/parameters/FAPIInteractionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
            examples:
              bank_transfer:
                summary: Bank transfer
                value:
                  customerId: "CUST-12345678"
                  fromAccountId: "ACC-11111111"
                  toAccountId: "ACC-22222222"
                  amount: 1000.00
                  currency: "USD"
                  paymentType: "BANK_TRANSFER"
                  description: "Monthly rent payment"
              loan_payment:
                summary: Loan payment
                value:
                  customerId: "CUST-12345678"
                  fromAccountId: "ACC-11111111"
                  toAccountId: "ACC-LOAN-001"
                  amount: 2500.00
                  currency: "USD"
                  paymentType: "LOAN_PAYMENT"
                  description: "Monthly loan payment"
      responses:
        '201':
          description: Payment initiated successfully
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PaymentHalResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          description: Insufficient funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    get:
      operationId: searchPayments
      summary: Search Payments
      description: Search and filter payments with pagination support
      tags: ["Payment Processing"]
      security:
        - oauth2: ["payment:read"]
      parameters:
        - name: customerId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: ["PENDING", "PROCESSING", "COMPLETED", "FAILED", "CANCELLED"]
        - name: fromAccount
          in: query
          schema:
            type: string
        - name: toAccount
          in: query
          schema:
            type: string
        - name: minAmount
          in: query
          schema:
            type: number
            format: decimal
        - name: maxAmount
          in: query
          schema:
            type: number
            format: decimal
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: Search results
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PaymentSearchResponse'

  /api/v1/payments/{paymentId}:
    get:
      operationId: getPayment
      summary: Get Payment Details
      description: Retrieves comprehensive payment information with hypermedia controls
      tags: ["Payment Processing"]
      security:
        - oauth2: ["payment:read"]
      parameters:
        - name: paymentId
          in: path
          required: true
          description: Payment identifier
          schema:
            type: string
            pattern: '^PAY-[0-9]{8}$'
          example: "PAY-12345678"
      responses:
        '200':
          description: Payment found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PaymentHalResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/payments/{paymentId}/events:
    get:
      operationId: getPaymentEvents
      summary: Payment Event Stream
      description: Real-time stream of payment status changes and events using Server-Sent Events
      tags: ["Payment Processing"]
      security:
        - oauth2: ["payment:read"]
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
        - name: timeoutSeconds
          in: query
          description: Event stream timeout in seconds
          schema:
            type: integer
            default: 300
            minimum: 30
            maximum: 3600
      responses:
        '200':
          description: Event stream established
          content:
            text/event-stream:
              schema:
                type: string
                format: binary

components:
  securitySchemes:
    oauth2:
      type: oauth2
      description: OAuth 2.1 with FAPI 2.0 security profile
      flows:
        authorizationCode:
          authorizationUrl: https://auth.banking.local/oauth2/authorize
          tokenUrl: https://auth.banking.local/oauth2/token
          refreshUrl: https://auth.banking.local/oauth2/token
          scopes:
            customer:read: Read customer information
            customer:write: Create and modify customers
            loan:read: Read loan information
            loan:write: Create loan applications
            loan:approve: Approve/reject loans
            payment:read: Read payment information
            payment:write: Process payments
            admin: Administrative access
    
    mtls:
      type: mutualTLS
      description: Mutual TLS for FAPI 2.0 compliance

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      description: Idempotency key for duplicate request prevention (UUID recommended)
      schema:
        type: string
        format: uuid
        pattern: '^[a-zA-Z0-9-_]{16,64}$'
      example: "550e8400-e29b-41d4-a716-446655440000"
    
    FAPIFinancialId:
      name: X-FAPI-Financial-Id
      in: header
      required: false
      description: Financial institution identifier for FAPI compliance
      schema:
        type: string
        pattern: '^[A-Z]{2}-[A-Z]{3}-[0-9]{6}$'
      example: "GB-FCA-123456"
    
    FAPIInteractionId:
      name: X-FAPI-Interaction-Id
      in: header
      required: false
      description: Client interaction ID for audit trails
      schema:
        type: string
        format: uuid
      example: "12345678-1234-1234-1234-123456789012"
    
    PageNumber:
      name: page
      in: query
      description: Page number (0-indexed)
      schema:
        type: integer
        minimum: 0
        default: 0
    
    PageSize:
      name: size
      in: query
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    # Customer Schemas
    CreateCustomerRequest:
      type: object
      required: ["firstName", "lastName", "email", "dateOfBirth", "address"]
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+1-555-0123"
        dateOfBirth:
          type: string
          format: date
          example: "1985-06-15"
        ssn:
          type: string
          pattern: '^\d{3}-\d{2}-\d{4}$'
          example: "123-45-6789"
        address:
          $ref: '#/components/schemas/Address'
        creditLimit:
          type: number
          format: decimal
          minimum: 0
          maximum: 10000000
          example: 50000.00
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          default: "USD"
          example: "USD"

    CustomerResponse:
      type: object
      properties:
        customerId:
          type: string
          example: "CUST-12345678"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "+1-555-0123"
        status:
          type: string
          enum: ["ACTIVE", "INACTIVE", "SUSPENDED", "CLOSED"]
          example: "ACTIVE"
        creditLimit:
          type: number
          format: decimal
          example: 50000.00
        availableCredit:
          type: number
          format: decimal
          example: 45000.00
        currency:
          type: string
          example: "USD"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    CustomerHalResponse:
      allOf:
        - $ref: '#/components/schemas/CustomerResponse'
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/HalLinks'

    # Loan Schemas
    CreateLoanRequest:
      type: object
      required: ["customerId", "principalAmount", "annualInterestRate", "termInMonths"]
      properties:
        customerId:
          type: string
          pattern: '^CUST-[0-9]{8}$'
          example: "CUST-12345678"
        principalAmount:
          type: number
          format: decimal
          minimum: 1000
          maximum: 10000000
          example: 25000.00
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          default: "USD"
          example: "USD"
        annualInterestRate:
          type: number
          format: decimal
          minimum: 0.01
          maximum: 50.00
          example: 8.5
        termInMonths:
          type: integer
          minimum: 6
          maximum: 480
          example: 60

    LoanResponse:
      type: object
      properties:
        loanId:
          type: string
          example: "LOAN-12345678"
        customerId:
          type: string
          example: "CUST-12345678"
        principalAmount:
          type: number
          format: decimal
          example: 25000.00
        annualInterestRate:
          type: number
          format: decimal
          example: 8.5
        termInMonths:
          type: integer
          example: 60
        status:
          type: string
          enum: ["PENDING_APPROVAL", "APPROVED", "REJECTED", "ACTIVE", "PAID_OFF", "DEFAULTED"]
          example: "PENDING_APPROVAL"
        applicationDate:
          type: string
          format: date
          example: "2024-01-15"
        approvalDate:
          type: string
          format: date
          nullable: true
          example: "2024-01-16"
        disbursementDate:
          type: string
          format: date
          nullable: true
          example: "2024-01-17"
        maturityDate:
          type: string
          format: date
          example: "2029-01-17"
        outstandingBalance:
          type: number
          format: decimal
          example: 23500.00
        monthlyPayment:
          type: number
          format: decimal
          example: 506.69
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    LoanHalResponse:
      allOf:
        - $ref: '#/components/schemas/LoanResponse'
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/HalLinks'

    LoanApprovalRequest:
      type: object
      properties:
        notes:
          type: string
          maxLength: 500
          example: "Approved based on credit score and income verification"
        approvedAmount:
          type: number
          format: decimal
          minimum: 1000
          example: 20000.00
        approvedTermMonths:
          type: integer
          minimum: 6
          maximum: 480
          example: 48

    LoanSearchResponse:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            loans:
              type: array
              items:
                $ref: '#/components/schemas/LoanHalResponse'
        _links:
          $ref: '#/components/schemas/HalLinks'
        page:
          $ref: '#/components/schemas/PageMetadata'

    # Payment Schemas
    CreatePaymentRequest:
      type: object
      required: ["customerId", "fromAccountId", "toAccountId", "amount", "paymentType"]
      properties:
        customerId:
          type: string
          pattern: '^CUST-[0-9]{8}$'
          example: "CUST-12345678"
        fromAccountId:
          type: string
          pattern: '^ACC-[0-9A-Z]{8}$'
          example: "ACC-11111111"
        toAccountId:
          type: string
          pattern: '^ACC-[0-9A-Z]{8}$'
          example: "ACC-22222222"
        amount:
          type: number
          format: decimal
          minimum: 0.01
          maximum: 100000000
          example: 1000.00
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          default: "USD"
          example: "USD"
        paymentType:
          type: string
          enum: ["BANK_TRANSFER", "WIRE_TRANSFER", "ACH", "LOAN_PAYMENT", "CREDIT_CARD"]
          example: "BANK_TRANSFER"
        description:
          type: string
          maxLength: 200
          example: "Monthly rent payment"

    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: string
          example: "PAY-12345678"
        customerId:
          type: string
          example: "CUST-12345678"
        fromAccountId:
          type: string
          example: "ACC-11111111"
        toAccountId:
          type: string
          example: "ACC-22222222"
        amount:
          type: number
          format: decimal
          example: 1000.00
        fee:
          type: number
          format: decimal
          example: 2.50
        totalAmount:
          type: number
          format: decimal
          example: 1002.50
        currency:
          type: string
          example: "USD"
        paymentType:
          type: string
          enum: ["BANK_TRANSFER", "WIRE_TRANSFER", "ACH", "LOAN_PAYMENT", "CREDIT_CARD"]
          example: "BANK_TRANSFER"
        status:
          type: string
          enum: ["PENDING", "PROCESSING", "COMPLETED", "FAILED", "CANCELLED"]
          example: "COMPLETED"
        description:
          type: string
          example: "Monthly rent payment"
        failureReason:
          type: string
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        completedAt:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-15T10:31:00Z"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:31:00Z"

    PaymentHalResponse:
      allOf:
        - $ref: '#/components/schemas/PaymentResponse'
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/HalLinks'

    PaymentSearchResponse:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            payments:
              type: array
              items:
                $ref: '#/components/schemas/PaymentHalResponse'
        _links:
          $ref: '#/components/schemas/HalLinks'
        page:
          $ref: '#/components/schemas/PageMetadata'

    # Common Schemas
    Address:
      type: object
      required: ["street", "city", "state", "zipCode", "country"]
      properties:
        street:
          type: string
          minLength: 1
          maxLength: 100
          example: "123 Main St"
        city:
          type: string
          minLength: 1
          maxLength: 50
          example: "Anytown"
        state:
          type: string
          minLength: 2
          maxLength: 50
          example: "CA"
        zipCode:
          type: string
          pattern: '^\d{5}(-\d{4})?$'
          example: "12345"
        country:
          type: string
          pattern: '^[A-Z]{2}$'
          example: "US"

    HalLinks:
      type: object
      additionalProperties:
        oneOf:
          - $ref: '#/components/schemas/HalLink'
          - type: array
            items:
              $ref: '#/components/schemas/HalLink'

    HalLink:
      type: object
      required: ["href"]
      properties:
        href:
          type: string
          format: uri
          example: "https://api.banking.local/api/v1/customers/CUST-12345678"
        templated:
          type: boolean
          default: false
        type:
          type: string
          example: "application/hal+json"
        title:
          type: string
          example: "Customer Details"

    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8
        number:
          type: integer
          example: 0

    ErrorResponse:
      type: object
      required: ["error", "timestamp"]
      properties:
        error:
          type: string
          example: "validation_failed"
        error_description:
          type: string
          example: "The request data failed validation"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        path:
          type: string
          example: "/api/v1/customers"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Invalid email format"

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "validation_failed"
            error_description: "The request data failed validation"
            timestamp: "2024-01-15T10:30:00Z"
            details:
              - field: "email"
                message: "Invalid email format"

    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "resource_exists"
            error_description: "A resource with this identifier already exists"
            timestamp: "2024-01-15T10:30:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "resource_not_found"
            error_description: "The requested resource was not found"
            timestamp: "2024-01-15T10:30:00Z"

    UnprocessableEntity:
      description: Business validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "business_validation_failed"
            error_description: "The request failed business rule validation"
            timestamp: "2024-01-15T10:30:00Z"

    TooManyRequests:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          description: Request limit per time window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Remaining requests in current window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Time when rate limit resets (Unix timestamp)
          schema:
            type: integer
        Retry-After:
          description: Seconds to wait before retrying
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "rate_limit_exceeded"
            error_description: "Too many requests. Please retry after the specified time."
            timestamp: "2024-01-15T10:30:00Z"

tags:
  - name: Customer Management
    description: Customer lifecycle and credit management operations
  - name: Loan Management
    description: Loan origination, underwriting, and lifecycle management operations
  - name: Payment Processing
    description: Real-time payment processing, validation, and settlement operations

externalDocs:
  description: Enterprise Banking Platform Documentation
  url: https://docs.banking.local