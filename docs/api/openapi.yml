openapi: 3.0.3
info:
  title: Loan Management System API
  description: |
    Enterprise Loan Management System API built with Domain-Driven Design (DDD) and Hexagonal Architecture.
    
    ## Features
    - **Loan Creation** with business rule validation
    - **Payment Processing** with early/late payment calculations  
    - **Credit Management** with automatic limit updates
    - **Role-Based Access Control** (ADMIN and CUSTOMER roles)
    
    ## Business Rules
    - Supported installment options: 6, 9, 12, or 24 months
    - Interest rates between 10% (0.1) and 50% (0.5)
    - Early payment discount: amount × 0.001 × days before due date
    - Late payment penalty: amount × 0.001 × days after due date
    - No partial payments allowed - only full installments
    - Maximum 3 months advance payment allowed
  version: 1.0.0
  contact:
    name: Development Team
    email: dev@bank.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.loanmanagement.example.com
    description: Production server

security:
  - bearerAuth: []

paths:
  # Authentication Endpoints
  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Customer Management Endpoints
  /api/v1/customers:
    get:
      tags:
        - Customer Management
      summary: Get all customers
      description: Retrieve a list of all customers (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/customers/{customerId}:
    get:
      tags:
        - Customer Management
      summary: Get customer by ID
      description: Retrieve customer information by ID
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/customers/{customerId}/credit-info:
    get:
      tags:
        - Customer Management
      summary: Get customer credit information
      description: Retrieve credit limit and usage information
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Credit information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditInfoResponse'

  # Loan Management Endpoints
  /api/v1/loans:
    post:
      tags:
        - Loan Management
      summary: Create a new loan
      description: Create a new loan for a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanRequest'
      responses:
        '201':
          description: Loan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanResponse'
        '400':
          description: Invalid request or insufficient credit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/loans/customers/{customerId}:
    get:
      tags:
        - Loan Management
      summary: List loans for a customer
      description: Retrieve all loans for a specific customer with optional filters
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: numberOfInstallments
          in: query
          required: false
          schema:
            type: integer
            enum: [6, 9, 12, 24]
          description: Filter by number of installments
        - name: isPaid
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by payment status
      responses:
        '200':
          description: Loans retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoanResponse'

  /api/v1/loans/{loanId}:
    get:
      tags:
        - Loan Management
      summary: Get loan by ID
      description: Retrieve loan information by ID
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Loan retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanResponse'
        '404':
          description: Loan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/loans/{loanId}/installments:
    get:
      tags:
        - Loan Management
      summary: List installments for a loan
      description: Retrieve all installments for a specific loan
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Installments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstallmentResponse'

  # Payment Processing Endpoints
  /api/v1/loans/{loanId}/payments:
    post:
      tags:
        - Payment Processing
      summary: Process payment
      description: Process a payment for a loan
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: Invalid payment amount or loan already paid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Payment Processing
      summary: List payments for loan
      description: Retrieve all payments made for a specific loan
      parameters:
        - name: loanId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentResponse'

  # Health Check
  /actuator/health:
    get:
      tags:
        - System
      summary: Health check
      description: Get application health status
      security: []
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          format: password
          example: "password123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
        type:
          type: string
          example: "Bearer"
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 86400

    # Customer Schemas
    CustomerResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Smith"
        fullName:
          type: string
          example: "John Smith"
        creditLimit:
          type: number
          format: decimal
          example: 100000.00
        usedCreditLimit:
          type: number
          format: decimal
          example: 25000.00
        availableCreditLimit:
          type: number
          format: decimal
          example: 75000.00

    CreditInfoResponse:
      type: object
      properties:
        creditLimit:
          type: number
          format: decimal
          example: 100000.00
        usedCredit:
          type: number
          format: decimal
          example: 25000.00
        availableCredit:
          type: number
          format: decimal
          example: 75000.00
        maximumLoanAmount:
          type: number
          format: decimal
          example: 75000.00
        creditRiskLevel:
          type: string
          enum: [LOW, MEDIUM, HIGH]
          example: "LOW"

    # Loan Schemas
    CreateLoanRequest:
      type: object
      required:
        - customerId
        - loanAmount
        - interestRate
        - numberOfInstallments
      properties:
        customerId:
          type: integer
          format: int64
          minimum: 1
          example: 1
        loanAmount:
          type: number
          format: decimal
          minimum: 1.00
          maximum: 1000000.00
          example: 10000.00
        interestRate:
          type: number
          format: decimal
          minimum: 0.1
          maximum: 0.5
          example: 0.15
          description: "Interest rate as decimal (0.15 = 15%)"
        numberOfInstallments:
          type: integer
          enum: [6, 9, 12, 24]
          example: 12

    LoanResponse:
      type: object
      properties:
        loanId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        customerId:
          type: integer
          format: int64
          example: 1
        loanAmount:
          type: number
          format: decimal
          example: 10000.00
        totalAmount:
          type: number
          format: decimal
          example: 11500.00
          description: "Principal + Interest"
        numberOfInstallments:
          type: integer
          example: 12
        interestRate:
          type: number
          format: decimal
          example: 0.15
        createDate:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        isPaid:
          type: boolean
          example: false
        remainingAmount:
          type: number
          format: decimal
          example: 11500.00
        remainingInstallments:
          type: integer
          example: 12
        nextDueDate:
          type: string
          format: date
          example: "2024-02-01"

    InstallmentResponse:
      type: object
      properties:
        installmentId:
          type: string
          format: uuid
          example: "660e8400-e29b-41d4-a716-446655440001"
        amount:
          type: number
          format: decimal
          example: 958.33
        paidAmount:
          type: number
          format: decimal
          example: 0.00
        dueDate:
          type: string
          format: date
          example: "2024-02-01"
        paymentDate:
          type: string
          format: date-time
          nullable: true
          example: null
        isPaid:
          type: boolean
          example: false
        isOverdue:
          type: boolean
          example: false
        daysUntilDue:
          type: integer
          example: 15
          description: "Positive = days until due, Negative = days overdue"

    # Payment Schemas
    PaymentRequest:
      type: object
      required:
        - paymentAmount
      properties:
        paymentAmount:
          type: number
          format: decimal
          minimum: 0.01
          example: 2000.00

    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: string
          format: uuid
          example: "770e8400-e29b-41d4-a716-446655440002"
        loanId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        paymentAmount:
          type: number
          format: decimal
          example: 2000.00
        installmentsPaid:
          type: integer
          example: 2
        totalAmountSpent:
          type: number
          format: decimal
          example: 1916.66
          description: "Amount after discounts/penalties"
        isLoanFullyPaid:
          type: boolean
          example: false
        message:
          type: string
          example: "Paid 2 installment(s) for total amount 1916.66 (discount: 83.34)"

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          example: "BUSINESS_ERROR"
        message:
          type: string
          example: "Loan not found"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        path:
          type: string
          example: "/api/v1/loans/invalid-id"

    ValidationErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Request validation failed"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        fieldErrors:
          type: object
          additionalProperties:
            type: string
          example:
            loanAmount: "Loan amount must be at least 1.00"
            interestRate: "Interest rate must be between 0.1 and 0.5"

    # System Schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          example: "UP"
        components:
          type: object
          properties:
            db:
              type: object
              properties:
                status:
                  type: string
                  example: "UP"
            redis:
              type: object
              properties:
                status:
                  type: string
                  example: "UP"
            kafka:
              type: object
              properties:
                status:
                  type: string
                  example: "UP"

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Customer Management
    description: Customer information and credit management
  - name: Loan Management
    description: Loan creation and management operations
  - name: Payment Processing
    description: Payment processing and installment management
  - name: System
    description: System health and monitoring endpoints
