@startuml "OAuth 2.1 Keycloak Authentication Architecture"
!define RECTANGLE class

title Enhanced Enterprise Banking System - OAuth 2.1 Authentication Architecture

skinparam backgroundColor #f8f9fa
skinparam shadowing false
skinparam rectangle {
    BackgroundColor #ffffff
    BorderColor #dee2e6
    RoundCorner 10
}

skinparam cloud {
    BackgroundColor #e3f2fd
    BorderColor #1976d2
}

skinparam database {
    BackgroundColor #f3e5f5
    BorderColor #7b1fa2
}

skinparam actor {
    BackgroundColor #fff3e0
    BorderColor #f57c00
}

' Define actors and systems
actor "Banking Customer" as Customer <<User>>
actor "Banking Officer" as Officer <<User>>
actor "Banking Admin" as Admin <<User>>

cloud "Internet" {
    rectangle "Client Application\n(Web/Mobile)" as ClientApp {
        note right : PKCE enabled\nOAuth 2.1 compliant
    }
}

package "Security Perimeter" #e8f5e8 {
    rectangle "Istio Ingress Gateway" as Gateway {
        note right : TLS 1.3 termination\nOAuth2 Proxy\nRate limiting
    }
    
    rectangle "OAuth2 Proxy" as OAuth2Proxy {
        note right : Authorization Code Flow\nPKCE validation\nSession management
    }
}

package "Identity Provider" #fff9c4 {
    rectangle "Keycloak OAuth 2.1 Server" as Keycloak {
        rectangle "Banking Realm" as Realm {
            rectangle "Users & Roles" as Users
            rectangle "Clients & Scopes" as Clients
            rectangle "Authentication Flows" as Flows
        }
        
        database "Keycloak Database" as KeycloakDB
    }
    
    rectangle "LDAP/Active Directory" as LDAP {
        note right : Enterprise directory\nintegration
    }
}

package "Banking Microservices" #f3e5f5 {
    rectangle "Customer Service" as CustomerSvc {
        rectangle "Envoy Sidecar" as CustomerEnvoy
    }
    
    rectangle "Loan Service" as LoanSvc {
        rectangle "Envoy Sidecar" as LoanEnvoy
    }
    
    rectangle "Payment Service" as PaymentSvc {
        rectangle "Envoy Sidecar" as PaymentEnvoy
    }
    
    rectangle "Risk Service" as RiskSvc {
        rectangle "Envoy Sidecar" as RiskEnvoy
    }
    
    rectangle "Audit Service" as AuditSvc {
        rectangle "Envoy Sidecar" as AuditEnvoy
    }
}

package "Data Layer" #e1f5fe {
    database "PostgreSQL Cluster" as PostgreSQL {
        note right : Encrypted at rest\nTransaction logs\nCompliance data
    }
    
    database "Redis Cluster" as Redis {
        note right : Session storage\nToken cache\nRate limiting
    }
    
    rectangle "Apache Kafka" as Kafka {
        note right : Audit events\nDomain events\nCompliance logs
    }
}

' Authentication flow connections
Customer --> ClientApp : "1. Access Banking App"
Officer --> ClientApp : "1. Access Banking App"
Admin --> ClientApp : "1. Access Banking App"

ClientApp --> Gateway : "2. HTTPS Request"
Gateway --> OAuth2Proxy : "3. Check Authentication"
OAuth2Proxy --> Keycloak : "4. OAuth 2.1 Flow\n(PKCE + Code)"

Keycloak --> LDAP : "5. User Authentication"
LDAP --> Keycloak : "6. User Validation"

Keycloak --> OAuth2Proxy : "7. JWT Access Token\n+ Refresh Token"
OAuth2Proxy --> Gateway : "8. Authenticated Request"

Gateway --> CustomerEnvoy : "9. Request with JWT"
Gateway --> LoanEnvoy : "9. Request with JWT"
Gateway --> PaymentEnvoy : "9. Request with JWT"
Gateway --> RiskEnvoy : "9. Request with JWT"
Gateway --> AuditEnvoy : "9. Request with JWT"

' Service mesh internal communication
CustomerEnvoy --> CustomerSvc : "10. Validated Request"
LoanEnvoy --> LoanSvc : "10. Validated Request"
PaymentEnvoy --> PaymentSvc : "10. Validated Request"
RiskEnvoy --> RiskSvc : "10. Validated Request"
AuditEnvoy --> AuditSvc : "10. Validated Request"

' Data access
CustomerSvc --> PostgreSQL : "11. Customer Data"
LoanSvc --> PostgreSQL : "11. Loan Data"
PaymentSvc --> Redis : "11. Payment Cache"
RiskSvc --> PostgreSQL : "11. Risk Data"
AuditSvc --> PostgreSQL : "11. Audit Logs"

' Event streaming
CustomerSvc --> Kafka : "12. Customer Events"
LoanSvc --> Kafka : "12. Loan Events"
PaymentSvc --> Kafka : "12. Payment Events"
RiskSvc --> Kafka : "12. Risk Events"
AuditSvc --> Kafka : "12. Audit Events"

' Keycloak data
Keycloak --> KeycloakDB : "Store realm data"

note top of Gateway : **Security Features:**\n• TLS 1.3 termination\n• DDoS protection\n• Geographic filtering\n• Request validation

note top of Keycloak : **OAuth 2.1 Features:**\n• PKCE for public clients\n• Refresh token rotation\n• Device authorization grant\n• Financial-grade API (FAPI) support

note bottom of CustomerEnvoy : **Envoy Sidecar Features:**\n• JWT token validation\n• mTLS enforcement\n• Request routing\n• Metrics collection\n• Circuit breaking

note bottom of PostgreSQL : **Compliance:**\n• PCI DSS encryption\n• SOX audit trails\n• GDPR data protection\n• 7-year retention

' Exception Handling Components
package "Exception Handling & Security Monitoring" #ffebee {
    rectangle "Security Incident Response" as SIR {
        rectangle "Threat Detection" as TD
        rectangle "Incident Logger" as IL
        rectangle "Response Orchestrator" as ROrch
    }
    
    rectangle "Authentication Fallback" as AF {
        rectangle "Cached Permissions" as CP
        rectangle "Emergency Access" as EA
        rectangle "Offline Validation" as OV
    }
    
    rectangle "Service Resilience" as SR {
        rectangle "Health Monitor" as HM
        rectangle "Circuit Breakers" as CBs
        rectangle "Retry Handler" as RH
    }
}

' Exception flows
Gateway --> SIR : "Security events"
Keycloak --> AF : "Authentication failures"
CustomerSvc --> SR : "Service health"
LoanSvc --> SR : "Service health"
PaymentSvc --> SR : "Service health"

SIR --> TD : "Threat analysis"
SIR --> IL : "Incident logging"
SIR --> ROrch : "Response coordination"

AF --> CP : "Use cached data"
AF --> EA : "Emergency procedures"
AF --> OV : "Offline validation"

SR --> HM : "Health monitoring"
SR --> CBs : "Circuit protection"
SR --> RH : "Retry logic"

' Exception scenario documentation
note as SecurityExceptions
**Security Exception Scenarios:**

**1. Keycloak Service Down:**
• Circuit breaker activates
• Fallback to cached tokens
• Emergency access procedures
• Service restoration monitoring

**2. Authentication Storm:**
• Rate limiting activation
• Request queuing
• Load balancing to replicas
• DDoS protection measures

**3. Token Validation Failure:**
• JWT signature verification fails
• Graceful degradation to cached permissions
• Security incident logging
• User re-authentication prompt

**4. LDAP Connection Lost:**
• Fallback to local user store
• Cached authentication results
• Service degradation alerts
• Automatic reconnection attempts

**5. Database Connection Issues:**
• Connection pool exhaustion
• Failover to backup database
• Read-only mode activation
• Performance degradation alerts

**6. Malicious Attack Detection:**
• Brute force attack detection
• Account lockout mechanisms
• IP-based blocking
• Security team notification
end note

SecurityExceptions .. SIR

' Resilience patterns for OAuth
note as OAuthResilience
**OAuth 2.1 Resilience Patterns:**

**Circuit Breaker Pattern:**
• Keycloak health monitoring
• Fast-fail on service degradation
• Automatic recovery detection

**Bulkhead Pattern:**
• Separate thread pools for auth
• Resource isolation per client
• Independent failure domains

**Timeout Pattern:**
• Token request timeouts
• JWKS endpoint timeouts
• User authentication timeouts

**Retry Pattern:**
• Exponential backoff for token requests
• Jitter to prevent thundering herd
• Maximum retry limits

**Fallback Pattern:**
• Cached token validation
• Offline authentication modes
• Emergency access procedures
end note

OAuthResilience .. AF

' Failure scenarios with specific banking impacts
note as BankingFailures
**Banking-Specific Failure Scenarios:**

**High-Value Transaction Failure:**
• Enhanced authentication required
• Manager approval workflow
• Audit trail generation
• Compliance reporting

**Regulatory Audit Access:**
• Emergency access procedures
• Compliance officer authentication
• Audit trail requirements
• Data access logging

**Peak Trading Hours:**
• Increased authentication load
• Performance optimization
• Resource scaling
• Priority user handling

**Security Breach Response:**
• Immediate token revocation
• User account suspension
• Forensic data collection
• Regulatory notification
end note

BankingFailures .. CustomerSvc

@enduml