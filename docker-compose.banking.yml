# Docker Compose for Enterprise Banking Loan Management System
# Multi-stage hardened containers with banking security compliance
# Production-ready configuration with security, monitoring, and compliance features

version: '3.8'

networks:
  banking-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: banking-br0
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  banking-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/postgres
      o: bind
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind
  
  banking-logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind

  banking-audit:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/audit
      o: bind

services:
  # ==============================================
  # Infrastructure Services
  # ==============================================
  
  postgres:
    image: postgres:15-alpine
    container_name: banking-postgres
    environment:
      POSTGRES_DB: banking
      POSTGRES_USER: banking_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - banking-internal
    ports:
      - "5432:5432"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U banking_user -d banking"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: banking-redis
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - banking-internal
    ports:
      - "6379:6379"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # Banking Microservices
  # ==============================================

  customer-service:
    build:
      context: .
      dockerfile: Dockerfile.customer-service
      target: production
    container_name: banking-customer-service
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/banking
      SPRING_DATASOURCE_USERNAME: banking_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Service configuration
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: production,docker
      
      # Banking compliance
      CUSTOMER_PII_ENCRYPTION: "true"
      GDPR_COMPLIANCE_STRICT: "true"
      DATA_MASKING_ENABLED: "true"
      AUDIT_CUSTOMER_ACCESS: "true"
      
      # Security
      BANKING_SECURITY_ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      BANKING_AUDIT_ENABLED: "true"
    
    networks:
      - banking-network
      - banking-internal
    
    ports:
      - "8081:8080"
      - "8091:8081"
    
    volumes:
      - banking-logs:/app/logs
      - banking-audit:/app/pii-vault
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    tmpfs:
      - /app/tmp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    
    restart: unless-stopped
    
    labels:
      - "com.enterprise.banking.service=customer-service"
      - "com.enterprise.banking.compliance=GDPR,PII-Protection"
      - "com.enterprise.banking.security-level=high"

  loan-service:
    build:
      context: .
      dockerfile: Dockerfile.loan-service
      target: production
    container_name: banking-loan-service
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/banking
      SPRING_DATASOURCE_USERNAME: banking_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Service configuration
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: production,docker
      
      # Loan processing configuration
      LOAN_CALCULATION_PRECISION: 34
      INTEREST_CALCULATION_MODE: COMPOUND
      RISK_ASSESSMENT_ENABLED: "true"
      BASEL_III_COMPLIANCE: "true"
      FINANCIAL_AUDIT_TRAIL: "true"
      
      # Performance optimization
      MATH_PRECISION_MODE: HIGH
      CALCULATION_THREAD_POOL_SIZE: 10
      RISK_MODEL_CACHE_SIZE: 1000
    
    networks:
      - banking-network
      - banking-internal
    
    ports:
      - "8082:8080"
      - "8092:8081"
    
    volumes:
      - banking-logs:/app/logs
      - banking-audit:/app/calculations
      - ./data/risk-models:/app/risk-models
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    tmpfs:
      - /app/tmp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health/loan-processing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    
    restart: unless-stopped
    
    labels:
      - "com.enterprise.banking.service=loan-service"
      - "com.enterprise.banking.compliance=Basel-III,Financial-Calculations"
      - "com.enterprise.banking.security-level=high"

  payment-service:
    build:
      context: .
      dockerfile: Dockerfile.payment-service
      target: production
    container_name: banking-payment-service
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/banking
      SPRING_DATASOURCE_USERNAME: banking_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Service configuration
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: production,docker
      
      # PCI DSS compliance
      PCI_DSS_COMPLIANCE: strict
      PAYMENT_CARD_ENCRYPTION: AES-256
      PAYMENT_AUDIT_TRAIL: comprehensive
      REAL_TIME_FRAUD_DETECTION: "true"
      PAYMENT_TOKENIZATION: "true"
      
      # Real-time payment processing
      PAYMENT_PROCESSING_MODE: real-time
      PAYMENT_TIMEOUT_MS: 5000
      PAYMENT_RETRY_ATTEMPTS: 3
      CONCURRENT_PAYMENT_THREADS: 20
      
      # AML settings
      AML_SCREENING_ENABLED: "true"
      AML_TRANSACTION_MONITORING: real-time
      AML_COMPLIANCE_CHECKS: strict
    
    networks:
      - banking-network
      - banking-internal
    
    ports:
      - "8083:8080"
      - "8093:8081"
    
    volumes:
      - banking-logs:/app/logs
      - banking-audit:/app/payment-vault
      - ./data/encryption-keys:/app/encryption-keys
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    tmpfs:
      - /app/tmp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health/payment-processing"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 90s
    
    restart: unless-stopped
    
    labels:
      - "com.enterprise.banking.service=payment-service"
      - "com.enterprise.banking.compliance=PCI-DSS-v4.0,Real-time-Payments"
      - "com.enterprise.banking.security-level=critical"

  party-service:
    build:
      context: .
      dockerfile: Dockerfile.party-service
      target: production
    container_name: banking-party-service
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/banking
      SPRING_DATASOURCE_USERNAME: banking_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Service configuration
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: production,docker
      
      # GDPR compliance
      GDPR_COMPLIANCE: strict
      DATA_SUBJECT_RIGHTS: "true"
      RIGHT_TO_BE_FORGOTTEN: "true"
      DATA_PORTABILITY: "true"
      CONSENT_MANAGEMENT: "true"
      
      # Data sovereignty
      DATA_SOVEREIGNTY_ENABLED: "true"
      DATA_RESIDENCY_COMPLIANCE: strict
      CROSS_BORDER_DATA_TRANSFER: controlled
      
      # Privacy settings
      PRIVACY_IMPACT_ASSESSMENT: "true"
      DATA_PROTECTION_OFFICER_ALERTS: "true"
      LAWFUL_BASIS_TRACKING: "true"
    
    networks:
      - banking-network
      - banking-internal
    
    ports:
      - "8084:8080"
      - "8094:8081"
    
    volumes:
      - banking-logs:/app/logs
      - banking-audit:/app/party-vault
      - ./data/consent-management:/app/consent-management
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    tmpfs:
      - /app/tmp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health/party-data-compliance"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    
    restart: unless-stopped
    
    labels:
      - "com.enterprise.banking.service=party-service"
      - "com.enterprise.banking.compliance=GDPR,Data-Sovereignty"
      - "com.enterprise.banking.security-level=high"

  # ==============================================
  # Monitoring and Security
  # ==============================================

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: banking-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    networks:
      - banking-network
    ports:
      - "9090:9090"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    container_name: banking-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
    volumes:
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./data/grafana:/var/lib/grafana
    networks:
      - banking-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

# Security and compliance configurations
x-banking-security: &banking-security
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp
  restart: unless-stopped