# Performance Test Configuration
# Enterprise Banking Platform - Performance Testing Profile

# Server Configuration
server.port=8080
management.server.port=8081

# Database Configuration for Performance Testing
spring.datasource.url=jdbc:postgresql://localhost:5432/banking_platform_perf_test
spring.datasource.username=banking_user
spring.datasource.password=banking_password
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection Pool Configuration
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=50
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Flyway Configuration
spring.flyway.enabled=false

# Redis Configuration for Caching
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.password=
spring.redis.database=1
spring.redis.jedis.pool.max-active=20
spring.redis.jedis.pool.max-wait=-1ms
spring.redis.jedis.pool.max-idle=10
spring.redis.jedis.pool.min-idle=5

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=banking-platform-perf-test
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.retries=3

# Actuator Configuration for Monitoring
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true

# Logging Configuration
logging.level.com.bank=INFO
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=INFO
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Performance Test Specific Configuration
performance.test.enabled=true
performance.test.warm-up-requests=100
performance.test.max-concurrent-users=100
performance.test.test-duration-seconds=300
performance.test.ramp-up-time-seconds=30

# Load Test Configuration
load.test.payment.enabled=true
load.test.customer.enabled=true
load.test.loan.enabled=true
load.test.concurrent-users=50
load.test.duration-minutes=5

# Stress Test Configuration
stress.test.enabled=true
stress.test.start-users=10
stress.test.max-users=500
stress.test.increment-step=10
stress.test.step-duration-seconds=30

# Database Performance Test Configuration
db.performance.test.enabled=true
db.performance.test.connection-pool-size=30
db.performance.test.query-timeout-seconds=30
db.performance.test.transaction-timeout-seconds=60

# Resource Monitoring Configuration
resource.monitoring.enabled=true
resource.monitoring.cpu-threshold=80.0
resource.monitoring.memory-threshold=80.0
resource.monitoring.disk-threshold=90.0

# External Service Configuration (Test Environment)
# Note: These URLs should point to actual test services in staging/production
external.fraud-detection.url=${FRAUD_DETECTION_URL:http://localhost:9090/fraud-detection}
external.compliance.url=${COMPLIANCE_URL:http://localhost:9091/compliance}
external.payment-gateway.url=${PAYMENT_GATEWAY_URL:http://localhost:9092/payment-gateway}
external.credit-bureau.url=${CREDIT_BUREAU_URL:http://localhost:9093/credit-bureau}

# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.fraud-detection.sliding-window-size=10
resilience4j.circuitbreaker.instances.fraud-detection.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.fraud-detection.wait-duration-in-open-state=30s

# Rate Limiting Configuration
resilience4j.ratelimiter.instances.payment-processing.limit-for-period=100
resilience4j.ratelimiter.instances.payment-processing.limit-refresh-period=1s
resilience4j.ratelimiter.instances.payment-processing.timeout-duration=5s

# Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=600000
spring.cache.redis.cache-null-values=false

# Security Configuration for Testing
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/auth/realms/banking
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/auth/realms/banking/protocol/openid_connect/certs

# Test Data Configuration
test.data.customers.count=10000
test.data.loans.count=5000
test.data.payments.count=20000
test.data.cleanup.enabled=true

# Performance Thresholds
performance.thresholds.response-time.p95=1000
performance.thresholds.response-time.p99=2000
performance.thresholds.error-rate.max=0.01
performance.thresholds.throughput.min=10.0

# JVM Configuration Hints
# -Xmx4g -Xms2g -XX:+UseG1GC -XX:+UseStringDeduplication
# -XX:+PrintGCDetails -XX:+PrintGCTimeStamps
# -Dspring.profiles.active=performance-test