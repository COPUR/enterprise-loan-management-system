version: '3.8'

# Enterprise Banking System - End-to-End Testing with Docker Compose
# Comprehensive testing environment with all dependencies

services:
  # ============================================================================
  # Application Under Test
  # ============================================================================
  banking-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: banking-app-test
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: test,docker,testcontainers
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres-test:5432/banking_test
      DATABASE_USERNAME: banking_test
      DATABASE_PASSWORD: banking_test_password
      DATABASE_DRIVER: org.postgresql.Driver
      
      # JPA Configuration
      JPA_DDL_AUTO: create-drop
      JPA_SHOW_SQL: true
      JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      
      # Redis Configuration
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DATABASE: 0
      
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka-test:9092
      KAFKA_AUTO_OFFSET_RESET: earliest
      
      # Eureka Configuration
      EUREKA_URL: http://eureka-test:8761/eureka
      EUREKA_INSTANCE_PREFER_IP: true
      
      # Security Configuration
      BANKING_COMPLIANCE_STRICT: true
      FAPI_ENABLED: true
      AUDIT_ENABLED: true
      KYC_REQUIRED: true
      
      # Testing Configuration
      TESTCONTAINERS_REUSE_ENABLE: true
      TEST_MODE: true
      E2E_TEST_MODE: true
      
      # Logging Configuration
      LOG_LEVEL_ROOT: INFO
      LOG_LEVEL_APP: DEBUG
      LOG_LEVEL_HIBERNATE: INFO
      LOG_LEVEL_SECURITY: DEBUG
      
      # JVM Configuration
      JAVA_OPTS: >-
        -XX:+UseG1GC
        -Xmx2g
        -XX:+UseStringDeduplication
        -Djava.security.egd=file:/dev/./urandom
        -Dspring.profiles.active=test,docker
    volumes:
      - ./docker/test-scripts:/app/test-scripts:ro
      - test-logs:/app/logs
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - banking-test-network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ============================================================================
  # Database Services
  # ============================================================================
  postgres-test:
    image: postgres:15-alpine
    container_name: postgres-test
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: banking_test
      POSTGRES_USER: banking_test
      POSTGRES_PASSWORD: banking_test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
      - ./docker/postgres/init-test.sql:/docker-entrypoint-initdb.d/init-test.sql:ro
    networks:
      - banking-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U banking_test -d banking_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ============================================================================
  # Cache Services
  # ============================================================================
  redis-test:
    image: redis:7-alpine
    container_name: redis-test
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-test-data:/data
    networks:
      - banking-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # ============================================================================
  # Message Broker Services
  # ============================================================================
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-test-data:/var/lib/zookeeper/data
      - zookeeper-test-logs:/var/lib/zookeeper/log
    networks:
      - banking-test-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 3s
      retries: 3

  kafka-test:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-test
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-test:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 24
    volumes:
      - kafka-test-data:/var/lib/kafka/data
    depends_on:
      zookeeper-test:
        condition: service_healthy
    networks:
      - banking-test-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ============================================================================
  # Service Discovery (Optional for testing)
  # ============================================================================
  eureka-test:
    image: springcloud/eureka:latest
    container_name: eureka-test
    ports:
      - "8761:8761"
    environment:
      EUREKA_INSTANCE_HOSTNAME: eureka-test
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: false
      EUREKA_CLIENT_FETCH_REGISTRY: false
    networks:
      - banking-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # Testing and Monitoring Services
  # ============================================================================
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: e2e-testing
    container_name: test-runner
    environment:
      TEST_TARGET_URL: http://banking-app:8080
      DATABASE_URL: jdbc:postgresql://postgres-test:5432/banking_test
      DATABASE_USERNAME: banking_test
      DATABASE_PASSWORD: banking_test_password
      REDIS_HOST: redis-test
      KAFKA_BOOTSTRAP_SERVERS: kafka-test:9092
    volumes:
      - ./docker/test-scripts:/app/test-scripts:ro
      - test-results:/app/test-results
      - test-logs:/app/logs
    depends_on:
      banking-app:
        condition: service_healthy
    networks:
      - banking-test-network
    profiles:
      - e2e-testing

  # Test database for isolation
  postgres-integration:
    image: postgres:15-alpine
    container_name: postgres-integration
    environment:
      POSTGRES_DB: banking_integration
      POSTGRES_USER: banking_integration
      POSTGRES_PASSWORD: integration_password
    volumes:
      - postgres-integration-data:/var/lib/postgresql/data
    networks:
      - banking-test-network
    profiles:
      - integration-testing

  # ============================================================================
  # Monitoring and Observability (for testing)
  # ============================================================================
  prometheus-test:
    image: prom/prometheus:latest
    container_name: prometheus-test
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus-test.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-test-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - banking-test-network
    profiles:
      - monitoring

  grafana-test:
    image: grafana/grafana:latest
    container_name: grafana-test
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana-test-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus-test
    networks:
      - banking-test-network
    profiles:
      - monitoring

# ============================================================================
# Network Configuration
# ============================================================================
networks:
  banking-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volume Configuration
# ============================================================================
volumes:
  postgres-test-data:
    driver: local
  postgres-integration-data:
    driver: local
  redis-test-data:
    driver: local
  kafka-test-data:
    driver: local
  zookeeper-test-data:
    driver: local
  zookeeper-test-logs:
    driver: local
  prometheus-test-data:
    driver: local
  grafana-test-data:
    driver: local
  test-results:
    driver: local
  test-logs:
    driver: local