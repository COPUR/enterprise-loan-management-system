input {
  # Application logs from Java application
  file {
    path => "/usr/share/logstash/logs/application.log"
    start_position => "beginning"
    codec => "json"
    tags => ["application"]
  }
  
  # Banking compliance logs
  file {
    path => "/usr/share/logstash/logs/banking-compliance.log"
    start_position => "beginning"
    codec => "json"
    tags => ["compliance", "banking"]
  }
  
  # Security audit logs
  file {
    path => "/usr/share/logstash/logs/security-audit.log"
    start_position => "beginning"
    codec => "json"
    tags => ["security", "audit"]
  }
  
  # FAPI security logs
  file {
    path => "/usr/share/logstash/logs/fapi-security.log"
    start_position => "beginning"
    codec => "json"
    tags => ["fapi", "security"]
  }
  
  # PostgreSQL logs
  file {
    path => "/usr/share/logstash/logs/postgresql.log"
    start_position => "beginning"
    tags => ["database", "postgresql"]
  }
  
  # Kafka logs
  file {
    path => "/usr/share/logstash/logs/kafka.log"
    start_position => "beginning"
    tags => ["messaging", "kafka"]
  }
  
  # Beats input for system metrics
  beats {
    port => 5044
  }
}

filter {
  # Parse Java application logs
  if "application" in [tags] {
    json {
      source => "message"
    }
    
    # Extract loan management specific fields
    if [logger_name] =~ /loan|customer|payment/ {
      mutate {
        add_tag => ["business_operation"]
      }
    }
    
    # Parse log levels
    if [level] == "ERROR" {
      mutate {
        add_tag => ["error"]
      }
    }
    
    # Extract business metrics
    if [message] =~ /loan_created|payment_processed|customer_credit_check/ {
      grok {
        match => { "message" => "%{WORD:business_event}.*amount=%{NUMBER:amount:float}.*customer_id=%{NUMBER:customer_id}" }
      }
      mutate {
        add_tag => ["business_metric"]
      }
    }
  }
  
  # Parse compliance logs
  if "compliance" in [tags] {
    json {
      source => "message"
    }
    
    # Banking compliance specific parsing
    if [compliance_type] == "banking_standards" {
      mutate {
        add_field => { "compliance_category" => "banking" }
      }
    }
    
    # TDD coverage tracking
    if [test_coverage] {
      ruby {
        code => "
          coverage = event.get('test_coverage').to_f
          if coverage >= 75
            event.set('compliance_status', 'compliant')
          else
            event.set('compliance_status', 'non_compliant')
          end
        "
      }
    }
  }
  
  # Parse security logs
  if "security" in [tags] {
    json {
      source => "message"
    }
    
    # FAPI security events
    if "fapi" in [tags] {
      if [event_type] == "authentication_failure" {
        mutate {
          add_tag => ["security_incident"]
        }
      }
      
      if [event_type] == "rate_limit_exceeded" {
        mutate {
          add_tag => ["rate_limiting"]
        }
      }
    }
    
    # Extract IP addresses for security analysis
    if [client_ip] {
      geoip {
        source => "client_ip"
        target => "geoip"
      }
    }
  }
  
  # Parse PostgreSQL logs
  if "database" in [tags] {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:process_id}\] %{WORD:log_level}: %{GREEDYDATA:sql_message}" }
    }
    
    # Extract slow queries
    if [sql_message] =~ /duration:/ {
      grok {
        match => { "sql_message" => "duration: %{NUMBER:query_duration:float} ms" }
      }
      
      if [query_duration] and [query_duration] > 1000 {
        mutate {
          add_tag => ["slow_query"]
        }
      }
    }
  }
  
  # Add timestamp parsing
  date {
    match => [ "timestamp", "ISO8601" ]
  }
  
  # Add environment information
  mutate {
    add_field => { "environment" => "production" }
    add_field => { "system" => "enterprise_loan_management" }
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[tags][0]}-%{+YYYY.MM.dd}"
    template_name => "banking_logs"
    template_pattern => "banking-*"
    template => "/usr/share/logstash/templates/banking-template.json"
  }
  
  # Banking compliance specific index
  if "compliance" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "banking-compliance-%{+YYYY.MM.dd}"
    }
  }
  
  # Security incidents to dedicated index
  if "security_incident" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "security-incidents-%{+YYYY.MM.dd}"
    }
  }
  
  # Business metrics to dedicated index
  if "business_metric" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "business-metrics-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (can be disabled in production)
  stdout {
    codec => rubydebug
  }
}