{
  "info": {
    "name": "Standalone API Tests - No Application Required",
    "description": "Basic API tests that can run without the full application running",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "üîó Connectivity Tests",
      "item": [
        {
          "name": "Test Port 8080 Connectivity",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Port 8080 is accessible', function () {",
                  "    // Any response means the port is accessible",
                  "    pm.expect(pm.response.code).to.exist;",
                  "    console.log('Response code:', pm.response.code);",
                  "    console.log('Response text:', pm.response.text());",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Health Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/actuator/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": ["actuator", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health endpoint exists', function () {",
                  "    // Accept any response - just checking connectivity",
                  "    pm.expect(pm.response.code).to.exist;",
                  "    console.log('Health endpoint response:', pm.response.code);",
                  "});",
                  "",
                  "pm.test('No connection errors', function () {",
                  "    // Check that we didn't get connection refused",
                  "    pm.expect(pm.response.code).to.not.eql(undefined);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test API Base Path",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/api",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": ["api"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('API base path accessible', function () {",
                  "    pm.expect(pm.response.code).to.exist;",
                  "    console.log('API base response:', pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response indicates API structure', function () {",
                  "    // Any response means the path is being handled",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 401, 403, 500]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä API Documentation Tests",
      "item": [
        {
          "name": "Test API Documentation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/swagger-ui/index.html",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": ["swagger-ui", "index.html"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Swagger UI accessible', function () {",
                  "    pm.expect(pm.response.code).to.exist;",
                  "    console.log('Swagger UI response:', pm.response.code);",
                  "});",
                  "",
                  "pm.test('API documentation available', function () {",
                  "    // Check if swagger is available",
                  "    if (pm.response.code === 200) {",
                  "        pm.expect(pm.response.text()).to.include('swagger');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test OpenAPI Spec",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/v3/api-docs",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": ["v3", "api-docs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('OpenAPI spec accessible', function () {",
                  "    pm.expect(pm.response.code).to.exist;",
                  "    console.log('OpenAPI spec response:', pm.response.code);",
                  "});",
                  "",
                  "pm.test('OpenAPI spec is valid JSON', function () {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.be.json;",
                  "        var spec = pm.response.json();",
                  "        pm.expect(spec.openapi).to.exist;",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üß™ Mock API Tests",
      "item": [
        {
          "name": "Mock Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://httpbin.org/status/200",
              "protocol": "https",
              "host": ["httpbin.org"],
              "path": ["status", "200"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Mock service responds correctly', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Network connectivity is working', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Mock JSON Response",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://jsonplaceholder.typicode.com/posts/1",
              "protocol": "https",
              "host": ["jsonplaceholder.typicode.com"],
              "path": ["posts", "1"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('JSON response is valid', function () {",
                  "    pm.response.to.be.json;",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(1);",
                  "});",
                  "",
                  "pm.test('Mock API structure works', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.exist;",
                  "    pm.expect(jsonData.body).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîç API Structure Validation",
      "item": [
        {
          "name": "Validate Loan API Structure",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/api/v1/loans",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": ["api", "v1", "loans"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Loan API endpoint structure exists', function () {",
                  "    // Test that the endpoint exists even if auth is required",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403, 404, 500]);",
                  "    console.log('Loan API response code:', pm.response.code);",
                  "});",
                  "",
                  "pm.test('API versioning is correct', function () {",
                  "    // The fact that we get a response means the v1 path is handled",
                  "    pm.expect(pm.response.code).to.not.be.undefined;",
                  "});",
                  "",
                  "pm.test('Response indicates proper API structure', function () {",
                  "    // 404 would mean the path doesn't exist",
                  "    // 401/403 means the path exists but requires auth",
                  "    // 500 means the path exists but has server issues",
                  "    // 200 means the path works",
                  "    if (pm.response.code === 404) {",
                  "        console.log('API path may not be implemented yet');",
                  "    } else if (pm.response.code === 401 || pm.response.code === 403) {",
                  "        console.log('API path exists but requires authentication');",
                  "    } else if (pm.response.code === 500) {",
                  "        console.log('API path exists but has server issues');",
                  "    } else if (pm.response.code === 200) {",
                  "        console.log('API path is working correctly');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test API Error Handling",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid\": \"request\"\n}"
            },
            "url": {
              "raw": "http://localhost:8080/api/v1/loans",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": ["api", "v1", "loans"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('API error handling works', function () {",
                  "    // Test that the API handles invalid requests properly",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401, 403, 404, 422, 500]);",
                  "    console.log('Error handling response code:', pm.response.code);",
                  "});",
                  "",
                  "pm.test('Error response is structured', function () {",
                  "    // Check if error responses are properly formatted",
                  "    if (pm.response.code >= 400 && pm.response.code < 500) {",
                  "        try {",
                  "            var errorData = pm.response.json();",
                  "            console.log('Error response structure:', JSON.stringify(errorData, null, 2));",
                  "        } catch (e) {",
                  "            console.log('Error response is not JSON:', pm.response.text());",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}