# ===============================================================
# ENTERPRISE BANKING SYSTEM - REGRESSION TEST CONTAINER
# ===============================================================
# Document Information:
# - Author: Senior QA Engineer & Test Automation Architect
# - Version: 1.0.0
# - Last Updated: December 2024
# - Classification: Internal - Test Infrastructure
# - Purpose: Comprehensive regression testing environment
# ===============================================================

FROM eclipse-temurin:21-jdk-alpine AS test-base

# Metadata
LABEL maintainer="Senior QA Engineer <qa-team@banking.example.com>"
LABEL description="Enterprise Banking System - Regression Test Runner"
LABEL version="1.0.0"

# Install required system packages
RUN apk add --no-cache \
    curl \
    wget \
    bash \
    git \
    postgresql-client \
    redis \
    jq \
    python3 \
    py3-pip \
    maven \
    nodejs \
    npm

# Install test utilities
RUN pip3 install --no-cache-dir \
    requests \
    pytest \
    pytest-html \
    allure-pytest \
    selenium \
    beautifulsoup4

# Install Node.js test dependencies
RUN npm install -g \
    newman \
    newman-reporter-htmlextra \
    k6 \
    artillery

# Set working directory
WORKDIR /app

# Copy test dependencies
COPY gradle/wrapper gradle/wrapper
COPY gradlew .
COPY settings.gradle .
COPY build.gradle .

# Copy test sources
COPY src/test src/test
COPY scripts/test scripts/test

# Grant execution permissions
RUN chmod +x gradlew
RUN chmod +x scripts/test/*.sh

# Create test results directory
RUN mkdir -p /test-results

# ===============================================================
# REGRESSION TEST STAGE
# ===============================================================
FROM test-base AS regression-runner

# Install additional regression test dependencies
COPY docker/testing/test-dependencies.gradle /app/test-dependencies.gradle
RUN ./gradlew -b test-dependencies.gradle build --no-daemon

# Copy regression test configurations
COPY src/test/resources/application-regression-test.yml src/test/resources/
COPY scripts/test/regression-test-suite.sh scripts/test/

# Set environment variables for regression testing
ENV SPRING_PROFILES_ACTIVE=regression,test,docker
ENV TEST_TIMEOUT=1800
ENV PARALLEL_TESTS=true
ENV REGRESSION_REPORT_FORMAT=html,json,junit

# Health check for test environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# Default command runs comprehensive regression tests
CMD ["./scripts/test/regression-test-suite.sh"]

# ===============================================================
# INTEGRATION TEST STAGE
# ===============================================================
FROM test-base AS integration-runner

# Copy integration test specific configurations
COPY src/test/resources/application-integration-test.yml src/test/resources/
COPY scripts/test/integration-test-suite.sh scripts/test/

# Install integration test specific tools
RUN apk add --no-cache \
    docker-cli \
    docker-compose

# Environment for integration tests
ENV SPRING_PROFILES_ACTIVE=integration,test,docker
ENV INTEGRATION_TEST_TIMEOUT=600
ENV DATABASE_MIGRATION_ENABLED=true

CMD ["./scripts/test/integration-test-suite.sh"]

# ===============================================================
# PERFORMANCE TEST STAGE
# ===============================================================
FROM test-base AS performance-runner

# Install performance testing tools
RUN wget -O /usr/local/bin/k6 https://github.com/grafana/k6/releases/latest/download/k6-linux-amd64 && \
    chmod +x /usr/local/bin/k6

# Copy performance test scripts
COPY scripts/performance scripts/performance
COPY scripts/test/performance-test-suite.sh scripts/test/

# Environment for performance tests
ENV PERFORMANCE_TEST_DURATION=300
ENV PERFORMANCE_VUS=50
ENV PERFORMANCE_RPS=100

CMD ["./scripts/test/performance-test-suite.sh"]

# ===============================================================
# SECURITY TEST STAGE
# ===============================================================
FROM test-base AS security-runner

# Install security testing tools
RUN apk add --no-cache \
    nmap \
    openssl

# Install OWASP ZAP client
RUN pip3 install --no-cache-dir \
    python-owasp-zap-v2.4 \
    bandit \
    safety

# Copy security test configurations
COPY scripts/test/security-test-suite.sh scripts/test/
COPY docker/testing/security-test-config.json /app/

# Environment for security tests
ENV SECURITY_SCAN_TIMEOUT=900
ENV ZAP_BASELINE_ENABLED=true
ENV VULNERABILITY_SCAN_ENABLED=true

CMD ["./scripts/test/security-test-suite.sh"]