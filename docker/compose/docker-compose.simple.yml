version: '3.8'

# Simple Enterprise Loan Management System - Core Services Only
# Focused on core banking functionality without complex authentication

services:
  # === DATABASE ===
  postgres:
    image: postgres:15-alpine
    container_name: banking-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-banking_system}
      POSTGRES_USER: ${DATABASE_USER:-banking_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-banking_secure_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-banking_user} -d ${DATABASE_NAME:-banking_system}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - banking-network

  # === CACHE ===
  redis:
    image: redis:7-alpine
    container_name: banking-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-banking_redis_pass} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-banking_redis_pass}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - banking-network

  # === BANKING APPLICATION ===
  banking-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-loan-management
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: docker,simple
      SERVER_PORT: 8080
      SPRING_CLOUD_CONFIG_ENABLED: false
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_system}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_secure_pass}
      
      # Cache Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_redis_pass}
      
      # Security Configuration (Basic)
      SECURITY_ENABLED: false
      JWT_SECRET: ${JWT_SECRET}
      
      # Banking Configuration
      LOAN_MAX_AMOUNT: ${LOAN_MAX_AMOUNT:-5000000}
      TRANSACTION_DAILY_LIMIT: ${TRANSACTION_DAILY_LIMIT:-50000}
      
      # Application Metadata
      APP_NAME: "Enterprise Loan Management System"
      APP_VERSION: "1.0.0"
      
      # JVM Configuration
      JAVA_OPTS: >-
        -server
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -XX:G1HeapRegionSize=16m
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=75.0
        -XX:InitialRAMPercentage=50.0
        -XX:+ExitOnOutOfMemoryError
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/app/logs/heapdump.hprof
        -Djava.security.egd=file:/dev/./urandom
        -Dspring.profiles.active=production,docker
        -Dfile.encoding=UTF-8
        -Duser.timezone=UTC
    ports:
      - "8090:8080"
    volumes:
      - banking_logs:/app/logs
      - banking_tmp:/app/tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-network

# === VOLUMES ===
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  banking_logs:
    driver: local
  banking_tmp:
    driver: local

# === NETWORKS ===
networks:
  banking-network:
    driver: bridge
    name: banking-network