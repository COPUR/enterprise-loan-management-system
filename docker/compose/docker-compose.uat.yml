# Docker Compose for UAT Environment
# Enterprise Loan Management System - User Acceptance Testing
# Hardened configuration with security scanning and monitoring

version: '3.8'

# Network configuration for UAT isolation
networks:
  uat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: uat-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# Volumes for data persistence and security
volumes:
  uat-postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uat/postgres
  uat-redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uat/redis
  uat-app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/uat

services:
  # =============================================================================
  # Database Service - PostgreSQL with Security Hardening
  # =============================================================================
  uat-database:
    image: postgres:16.1-alpine
    container_name: uat-banking-db
    restart: unless-stopped
    
    # Security: Non-root user
    user: "postgres:postgres"
    
    # Security: Read-only root filesystem with exceptions
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    
    environment:
      POSTGRES_DB: banking_uat
      POSTGRES_USER: banking_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    
    # Security: Secrets management
    secrets:
      - db_password
    
    volumes:
      - uat-postgres-data:/var/lib/postgresql/data
      - ./scripts/init-uat-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - uat-network
    
    # Security: Expose only to internal network
    expose:
      - "5432"
    
    # Health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U banking_user -d banking_uat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security: Capabilities and security options
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    security_opt:
      - no-new-privileges:true
    
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_duration=on
      -c log_lock_waits=on
      -c log_min_duration_statement=1000
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key

  # =============================================================================
  # Cache Service - Redis with Security Configuration
  # =============================================================================
  uat-redis:
    image: redis:7.2-alpine
    container_name: uat-banking-cache
    restart: unless-stopped
    
    # Security: Non-root user
    user: "999:999"
    
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/redis
    
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    
    # Security: Secrets management
    secrets:
      - redis_password
    
    volumes:
      - uat-redis-data:/data
      - ./config/redis-uat.conf:/usr/local/etc/redis/redis.conf:ro
    
    networks:
      - uat-network
    
    # Security: Expose only to internal network
    expose:
      - "6379"
    
    # Health check for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security: Capabilities and security options
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass $$(cat /run/secrets/redis_password)
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb

  # =============================================================================
  # Application Service - Enterprise Loan Management System (Hardened)
  # =============================================================================
  uat-banking-app:
    build:
      context: .
      dockerfile: Dockerfile.uat
      args:
        - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        - VCS_REF=$(git rev-parse --short HEAD)
        - VERSION=1.0.0-uat
    
    image: enterprise-loan-management:uat-hardened
    container_name: uat-banking-app
    restart: unless-stopped
    
    # Security: Read-only root filesystem with exceptions
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    
    environment:
      # UAT Environment Configuration
      SPRING_PROFILES_ACTIVE: uat
      SERVER_PORT: 8080
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://uat-database:5432/banking_uat?sslmode=require
      DATABASE_USERNAME: banking_user
      DATABASE_PASSWORD_FILE: /run/secrets/db_password
      
      # Redis Configuration
      REDIS_HOST: uat-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
      REDIS_DATABASE: 0
      
      # Security Configuration
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_ALGORITHM: RS256
      BCRYPT_STRENGTH: 14
      
      # FAPI Compliance
      FAPI_COMPLIANCE_ENABLED: "true"
      FAPI_SECURITY_LEVEL: "advanced"
      
      # Rate Limiting
      RATE_LIMIT_RPM: 60
      RATE_LIMIT_BURST: 10
      
      # Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when-authorized
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
      
      # Logging
      LOGGING_LEVEL_COM_BANK_LOANMANAGEMENT: INFO
      LOGGING_LEVEL_SECURITY: WARN
      LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
      
      # Java Security Options
      JAVA_OPTS: >-
        -server
        -XX:+UseG1GC
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=75.0
        -XX:+ExitOnOutOfMemoryError
        -Djava.security.egd=file:/dev/./urandom
        -Djava.awt.headless=true
        -Dfile.encoding=UTF-8
        -Duser.timezone=UTC
        -Djdk.tls.rejectClientInitiatedRenegotiation=true
        -Djdk.tls.ephemeralDHKeySize=2048
        -Dcom.sun.management.jmxremote=false
        -Dcom.sun.jndi.rmi.object.trustURLCodebase=false
        -Dcom.sun.jndi.cosnaming.object.trustURLCodebase=false
    
    # Security: Secrets management
    secrets:
      - db_password
      - redis_password
      - jwt_secret
    
    volumes:
      - uat-app-logs:/app/logs
      - ./config/application-uat.yml:/app/config/application-uat.yml:ro
    
    networks:
      - uat-network
    
    ports:
      - "8080:8080"
    
    depends_on:
      uat-database:
        condition: service_healthy
      uat-redis:
        condition: service_healthy
    
    # Health check for application
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    # Security: Capabilities and security options
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Monitoring Service - Prometheus for UAT Metrics
  # =============================================================================
  uat-prometheus:
    image: prom/prometheus:v2.47.0
    container_name: uat-prometheus
    restart: unless-stopped
    
    # Security: Non-root user
    user: "65534:65534"
    
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
    
    volumes:
      - ./monitoring/prometheus-uat.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/uat/prometheus:/prometheus
    
    networks:
      - uat-network
    
    ports:
      - "9090:9090"
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    # Security: Capabilities and security options
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

# =============================================================================
# Secrets Configuration for UAT Environment
# =============================================================================
secrets:
  db_password:
    file: ./secrets/uat/db_password.txt
  redis_password:
    file: ./secrets/uat/redis_password.txt
  jwt_secret:
    file: ./secrets/uat/jwt_secret.txt

# =============================================================================
# Security and Compliance Summary:
# 1. All services run as non-root users
# 2. Read-only root filesystems where possible
# 3. Minimal capabilities (drop ALL, add only necessary)
# 4. Resource limits to prevent DoS
# 5. Network isolation with custom bridge
# 6. Secrets management for sensitive data
# 7. Health checks for all services
# 8. Security options (no-new-privileges)
# 9. SSL/TLS enabled for database connections
# 10. FAPI compliance and banking security standards
# =============================================================================