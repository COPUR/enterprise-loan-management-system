# Simplified Enhanced Enterprise Banking System Testing
# Docker Compose configuration for end-to-end testing
version: '3.8'

services:
  # === DATABASE TIER ===
  postgres:
    image: postgres:16-alpine
    container_name: banking-postgres-simple
    environment:
      POSTGRES_DB: banking_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d banking_system"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - banking-simple

  # === CACHE TIER ===
  redis:
    image: redis:7-alpine
    container_name: banking-redis-simple
    command: redis-server --requirepass redis123
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - banking-simple

  # === ENHANCED BANKING APPLICATION ===
  banking-app:
    image: banking-system:enhanced-runtime
    container_name: banking-app-simple
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: development,docker
      SERVER_PORT: 8080
      MANAGEMENT_PORT: 8081
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres:5432/banking_system
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      
      # Cache Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      
      # Banking Compliance
      FAPI_ENABLED: "true"
      BANKING_SECURITY_STRICT: "false"
      ISLAMIC_BANKING_ENABLED: "true"
      BIAN_COMPLIANCE_ENABLED: "true"
      AUDIT_ENABLED: "true"
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET_TEST:-test-jwt-secret-change-for-production}
      
      # Skip validation script
      SKIP_PRESTART_VALIDATION: "true"
    ports:
      - "8080:8080"
      - "8081:8081"
    command: ["java", "-jar", "app.jar"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - banking-simple

  # === SERVICE MESH SIMULATION (Envoy) ===
  envoy-proxy:
    image: envoyproxy/envoy:v1.29-latest
    container_name: banking-envoy-simple
    ports:
      - "9901:9901"  # Admin interface
      - "10000:10000"  # Listener port
    volumes:
      - ./config/envoy-test.yaml:/etc/envoy/envoy.yaml:ro
    command: ["/usr/local/bin/envoy", "-c", "/etc/envoy/envoy.yaml", "--service-cluster", "banking-proxy"]
    depends_on:
      - banking-app
    networks:
      - banking-simple

  # === MONITORING ===
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: banking-prometheus-simple
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-test.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - banking-app
    networks:
      - banking-simple

  # === TESTING UTILITIES ===
  curl-test:
    image: curlimages/curl:8.5.0
    container_name: banking-curl-simple
    command: sleep infinity
    networks:
      - banking-simple

networks:
  banking-simple:
    driver: bridge
    name: banking-simple-network