version: '3.8'

services:
  # OpenTelemetry Collector - Industry Standard for Observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
      - ./logs:/var/log/applications:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check extension
    networks:
      - observability-network
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=loan-management-otel-collector,service.version=1.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:13133/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Fluent Bit - Industry Standard Log Processor
  fluent-bit:
    image: fluent/fluent-bit:2.2.1
    container_name: fluent-bit
    volumes:
      - ./observability/fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./observability/fluentbit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - ./logs:/var/log/applications:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "24224:24224"
      - "2020:2020"
    networks:
      - observability-network
    depends_on:
      otel-collector:
        condition: service_healthy
    environment:
      - FLB_LOG_LEVEL=info
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:2020/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch with Security and PCI-DSS Configuration
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: elasticsearch-secure
    environment:
      - node.name=es-primary
      - cluster.name=loan-management-secure
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
      # Security Settings for PCI-DSS
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme123!}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
      - ./observability/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
    networks:
      - observability-network
    healthcheck:
      test: ["CMD-SHELL", "curl -k -u elastic:${ELASTIC_PASSWORD:-changeme123!} https://localhost:9200/_cluster/health || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5

  # Jaeger for Distributed Tracing
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # jaeger.thrift over HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=https://elasticsearch-secure:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=${ELASTIC_PASSWORD:-changeme123!}
      - ES_TLS_ENABLED=true
      - ES_TLS_SKIP_HOST_VERIFY=true
    networks:
      - observability-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Prometheus with Enhanced Security
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus-secure
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus-secure.yml:/etc/prometheus/prometheus.yml:ro
      - ./observability/prometheus/rules:/etc/prometheus/rules:ro
      - ./observability/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.listen-address=:9090'
      - '--web.external-url=http://localhost:9090'
    networks:
      - observability-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana with Enhanced Security
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana-secure
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/ssl/certs/grafana.crt
      - GF_SERVER_CERT_KEY=/etc/ssl/private/grafana.key
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_LOG_MODE=console file
      - GF_LOG_LEVEL=info
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./observability/ssl/grafana:/etc/ssl:ro
    networks:
      - observability-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -k -f https://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Log Event Store Service - PCI-DSS Compliant
  log-event-store:
    build:
      context: .
      dockerfile: observability/docker/Dockerfile.log-service
    container_name: log-event-store
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,pci-dss,${DATA_RESIDENCY:-us}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=log-event-store
      - ELASTICSEARCH_HOSTS=https://elasticsearch-secure:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-changeme123!}
      - DATABASE_URL=jdbc:postgresql://postgres-audit:5432/audit_logs
      - DATABASE_USERNAME=audit_user
      - DATABASE_PASSWORD=${AUDIT_DB_PASSWORD:-secure123!}
      - KAFKA_BOOTSTRAP_SERVERS=kafka-secure:9093
      - KAFKA_SECURITY_PROTOCOL=SASL_SSL
      - DATA_CLASSIFICATION_LEVEL=PCI-DSS
      - LOG_ENCRYPTION_ENABLED=true
      - AUDIT_TRAIL_ENABLED=true
    networks:
      - observability-network
      - default
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres-audit:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL for Audit Logs - PCI-DSS Compliant
  postgres-audit:
    image: postgres:16.1
    container_name: postgres-audit
    environment:
      POSTGRES_DB: audit_logs
      POSTGRES_USER: audit_user
      POSTGRES_PASSWORD: ${AUDIT_DB_PASSWORD:-secure123!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_audit_data:/var/lib/postgresql/data
      - ./observability/postgres/init-audit-db.sql:/docker-entrypoint-initdb.d/init-audit-db.sql:ro
      - ./observability/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5434:5432"
    networks:
      - observability-network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d audit_logs"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Log Caching with Security
  redis-logs:
    image: redis:7.2.4-alpine
    container_name: redis-logs
    ports:
      - "6380:6379"
    volumes:
      - redis_logs_data:/data
      - ./observability/redis/redis-secure.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-secure123!}
    networks:
      - observability-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD:-secure123!} ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka with Security for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper-secure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-secure:2888:3888
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - observability-network

  kafka-secure:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-secure
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-secure:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_SSL:SASL_SSL,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka-secure:9093
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka_ssl_key_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka_truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 2160  # 90 days for compliance
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1GB
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./observability/kafka/secrets:/etc/kafka/secrets:ro
    networks:
      - observability-network

  # Data Sovereignty Controller
  data-sovereignty-controller:
    build:
      context: .
      dockerfile: observability/docker/Dockerfile.sovereignty
    container_name: data-sovereignty-controller
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,${DATA_RESIDENCY:-us}
      - REGION=${DATA_RESIDENCY:-us}
      - COMPLIANCE_LEVEL=PCI-DSS-V4
      - GDPR_ENABLED=${GDPR_ENABLED:-false}
      - CCPA_ENABLED=${CCPA_ENABLED:-false}
    volumes:
      - ./observability/config/data-residency:/app/config:ro
    networks:
      - observability-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  elasticsearch_data:
    driver: local
  elasticsearch_certs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  postgres_audit_data:
    driver: local
  redis_logs_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

networks:
  observability-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1