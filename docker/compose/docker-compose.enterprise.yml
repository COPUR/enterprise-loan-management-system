# Enterprise Loan Management System - Full Architecture
# Complete enterprise setup with Keycloak, Istio, PostgreSQL, Redis, Kafka
# All architectural decisions implemented for production-ready deployment

version: '3.9'

networks:
  enterprise-banking:
    driver: bridge
    name: enterprise-banking-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_enterprise_data:
    driver: local
  keycloak_data:
    driver: local
  redis_enterprise_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  banking_enterprise_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # ===== INFRASTRUCTURE SERVICES =====
  
  # PostgreSQL Database - Primary Enterprise Database
  postgres-enterprise:
    image: postgres:15-alpine
    container_name: banking-postgres-enterprise
    environment:
      POSTGRES_DB: banking_enterprise
      POSTGRES_USER: banking_enterprise
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-enterprise_banking_pass_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5434:5432"
    volumes:
      - postgres_enterprise_data:/var/lib/postgresql/data
      - ./scripts/db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U banking_enterprise -d banking_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.10
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c wal_buffers=16MB
      -c checkpoint_completion_target=0.9
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis Cache - Enterprise Caching Layer
  redis-enterprise:
    image: redis:7-alpine
    container_name: banking-redis-enterprise
    command: >
      redis-server 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "6381:6379"
    volumes:
      - redis_enterprise_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.11

  # ===== SECURITY & IDENTITY =====
  
  # Keycloak - Enterprise Identity and Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: banking-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-enterprise:5432/banking_enterprise
      KC_DB_USERNAME: banking_enterprise
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-enterprise_banking_pass_2024}
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_PORT: 8080
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_FEATURES: token-exchange,admin-fine-grained-authz
    ports:
      - "8090:8080"
      - "8443:8443"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/realm-config.json:/opt/keycloak/data/import/realm-config.json
    command: start --optimized --import-realm
    depends_on:
      postgres-enterprise:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.20

  # ===== MESSAGE STREAMING =====
  
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: banking-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.30

  # Kafka Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: banking-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.31

  # ===== MONITORING & OBSERVABILITY =====
  
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: banking-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.40

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: banking-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.41

  # ===== ENTERPRISE BANKING APPLICATION =====
  
  # Banking Application - Main Service
  banking-app-enterprise:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        - BUILD_VERSION=1.0.0-enterprise
    image: enterprise-loan-system:enterprise
    container_name: banking-loan-management-enterprise
    depends_on:
      postgres-enterprise:
        condition: service_healthy
      redis-enterprise:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: enterprise,docker,oauth2
      SERVER_PORT: 8080
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres-enterprise:5432/banking_enterprise
      DATABASE_USERNAME: banking_enterprise
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-enterprise_banking_pass_2024}
      
      # Redis Configuration
      REDIS_HOST: redis-enterprise
      REDIS_PORT: 6379
      REDIS_DATABASE: 0
      REDIS_TIMEOUT: 5000
      
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: banking-enterprise
      KAFKA_AUTO_OFFSET_RESET: earliest
      
      # OAuth2 and Security Configuration
      KEYCLOAK_REALM: banking-enterprise
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_RESOURCE: banking-client
      KEYCLOAK_CREDENTIALS_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      
      # Spring Security OAuth2
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/banking-enterprise
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/banking-enterprise/protocol/openid_connect/certs
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID: banking-client
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_AUTHORIZATION_GRANT_TYPE: authorization_code
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_REDIRECT_URI: http://localhost:8082/login/oauth2/code/keycloak
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_AUTHORIZATION_URI: http://keycloak:8080/realms/banking-enterprise/protocol/openid_connect/auth
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI: http://keycloak:8080/realms/banking-enterprise/protocol/openid_connect/token
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_USER_INFO_URI: http://keycloak:8080/realms/banking-enterprise/protocol/openid_connect/userinfo
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/banking-enterprise/protocol/openid_connect/certs
      
      # Monitoring Configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
      
      # Banking Business Configuration
      LOAN_MAX_AMOUNT: 10000000
      LOAN_MIN_AMOUNT: 1000
      LOAN_MAX_INSTALLMENTS: 60
      LOAN_MIN_INSTALLMENTS: 6
      TRANSACTION_DAILY_LIMIT: 100000
      INTEREST_RATE_DEFAULT: 0.029
      
      # Application Metadata
      APP_NAME: "Enterprise Loan Management System"
      APP_VERSION: "1.0.0-enterprise"
      APP_ENVIRONMENT: "enterprise"
      
      # JVM Configuration for Enterprise
      JAVA_OPTS: >-
        -server
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=70.0
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/app/logs/
        -Djava.security.egd=file:/dev/./urandom
        -Dspring.profiles.active=enterprise,docker,oauth2
        -Dfile.encoding=UTF-8
        -Duser.timezone=UTC
        -Dmanagement.endpoints.web.exposure.include=health,info,metrics,prometheus
        -Dlogging.level.com.bank.loanmanagement=INFO
        -Dlogging.level.org.springframework.security=DEBUG
        
    ports:
      - "8082:8080"
    volumes:
      - banking_enterprise_logs:/app/logs
      - ./config/application-enterprise.yml:/app/config/application-enterprise.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.50
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ===== API GATEWAY (Simplified for Docker) =====
  
  # Nginx API Gateway and Load Balancer
  api-gateway:
    image: nginx:1.25-alpine
    container_name: banking-api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - banking-app-enterprise
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.60

  # ===== TESTING & DEVELOPMENT =====
  
  # Kafka UI for Development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: banking-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: banking-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - zookeeper
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.70

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: banking-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@banking.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres-enterprise
    networks:
      enterprise-banking:
        ipv4_address: 172.20.0.80

# Health check command for the entire stack
x-healthcheck-test: &healthcheck
  test: ["CMD", "curl", "-f", "http://localhost/api/actuator/health"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s