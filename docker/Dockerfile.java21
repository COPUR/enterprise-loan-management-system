# Java 21 Optimized Dockerfile for Enterprise Loan Management System
# Multi-stage build with security hardening and performance optimizations

# =====================================================
# Stage 1: Build Stage
# =====================================================
FROM eclipse-temurin:21-jdk-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    bash \
    curl \
    git

# Set working directory
WORKDIR /build

# Copy gradle wrapper and configuration
COPY gradlew .
COPY gradle gradle
COPY build.gradle .
COPY settings.gradle .

# Download dependencies (cached layer)
RUN ./gradlew dependencies --no-daemon

# Copy source code
COPY src src

# Build application with Java 21 optimizations
RUN ./gradlew bootJar --no-daemon \
    -Pjava21.optimizations=true \
    -Pprofile=production

# =====================================================
# Stage 2: Runtime Stage
# =====================================================
FROM eclipse-temurin:21-jre-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    bash \
    tzdata \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Security: Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set timezone
ENV TZ=UTC
RUN cp /usr/share/zoneinfo/UTC /etc/localtime

# Create application directories
RUN mkdir -p /app /app/logs /app/config /app/data && \
    chown -R appuser:appgroup /app

# Set working directory
WORKDIR /app

# Copy application JAR from builder
COPY --from=builder --chown=appuser:appgroup \
    /build/build/libs/*.jar app.jar

# Copy configuration files
COPY --chown=appuser:appgroup \
    src/main/resources/application-java21-performance.properties \
    /app/config/

# Expose application port
EXPOSE 8080

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# Security: Drop all capabilities and run as non-root
USER appuser

# JVM options optimized for Java 21 and banking workloads
ENV JAVA_OPTS="\
    -XX:+UseZGC \
    -XX:+UseLargePages \
    -XX:MaxGCPauseMillis=10 \
    -XX:+UnlockExperimentalVMOptions \
    -XX:+EnableJVMCI \
    -Xms2g \
    -Xmx8g \
    --enable-preview \
    -Djava.security.egd=file:/dev/./urandom \
    -Djdk.virtualThreadScheduler.parallelism=32 \
    -Djdk.virtualThreadScheduler.maxPoolSize=512 \
    -Dspring.profiles.active=production,java21"

# Additional security options
ENV JAVA_SECURITY_OPTS="\
    -Djava.security.properties=/app/config/java.security \
    -Djavax.net.ssl.trustStoreType=PKCS12 \
    -Djavax.net.ssl.keyStoreType=PKCS12"

# Monitoring and debugging options (disabled by default)
ENV JAVA_DEBUG_OPTS=""
#ENV JAVA_DEBUG_OPTS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"

# Performance monitoring agent (optional)
#ENV JAVA_AGENT_OPTS="-javaagent:/app/agents/opentelemetry-javaagent.jar"
ENV JAVA_AGENT_OPTS=""

# Start application with all JVM options
ENTRYPOINT ["sh", "-c", \
    "java $JAVA_OPTS $JAVA_SECURITY_OPTS $JAVA_DEBUG_OPTS $JAVA_AGENT_OPTS -jar app.jar"]