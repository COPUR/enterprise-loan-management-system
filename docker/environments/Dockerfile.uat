# Docker Hardened Image (DHI) for UAT Environment
# Enterprise Loan Management System - User Acceptance Testing
# Multi-stage build with security hardening and minimal attack surface

# =============================================================================
# Stage 1: Build Environment (Builder Stage)
# =============================================================================
FROM openjdk:21-jdk-slim AS builder

# Security: Create non-root user for build process
RUN groupadd --gid 10001 builduser && \
    useradd --uid 10001 --gid builduser --shell /bin/bash --create-home builduser

# Install required build tools with minimal packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        wget \
        unzip \
        git \
        ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/* /var/tmp/*

# Set working directory
WORKDIR /app

# Copy build files with proper ownership
COPY --chown=builduser:builduser build.gradle settings.gradle gradlew ./
COPY --chown=builduser:builduser gradle/ ./gradle/
COPY --chown=builduser:builduser src/ ./src/

# Make gradlew executable
RUN chmod +x ./gradlew

# Create Gradle directory with proper permissions
RUN mkdir -p /home/builduser/.gradle && \
    chown -R builduser:builduser /home/builduser/.gradle && \
    chown -R builduser:builduser /app

# Switch to non-root user for build
USER builduser

# Build application with optimizations for UAT
RUN ./gradlew build \
    --no-daemon \
    --no-build-cache \
    -x test \
    --stacktrace

# Create optimized JAR structure
RUN mkdir -p /app/extracted && \
    cd /app/extracted && \
    java -Djarmode=layertools -jar /app/build/libs/*.jar extract

# =============================================================================
# Stage 2: Security Hardening Base (Distroless for Security)
# =============================================================================
FROM gcr.io/distroless/java21-debian12:nonroot AS security-base

# Security Labels and Metadata
LABEL maintainer="Enterprise Banking Security Team" \
      version="1.0.0-uat" \
      environment="uat" \
      security.scan="required" \
      security.level="hardened" \
      compliance.fapi="enabled" \
      compliance.banking="enabled" \
      description="Docker Hardened Image for Enterprise Loan Management System UAT"

# Security: Use non-root user (distroless default: nonroot uid=65532)
USER 65532:65532

# =============================================================================
# Stage 3: Runtime Environment (Final Hardened Image)
# =============================================================================
FROM security-base AS runtime

# Security: Set secure environment variables
ENV JAVA_OPTS="-server \
    -XX:+UseG1GC \
    -XX:+UseContainerSupport \
    -XX:MaxRAMPercentage=75.0 \
    -XX:+OptimizeStringConcat \
    -XX:+UseStringDeduplication \
    -XX:+ExitOnOutOfMemoryError \
    -Djava.security.egd=file:/dev/./urandom \
    -Djava.awt.headless=true \
    -Dfile.encoding=UTF-8 \
    -Duser.timezone=UTC \
    -Djdk.tls.rejectClientInitiatedRenegotiation=true \
    -Djdk.tls.ephemeralDHKeySize=2048 \
    -Djava.protocol.handler.pkgs=sun.net.www.protocol \
    --add-opens java.base/java.lang=ALL-UNNAMED"

# UAT Environment Configuration
ENV SPRING_PROFILES_ACTIVE=uat \
    SERVER_PORT=8080 \
    MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics \
    MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=when-authorized \
    LOGGING_LEVEL_COM_BANK_LOANMANAGEMENT=INFO \
    LOGGING_LEVEL_SECURITY=WARN \
    SECURITY_REQUIRE_SSL=true \
    FAPI_COMPLIANCE_ENABLED=true \
    BANKING_COMPLIANCE_STRICT=true

# Security: Filesystem permissions and structure
WORKDIR /app

# Copy application layers for optimal Docker layer caching
COPY --from=builder --chown=65532:65532 /app/extracted/dependencies/ ./
COPY --from=builder --chown=65532:65532 /app/extracted/spring-boot-loader/ ./
COPY --from=builder --chown=65532:65532 /app/extracted/snapshot-dependencies/ ./
COPY --from=builder --chown=65532:65532 /app/extracted/application/ ./

# Copy UAT-specific configuration
COPY --chown=65532:65532 src/main/resources/application-uat.yml ./config/

# Security: Health check with timeout and security considerations
HEALTHCHECK --interval=30s \
    --timeout=10s \
    --start-period=60s \
    --retries=3 \
    CMD ["java", "-cp", "/app", "org.springframework.boot.loader.JarLauncher", "--management.endpoints.web.exposure.include=health"]

# Security: Expose only necessary port
EXPOSE 8080

# Security: Set final working directory and user
USER 65532:65532
WORKDIR /app

# Entry point with security considerations
ENTRYPOINT ["java", "-cp", "/app", "org.springframework.boot.loader.JarLauncher"]

# =============================================================================
# Security Hardening Summary:
# 1. Multi-stage build reduces attack surface
# 2. Distroless base image (minimal OS, no shell, no package manager)
# 3. Non-root user (uid=65532) throughout execution
# 4. Minimal exposed ports (only 8080)
# 5. Security-focused JVM options
# 6. UAT-specific environment configuration
# 7. Health checks with security timeout
# 8. Proper file ownership and permissions
# 9. Clean layer structure for optimal caching
# 10. Banking compliance and FAPI security enabled
# =============================================================================