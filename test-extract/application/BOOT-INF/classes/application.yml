server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:}

spring:
  application:
    name: ${APPLICATION_NAME:enterprise-loan-management-system}
  
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:}
      chat:
        options:
          model: ${OPENAI_MODEL:gpt-4}
          temperature: ${OPENAI_TEMPERATURE:0.3}
          max-tokens: ${OPENAI_MAX_TOKENS:2000}
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_TIMEOUT:2000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:20}
          max-idle: ${REDIS_POOL_MAX_IDLE:10}
          min-idle: ${REDIS_POOL_MIN_IDLE:2}
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/banking}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:20}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}
  
  jpa:
    hibernate:
      ddl-auto: ${HIBERNATE_DDL_AUTO:validate}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: ${DATABASE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
        format_sql: ${HIBERNATE_FORMAT_SQL:true}
        use_sql_comments: ${HIBERNATE_USE_SQL_COMMENTS:true}
        jdbc:
          batch_size: ${HIBERNATE_BATCH_SIZE:20}
        order_inserts: ${HIBERNATE_ORDER_INSERTS:true}
        order_updates: ${HIBERNATE_ORDER_UPDATES:true}
  
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    locations: ${FLYWAY_LOCATIONS:classpath:db/migration}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    validate-on-migrate: ${FLYWAY_VALIDATE_ON_MIGRATE:true}
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      group-id: loan-management-system
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "com.bank.loanmanagement"
  
  security:
    jwt:
      secret: ${JWT_SECRET:mySecretKey}
      expiration: 86400000
  
  cache:
    type: redis
    redis:
      time-to-live: 600000

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

resilience4j:
  circuitbreaker:
    instances:
      loanService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
      paymentService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50

logging:
  level:
    com.bank.loanmanagement: INFO
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type: TRACE

business:
  rules:
    loan:
      min-amount: 1000
      max-amount: 500000
      allowed-installments: 6,9,12,24
      min-interest-rate: 0.001
      max-interest-rate: 0.005
    customer:
      min-credit-score: 300
      max-credit-score: 850

# Banking-specific security configuration for FAPI compliance
banking:
  security:
    jwt:
      secret: ${BANKING_JWT_SECRET:banking-jwt-secret-key-should-be-very-long-and-secure-for-production}
      expiration: ${BANKING_JWT_EXPIRATION:86400}
      issuer: ${BANKING_JWT_ISSUER:enterprise-loan-management-system}
      audience: ${BANKING_JWT_AUDIENCE:banking-api-clients}
      algorithm: ${BANKING_JWT_ALGORITHM:RS256}
      jwk-set-uri: ${BANKING_JWT_JWK_SET_URI:/.well-known/jwks.json}
    password:
      strength: ${BANKING_PASSWORD_STRENGTH:12}
    cors:
      allowed-origins:
        - ${BANKING_CORS_ORIGIN_1:https://localhost:3000}
        - ${BANKING_CORS_ORIGIN_2:https://banking-frontend.local}
        - ${BANKING_CORS_ORIGIN_3:https://*.banking-domain.com}
      allowed-methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowed-headers:
        - Authorization
        - Content-Type
        - X-Requested-With
        - Accept
        - Origin
        - X-FAPI-Interaction-ID
        - X-FAPI-Auth-Date
        - X-FAPI-Customer-IP-Address
      allow-credentials: ${BANKING_CORS_ALLOW_CREDENTIALS:true}
      max-age: ${BANKING_CORS_MAX_AGE:1800}
    rate-limit:
      requests-per-minute: ${BANKING_RATE_LIMIT_RPM:60}
      burst-limit: ${BANKING_RATE_LIMIT_BURST:100}
      window-size-minutes: ${BANKING_RATE_LIMIT_WINDOW:1}
      enable-rate-limiting: ${BANKING_RATE_LIMIT_ENABLED:true}