package com.bank.loanmanagement.infrastructure.events;

import com.bank.loanmanagement.domain.shared.AggregateRoot;\nimport com.bank.loanmanagement.domain.shared.DomainEvent;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n/**\n * Infrastructure service for publishing domain events.\n * \n * Implements Event-Driven Communication by bridging domain events\n * to Spring's application event system for async processing.\n * \n * Architecture Compliance:\n * ✅ Clean Code: Single responsibility for event publishing\n * ✅ Hexagonal: Infrastructure adapter for event publishing\n * ✅ Event-Driven: Enables domain event publishing and handling\n * ✅ DDD: Proper separation of domain and infrastructure concerns\n */\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class DomainEventPublisher {\n    \n    private final ApplicationEventPublisher applicationEventPublisher;\n    private final DomainEventStore eventStore;\n    \n    /**\n     * Publish all uncommitted events from an aggregate root\n     */\n    @Transactional\n    public void publish(AggregateRoot<?> aggregate) {\n        if (aggregate == null) {\n            log.warn(\"Attempted to publish events from null aggregate\");\n            return;\n        }\n        \n        List<DomainEvent> events = aggregate.getUncommittedEvents();\n        \n        if (events.isEmpty()) {\n            log.debug(\"No uncommitted events to publish for aggregate: {}\", aggregate.getAggregateId());\n            return;\n        }\n        \n        log.info(\"Publishing {} domain events for aggregate: {}\", events.size(), aggregate.getAggregateId());\n        \n        for (DomainEvent event : events) {\n            try {\n                // Store event for event sourcing and audit trail\n                eventStore.store(event);\n                \n                // Publish for immediate async handling\n                applicationEventPublisher.publishEvent(event);\n                \n                log.debug(\"Published domain event: {} for aggregate: {}\", \n                         event.getEventType(), event.getAggregateId());\n                         \n            } catch (Exception e) {\n                log.error(\"Failed to publish domain event: {} for aggregate: {}\", \n                         event.getEventType(), event.getAggregateId(), e);\n                throw new DomainEventPublishingException(\n                    \"Failed to publish domain event: \" + event.getEventType(), e);\n            }\n        }\n        \n        // Mark events as committed after successful publishing\n        aggregate.markEventsAsCommitted();\n        \n        log.info(\"Successfully published {} domain events for aggregate: {}\", \n                events.size(), aggregate.getAggregateId());\n    }\n    \n    /**\n     * Publish a single domain event\n     */\n    @Transactional\n    public void publishSingle(DomainEvent event) {\n        if (event == null) {\n            log.warn(\"Attempted to publish null domain event\");\n            return;\n        }\n        \n        try {\n            log.info(\"Publishing single domain event: {} for aggregate: {}\", \n                    event.getEventType(), event.getAggregateId());\n            \n            // Store event for event sourcing\n            eventStore.store(event);\n            \n            // Publish for immediate handling\n            applicationEventPublisher.publishEvent(event);\n            \n            log.debug(\"Successfully published domain event: {}\", event.getEventType());\n            \n        } catch (Exception e) {\n            log.error(\"Failed to publish domain event: {}\", event.getEventType(), e);\n            throw new DomainEventPublishingException(\n                \"Failed to publish domain event: \" + event.getEventType(), e);\n        }\n    }\n    \n    /**\n     * Business method to get event publishing statistics\n     */\n    public EventPublishingStats getPublishingStats() {\n        return EventPublishingStats.builder()\n            .totalEventsStored(eventStore.getTotalEventCount())\n            .eventsToday(eventStore.getEventCountForToday())\n            .lastEventTime(eventStore.getLastEventTime())\n            .build();\n    }\n    \n    /**\n     * Business method to check if event publishing is healthy\n     */\n    public boolean isHealthy() {\n        try {\n            // Simple health check - try to get stats\n            EventPublishingStats stats = getPublishingStats();\n            return stats != null;\n        } catch (Exception e) {\n            log.warn(\"Event publishing health check failed\", e);\n            return false;\n        }\n    }\n    \n    /**\n     * Statistics for event publishing monitoring\n     */\n    public static class EventPublishingStats {\n        private final long totalEventsStored;\n        private final long eventsToday;\n        private final java.time.LocalDateTime lastEventTime;\n        \n        private EventPublishingStats(long totalEventsStored, long eventsToday, \n                                   java.time.LocalDateTime lastEventTime) {\n            this.totalEventsStored = totalEventsStored;\n            this.eventsToday = eventsToday;\n            this.lastEventTime = lastEventTime;\n        }\n        \n        public static Builder builder() {\n            return new Builder();\n        }\n        \n        public long getTotalEventsStored() { return totalEventsStored; }\n        public long getEventsToday() { return eventsToday; }\n        public java.time.LocalDateTime getLastEventTime() { return lastEventTime; }\n        \n        public static class Builder {\n            private long totalEventsStored;\n            private long eventsToday;\n            private java.time.LocalDateTime lastEventTime;\n            \n            public Builder totalEventsStored(long total) {\n                this.totalEventsStored = total;\n                return this;\n            }\n            \n            public Builder eventsToday(long today) {\n                this.eventsToday = today;\n                return this;\n            }\n            \n            public Builder lastEventTime(java.time.LocalDateTime time) {\n                this.lastEventTime = time;\n                return this;\n            }\n            \n            public EventPublishingStats build() {\n                return new EventPublishingStats(totalEventsStored, eventsToday, lastEventTime);\n            }\n        }\n    }\n}\n\n/**\n * Exception thrown when domain event publishing fails\n */\nclass DomainEventPublishingException extends RuntimeException {\n    public DomainEventPublishingException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}