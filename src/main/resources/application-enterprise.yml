server:
  port: 8080
  servlet:
    context-path: /
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

spring:
  application:
    name: enterprise-loan-management-system
  
  # Database Configuration - PostgreSQL Enterprise
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5434/banking_enterprise}
    username: ${DATABASE_USERNAME:banking_enterprise}
    password: ${DATABASE_PASSWORD:enterprise_banking_pass_2024}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      validation-timeout: 5000
      leak-detection-threshold: 60000
      pool-name: BankingHikariCP
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        order_inserts: true
        order_updates: true
        batch_size: 25
        fetch_size: 150
        max_fetch_depth: 3
        default_batch_fetch_size: 16
        generate_statistics: false
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.redis.RedisRegionFactory
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6381}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:5000}
      password: ${REDIS_PASSWORD:}
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 5000ms
        shutdown-timeout: 100ms
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "banking:"
  
  # Security Configuration - OAuth2 with Keycloak
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI:http://localhost:8090/realms/banking-enterprise}
          jwk-set-uri: ${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI:http://localhost:8090/realms/banking-enterprise/protocol/openid_connect/certs}
      client:
        registration:
          keycloak:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID:banking-client}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET:banking-client-secret}
            authorization-grant-type: authorization_code
            redirect-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_REDIRECT_URI:http://localhost:8082/login/oauth2/code/keycloak}
            scope: openid,profile,email,roles
        provider:
          keycloak:
            authorization-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_AUTHORIZATION_URI:http://localhost:8090/realms/banking-enterprise/protocol/openid_connect/auth}
            token-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI:http://localhost:8090/realms/banking-enterprise/protocol/openid_connect/token}
            user-info-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_USER_INFO_URI:http://localhost:8090/realms/banking-enterprise/protocol/openid_connect/userinfo}
            jwk-set-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK_SET_URI:http://localhost:8090/realms/banking-enterprise/protocol/openid_connect/certs}
            user-name-attribute: preferred_username
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9093}
    consumer:
      group-id: ${KAFKA_GROUP_ID:banking-enterprise}
      auto-offset-reset: ${KAFKA_AUTO_OFFSET_RESET:earliest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.bank.loanmanagement"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    admin:
      properties:
        bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9093}

  # GraphQL Configuration with Extended Scalars
  graphql:
    graphiql:
      enabled: true
      path: /graphiql
    path: /graphql
    cors:
      allowed-origins: "*"
      allowed-methods: GET,POST
    websocket:
      path: /graphql-ws

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info,metrics,prometheus}
      base-path: /api/actuator
  endpoint:
    health:
      show-details: ${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:always}
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: ${MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED:true}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.95,0.99
      sla:
        http.server.requests: 100ms,200ms,500ms
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    db:
      enabled: true
    redis:
      enabled: true
    diskspace:
      enabled: true

# Banking Business Configuration
banking:
  loan:
    max-amount: ${LOAN_MAX_AMOUNT:10000000}
    min-amount: ${LOAN_MIN_AMOUNT:1000}
    max-installments: ${LOAN_MAX_INSTALLMENTS:60}
    min-installments: ${LOAN_MIN_INSTALLMENTS:6}
    default-interest-rate: ${INTEREST_RATE_DEFAULT:0.029}
  transaction:
    daily-limit: ${TRANSACTION_DAILY_LIMIT:100000}
  compliance:
    strict-validation: true
    audit-enabled: true
    fapi-validation: true

# Logging Configuration
logging:
  level:
    com.bank.loanmanagement: ${LOGGING_LEVEL_BANKING:INFO}
    org.springframework.security: ${LOGGING_LEVEL_SECURITY:INFO}
    org.springframework.oauth2: INFO
    org.springframework.graphql: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.apache.kafka: INFO
    redis.clients.jedis: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/banking-enterprise.log
    max-size: 100MB
    max-history: 30

# Application Information
info:
  app:
    name: ${APP_NAME:Enterprise Loan Management System}
    description: "Enterprise Banking System with OAuth2.1, Microservices Architecture"
    version: ${APP_VERSION:1.0.0-enterprise}
    environment: ${APP_ENVIRONMENT:enterprise}
  build:
    artifact: enterprise-loan-management-system
    name: Enterprise Loan Management System
    version: ${APP_VERSION:1.0.0-enterprise}
    java:
      version: 21

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      loanService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      paymentService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
  retry:
    instances:
      loanService:
        maxRetryAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  ratelimiter:
    instances:
      loanCreation:
        limitForPeriod: 10
        limitRefreshPeriod: 1s
        timeoutDuration: 500ms
  bulkhead:
    instances:
      loanService:
        maxConcurrentCalls: 20
        maxWaitDuration: 1s

# OpenAPI Documentation
springdoc:
  api-docs:
    enabled: true
    path: /api/v3/api-docs
  swagger-ui:
    enabled: true
    path: /api/swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  show-actuator: true
  group-configs:
    - group: banking-api
      display-name: Banking API
      paths-to-match: /api/loans/**, /api/customers/**, /api/payments/**
    - group: admin-api
      display-name: Admin API
      paths-to-match: /api/admin/**