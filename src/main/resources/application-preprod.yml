# Pre-Production Environment Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:}

# Database Configuration
spring:
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://preprod-db.internal:5432/banking_preprod}
    username: ${DATABASE_USERNAME:banking_user}
    password: ${DATABASE_PASSWORD:${PREPROD_DB_PASSWORD}}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:25}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${HIBERNATE_DDL_AUTO:validate}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:preprod-redis.internal}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:${PREPROD_REDIS_PASSWORD}}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:5000}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:40}
          max-idle: ${REDIS_POOL_MAX_IDLE:20}
          min-idle: ${REDIS_POOL_MIN_IDLE:5}

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:preprod-kafka.internal:9092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:loan-management-preprod}
      auto-offset-reset: ${KAFKA_AUTO_OFFSET_RESET:latest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

# Banking Business Configuration
banking:
  business:
    loan:
      interest-rate:
        min: ${LOAN_MIN_INTEREST_RATE:0.1}
        max: ${LOAN_MAX_INTEREST_RATE:0.5}
      installments:
        allowed: ${LOAN_ALLOWED_INSTALLMENTS:6,9,12,24}
      amount:
        min: ${LOAN_MIN_AMOUNT:1000.00}
        max: ${LOAN_MAX_AMOUNT:500000.00}
    
    payment:
      advance-limit-months: ${PAYMENT_ADVANCE_LIMIT:3}
      discount-rate: ${PAYMENT_DISCOUNT_RATE:0.001}
      penalty-rate: ${PAYMENT_PENALTY_RATE:0.001}
    
    credit-scoring:
      min-score: ${CREDIT_MIN_SCORE:300}
      max-score: ${CREDIT_MAX_SCORE:850}
      high-risk-threshold: ${CREDIT_HIGH_RISK_THRESHOLD:650}
      excellent-threshold: ${CREDIT_EXCELLENT_THRESHOLD:750}

# Security Configuration
security:
  jwt:
    secret: ${JWT_SECRET}
    expiration-hours: ${JWT_EXPIRATION_HOURS:1}
    refresh-expiration-hours: ${JWT_REFRESH_EXPIRATION_HOURS:24}
    issuer: ${JWT_ISSUER:https://preprod-auth.bank.com}
    audience: ${JWT_AUDIENCE:loan-management-system}
    algorithm: ${JWT_ALGORITHM:RS256}
  
  bcrypt:
    strength: ${BCRYPT_STRENGTH:14}
  
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://preprod-frontend.bank.com}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:Content-Type,Authorization,X-FAPI-Interaction-ID}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
    max-age: ${CORS_MAX_AGE:3600}
  
  rate-limiting:
    requests-per-minute: ${RATE_LIMIT_RPM:60}
    burst-limit: ${RATE_LIMIT_BURST:10}
    window-size-ms: ${RATE_LIMIT_WINDOW:60000}

# Cache Configuration
cache:
  ttl:
    customers-minutes: ${CACHE_TTL_CUSTOMERS:60}
    loans-minutes: ${CACHE_TTL_LOANS:30}
    payments-minutes: ${CACHE_TTL_PAYMENTS:10}
    credit-assessment-minutes: ${CACHE_TTL_CREDIT:120}
    compliance-minutes: ${CACHE_TTL_COMPLIANCE:720}
    security-minutes: ${CACHE_TTL_SECURITY:5}
    rate-limit-minutes: ${CACHE_TTL_RATE_LIMIT:2}

# Integration Configuration
integrations:
  openai:
    api-key: ${OPENAI_API_KEY}
    timeout-seconds: ${OPENAI_TIMEOUT:30}
    model: ${OPENAI_MODEL:gpt-4}
  
  microservices:
    customer-service:
      url: ${CUSTOMER_SERVICE_URL:http://customer-service.preprod:8081}
      timeout: ${CUSTOMER_SERVICE_TIMEOUT:3000}
    loan-service:
      url: ${LOAN_SERVICE_URL:http://loan-service.preprod:8082}
      timeout: ${LOAN_SERVICE_TIMEOUT:3000}
    payment-service:
      url: ${PAYMENT_SERVICE_URL:http://payment-service.preprod:8083}
      timeout: ${PAYMENT_SERVICE_TIMEOUT:3000}
    discovery-service:
      url: ${DISCOVERY_SERVICE_URL:http://discovery-service.preprod:8761}

# GraphQL Configuration
graphql:
  playground:
    endpoint: ${GRAPHQL_ENDPOINT:/graphql}
    subscription-endpoint: ${GRAPHQL_SUBSCRIPTION_ENDPOINT:/graphql}
  settings:
    editor-theme: ${GRAPHQL_THEME:light}
    editor-font-size: ${GRAPHQL_FONT_SIZE:14}
    timeout-seconds: ${GRAPHQL_TIMEOUT:15}

# Monitoring and Management
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:never}
  metrics:
    export:
      prometheus:
        enabled: ${PROMETHEUS_ENABLED:true}

# Logging Configuration
logging:
  level:
    com.bank.loanmanagement: ${LOG_LEVEL_APP:INFO}
    org.springframework.security: ${LOG_LEVEL_SECURITY:WARN}
    org.springframework.kafka: ${LOG_LEVEL_KAFKA:WARN}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:WARN}
  pattern:
    console: ${LOG_PATTERN_CONSOLE:%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n}
    file: ${LOG_PATTERN_FILE:%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n}