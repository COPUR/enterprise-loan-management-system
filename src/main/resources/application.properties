# 12-Factor App Configuration for Enterprise Loan Management System
# Configuration externalized and environment-specific

# Application Information
app.name=@project.name@
app.version=@project.version@
app.description=Enterprise Banking System with Microservices Architecture

# Server Configuration
server.port=${SERVER_PORT:8080}
server.servlet.context-path=${CONTEXT_PATH:/api}
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain

# Spring Boot Configuration
spring.application.name=${SPRING_APP_NAME:enterprise-loan-management-system}
spring.profiles.active=${SPRING_PROFILES_ACTIVE:development}
spring.main.allow-bean-definition-overriding=${ALLOW_BEAN_OVERRIDING:true}

# Database Configuration (12-Factor: Backing Services)
spring.datasource.url=${DATABASE_URL:jdbc:h2:mem:banking;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.driver-class-name=${DATABASE_DRIVER:org.h2.Driver}
spring.datasource.username=${DATABASE_USERNAME:banking_user}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.hikari.maximum-pool-size=${DATABASE_POOL_SIZE:20}
spring.datasource.hikari.minimum-idle=${DATABASE_MIN_IDLE:5}
spring.datasource.hikari.connection-timeout=${DATABASE_CONNECTION_TIMEOUT:30000}

# JPA Configuration
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.dialect=${JPA_DIALECT:org.hibernate.dialect.H2Dialect}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}
spring.jpa.properties.hibernate.use_sql_comments=${JPA_SQL_COMMENTS:false}

# Redis Configuration (12-Factor: Backing Services)
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.database=${REDIS_DATABASE:0}
spring.data.redis.timeout=${REDIS_TIMEOUT:2000ms}
spring.data.redis.lettuce.pool.max-active=${REDIS_POOL_MAX_ACTIVE:8}
spring.data.redis.lettuce.pool.max-idle=${REDIS_POOL_MAX_IDLE:8}
spring.data.redis.lettuce.pool.min-idle=${REDIS_POOL_MIN_IDLE:0}

# Security Configuration - OAuth2.1 with Keycloak
# Keycloak OAuth2.1 Client Configuration (12-Factor: Configuration via Environment)
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID:banking-app}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.scope=${KEYCLOAK_SCOPE:openid,profile,email,roles}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=${KEYCLOAK_REDIRECT_URI:http://localhost:8080/login/oauth2/code/keycloak}

# Keycloak Provider Configuration
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:8090/realms/banking-realm}
spring.security.oauth2.client.provider.keycloak.authorization-uri=${KEYCLOAK_URL:http://localhost:8090}/realms/${KEYCLOAK_REALM:banking-realm}/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_URL:http://localhost:8090}/realms/${KEYCLOAK_REALM:banking-realm}/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=${KEYCLOAK_URL:http://localhost:8090}/realms/${KEYCLOAK_REALM:banking-realm}/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${KEYCLOAK_URL:http://localhost:8090}/realms/${KEYCLOAK_REALM:banking-realm}/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# OAuth2 Resource Server Configuration (JWT Token Validation)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:8090/realms/banking-realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_URL:http://localhost:8090}/realms/${KEYCLOAK_REALM:banking-realm}/protocol/openid-connect/certs

# Banking Security Configuration
banking.security.oauth2.enabled=${OAUTH2_ENABLED:true}
banking.security.keycloak.realm=${KEYCLOAK_REALM:banking-realm}
banking.security.keycloak.base-url=${KEYCLOAK_URL:http://localhost:8090}
banking.security.session.timeout=${SESSION_TIMEOUT:1800}

# Role Mapping Configuration (Party Data Management Database)
banking.security.roles.database.enabled=${ROLES_DATABASE_ENABLED:true}
banking.security.roles.ldap.enabled=${ROLES_LDAP_ENABLED:true}
banking.security.roles.cache.ttl=${ROLES_CACHE_TTL:3600}

# Eureka Configuration (Service Discovery)
eureka.client.service-url.defaultZone=${EUREKA_URL:http://localhost:8761/eureka}
eureka.client.register-with-eureka=${EUREKA_REGISTER:true}
eureka.client.fetch-registry=${EUREKA_FETCH_REGISTRY:true}
eureka.instance.prefer-ip-address=${EUREKA_PREFER_IP:true}
eureka.instance.hostname=${EUREKA_HOSTNAME:localhost}

# Actuator Configuration (Monitoring)
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
management.endpoint.health.show-details=${HEALTH_SHOW_DETAILS:always}
management.endpoint.health.probes.enabled=${HEALTH_PROBES_ENABLED:true}
management.metrics.export.prometheus.enabled=${PROMETHEUS_ENABLED:true}

# Logging Configuration (12-Factor: Logs)
logging.level.com.bank.loanmanagement=${LOG_LEVEL_APP:INFO}
logging.level.org.springframework=${LOG_LEVEL_SPRING:INFO}
logging.level.org.hibernate=${LOG_LEVEL_HIBERNATE:WARN}
logging.pattern.console=${LOG_PATTERN_CONSOLE:%d{yyyy-MM-dd HH:mm:ss} - %msg%n}
logging.pattern.file=${LOG_PATTERN_FILE:%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n}

# Banking Domain Configuration
banking.loan.max-amount=${LOAN_MAX_AMOUNT:5000000}
banking.loan.min-amount=${LOAN_MIN_AMOUNT:1000}
banking.loan.max-term-months=${LOAN_MAX_TERM:360}
banking.loan.min-term-months=${LOAN_MIN_TERM:6}
banking.interest.min-rate=${INTEREST_MIN_RATE:0.001}
banking.interest.max-rate=${INTEREST_MAX_RATE:0.30}
banking.transaction.daily-limit=${TRANSACTION_DAILY_LIMIT:50000}
banking.transaction.monthly-limit=${TRANSACTION_MONTHLY_LIMIT:500000}

# Compliance Configuration
banking.compliance.fapi.enabled=${FAPI_ENABLED:true}
banking.compliance.pci.enabled=${PCI_ENABLED:true}
banking.compliance.audit.enabled=${AUDIT_ENABLED:true}
banking.compliance.kyc.required=${KYC_REQUIRED:true}

# Performance Configuration
banking.performance.cache.ttl=${CACHE_TTL:3600}
banking.performance.connection.timeout=${CONNECTION_TIMEOUT:5000}
banking.performance.read.timeout=${READ_TIMEOUT:10000}
banking.performance.max.concurrent.requests=${MAX_CONCURRENT_REQUESTS:100}

# Feature Flags
banking.features.nlp.enabled=${NLP_ENABLED:false}
banking.features.ai.enabled=${AI_ENABLED:false}
banking.features.blockchain.enabled=${BLOCKCHAIN_ENABLED:false}
banking.features.biometric.enabled=${BIOMETRIC_ENABLED:false}

# External Service URLs (12-Factor: Backing Services)
banking.services.credit-bureau.url=${CREDIT_BUREAU_URL:http://localhost:8082}
banking.services.payment-processor.url=${PAYMENT_PROCESSOR_URL:http://localhost:8083}
banking.services.fraud-detection.url=${FRAUD_DETECTION_URL:http://localhost:8084}
banking.services.notification.url=${NOTIFICATION_URL:http://localhost:8085}

# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.credit-bureau.failure-rate-threshold=${CB_FAILURE_RATE:50}
resilience4j.circuitbreaker.instances.credit-bureau.wait-duration-in-open-state=${CB_WAIT_DURATION:30s}
resilience4j.circuitbreaker.instances.credit-bureau.sliding-window-size=${CB_WINDOW_SIZE:10}

# Rate Limiting Configuration
resilience4j.ratelimiter.instances.api.limit-for-period=${RATE_LIMIT_PERIOD:100}
resilience4j.ratelimiter.instances.api.limit-refresh-period=${RATE_LIMIT_REFRESH:1s}
resilience4j.ratelimiter.instances.api.timeout-duration=${RATE_LIMIT_TIMEOUT:0}

# Retry Configuration
resilience4j.retry.instances.default.max-attempts=${RETRY_MAX_ATTEMPTS:3}
resilience4j.retry.instances.default.wait-duration=${RETRY_WAIT_DURATION:1s}

# Kafka Configuration (Event Streaming)
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP:banking-group}
spring.kafka.consumer.auto-offset-reset=${KAFKA_OFFSET_RESET:earliest}
spring.kafka.producer.retries=${KAFKA_PRODUCER_RETRIES:3}
spring.kafka.producer.acks=${KAFKA_PRODUCER_ACKS:all}

# API Documentation
springdoc.api-docs.path=${API_DOCS_PATH:/api-docs}
springdoc.swagger-ui.path=${SWAGGER_UI_PATH:/swagger-ui.html}
springdoc.swagger-ui.enabled=${SWAGGER_UI_ENABLED:true}