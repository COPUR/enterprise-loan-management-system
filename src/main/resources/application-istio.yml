# Istio Service Mesh Configuration Profile
# This profile configures the application to work optimally with Istio

spring:
  application:
    name: ${MICROSERVICE_NAME:enterprise-loan-management-system}
    
  # Service Discovery Configuration for Istio
  cloud:
    discovery:
      enabled: false  # Istio handles service discovery
    kubernetes:
      discovery:
        enabled: false
    consul:
      discovery:
        enabled: false
        
  # Redis Configuration for Distributed Cache
  data:
    redis:
      host: ${REDIS_HOST:banking-redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      timeout: ${REDIS_TIMEOUT:5000ms}
      database: ${REDIS_DATABASE:0}
      cluster:
        enabled: true
        nodes: 
          - ${REDIS_HOST:banking-redis}:6379
        max-redirects: 3
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:20}
          max-idle: ${REDIS_POOL_MAX_IDLE:10}
          min-idle: ${REDIS_POOL_MIN_IDLE:2}
          max-wait: ${REDIS_POOL_MAX_WAIT:2000ms}

  # Kafka Configuration for Event-Driven Architecture
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-service:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1
    consumer:
      group-id: ${MICROSERVICE_NAME:banking-service}-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.bank.loanmanagement,com.banking"

# Server Configuration for Istio
server:
  port: ${SERVER_PORT:8080}
  # Disable server.forward-headers-strategy when using Istio
  forward-headers-strategy: none
  # Istio handles compression
  compression:
    enabled: false

# Management and Actuator Configuration for Istio
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,istio
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
      group:
        liveness:
          include: livenessState,diskSpace
        readiness:
          include: readinessState,db,redis,kafka
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      service: ${MICROSERVICE_NAME:banking-service}
      environment: ${ENVIRONMENT:production}
      version: ${APP_VERSION:1.0.0}
      istio: enabled
    distribution:
      percentiles-histogram:
        http.server.requests: true
      sla:
        http.server.requests: 10ms,50ms,100ms,200ms,500ms,1s,2s,5s

# Distributed Tracing Configuration
management:
  tracing:
    sampling:
      probability: 1.0  # 100% sampling for banking compliance
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_ENDPOINT:http://jaeger-collector:14268/api/traces}

# Resilience4j Configuration for Circuit Breakers (works with Istio)
resilience4j:
  circuitbreaker:
    instances:
      customerService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
      loanService:
        register-health-indicator: true
        sliding-window-size: 20
        minimum-number-of-calls: 10
        permitted-number-of-calls-in-half-open-state: 5
        wait-duration-in-open-state: 15s
        failure-rate-threshold: 50
      paymentService:
        register-health-indicator: true
        sliding-window-size: 15
        minimum-number-of-calls: 8
        permitted-number-of-calls-in-half-open-state: 4
        wait-duration-in-open-state: 20s
        failure-rate-threshold: 40  # Stricter for payments
  retry:
    instances:
      customerService:
        max-attempts: 3
        wait-duration: 500ms
        retry-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.net.ConnectException
      loanService:
        max-attempts: 3
        wait-duration: 1s
      paymentService:
        max-attempts: 5
        wait-duration: 1s
        retry-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.net.ConnectException

# Banking Security Configuration for Istio
banking:
  security:
    # Istio handles TLS, so we can focus on application-level security
    istio:
      enabled: true
      mtls: STRICT
      jwt:
        verify-issuer: true
        verify-audience: true
    headers:
      # Istio will add these headers
      x-request-id: ${request.id}
      x-trace-id: ${trace.id}
      x-span-id: ${span.id}
      x-service: ${MICROSERVICE_NAME:banking-service}

# Microservice-specific Configuration
microservice:
  name: ${MICROSERVICE_NAME:enterprise-loan-management-system}
  version: ${APP_VERSION:1.0.0}
  environment: ${ENVIRONMENT:production}
  istio:
    enabled: true
    namespace: ${KUBERNETES_NAMESPACE:banking-system}
    cluster: ${KUBERNETES_CLUSTER:banking-cluster}

# Service Communication Configuration
service:
  communication:
    # Use Kubernetes service names for inter-service communication
    customer-service:
      url: http://customer-service:8081
      timeout: 30s
    loan-service:
      url: http://loan-service:8082
      timeout: 45s
    payment-service:
      url: http://payment-service:8083
      timeout: 60s
    party-service:
      url: http://party-service:8084
      timeout: 30s

# Logging Configuration for Service Mesh
logging:
  level:
    com.bank.loanmanagement: INFO
    com.banking: INFO
    io.istio: DEBUG
    io.envoyproxy: DEBUG
    org.springframework.web: INFO
    org.springframework.cloud: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

# Cache Configuration for Distributed Redis
cache:
  redis:
    cluster:
      enabled: true
    ttl:
      customer: 300000  # 5 minutes
      loan: 600000      # 10 minutes
      payment: 180000   # 3 minutes
      party: 900000     # 15 minutes
    key-prefix: ${MICROSERVICE_NAME:banking}: