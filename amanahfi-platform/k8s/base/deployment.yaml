apiVersion: apps/v1
kind: Deployment
metadata:
  name: amanahfi-platform
  namespace: amanahfi-platform
  labels:
    app.kubernetes.io/name: amanahfi-platform
    app.kubernetes.io/instance: amanahfi-platform
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: amanahfi-ecosystem
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/version: "1.0.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "AmanahFi Islamic Finance and CBDC Platform deployment"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: amanahfi-platform
      app.kubernetes.io/instance: amanahfi-platform
  template:
    metadata:
      labels:
        app.kubernetes.io/name: amanahfi-platform
        app.kubernetes.io/instance: amanahfi-platform
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: amanahfi-ecosystem
        app.kubernetes.io/version: "1.0.0"
        # Islamic Finance and compliance labels
        ae.amanahfi.compliance.sharia: "certified"
        ae.amanahfi.compliance.cbuae: "compliant"
        ae.amanahfi.workload: "islamic-finance"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/actuator/prometheus"
        # Force pod restart on config changes
        configmap/checksum: "PLACEHOLDER_CONFIG_CHECKSUM"
        secret/checksum: "PLACEHOLDER_SECRET_CHECKSUM"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      
      # Service account for RBAC
      serviceAccountName: amanahfi-platform
      automountServiceAccountToken: true
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - amanahfi-platform
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
              - key: node.kubernetes.io/instance-type
                operator: NotIn
                values:
                - spot
      
      # Tolerations for dedicated nodes
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "amanahfi-platform"
        effect: "NoSchedule"
      
      # Init containers for dependencies
      initContainers:
      - name: wait-for-database
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until nc -z postgres-cluster.amanahfi-platform.svc.cluster.local 5432; do
            echo "PostgreSQL is not ready yet..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for Redis to be ready..."
          until nc -z redis-cluster.amanahfi-platform.svc.cluster.local 6379; do
            echo "Redis is not ready yet..."
            sleep 2
          done
          echo "Redis is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: amanahfi-platform
        image: amanahfi/platform:1.0.0
        imagePullPolicy: Always
        
        # Security context for container
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        
        # Container ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: management
          containerPort: 8081
          protocol: TCP
        
        # Environment variables from ConfigMaps
        envFrom:
        - configMapRef:
            name: amanahfi-platform-config
        - configMapRef:
            name: amanahfi-platform-regulatory-config
        - configMapRef:
            name: amanahfi-platform-islamic-finance-config
        - secretRef:
            name: amanahfi-platform-secrets
        
        # Additional environment variables
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Resource requirements
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: management
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: management
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: management
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config/additional
          readOnly: true
        - name: tls-certificates
          mountPath: /app/certificates/tls
          readOnly: true
        - name: mtls-keystore
          mountPath: /app/certificates/mtls
          readOnly: true
        - name: corda-certificates
          mountPath: /app/certificates/corda
          readOnly: true
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Graceful shutdown initiated..."
                # Allow time for connections to drain
                sleep 15
      
      # Additional containers for sidecar patterns
      - name: fluent-bit
        image: fluent/fluent-bit:2.2
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
          readOnly: true
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 2Gi
      - name: config-volume
        configMap:
          name: amanahfi-platform-config
          defaultMode: 0444
      - name: tls-certificates
        secret:
          secretName: amanahfi-platform-tls
          defaultMode: 0400
      - name: mtls-keystore
        secret:
          secretName: amanahfi-platform-mtls-keystore
          defaultMode: 0400
      - name: corda-certificates
        secret:
          secretName: amanahfi-platform-corda-certificates
          defaultMode: 0400
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
          defaultMode: 0444
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Termination settings
      terminationGracePeriodSeconds: 60
      
      # Image pull secrets
      imagePullSecrets:
      - name: amanahfi-registry-secret