apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: amanahfi-platform
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'amanahfi-platform'
        region: 'uae-central-1'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # AmanahFi Platform Application
      - job_name: 'amanahfi-platform'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - amanahfi-platform
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
        metric_relabel_configs:
          # Add Islamic Finance specific labels
          - source_labels: [__name__]
            regex: 'islamic_finance_.*'
            target_label: 'business_domain'
            replacement: 'islamic_finance'
          - source_labels: [__name__]
            regex: 'cbdc_.*'
            target_label: 'business_domain'
            replacement: 'cbdc'
          - source_labels: [__name__]
            regex: 'sharia_compliance_.*'
            target_label: 'compliance_type'
            replacement: 'sharia'

      # JVM and Spring Boot Actuator metrics
      - job_name: 'amanahfi-platform-actuator'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - amanahfi-platform
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: amanahfi-platform-management
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: management
        metrics_path: '/actuator/prometheus'

      # Database metrics (PostgreSQL)
      - job_name: 'postgresql'
        static_configs:
          - targets: ['postgres-exporter:9187']
        relabel_configs:
          - target_label: 'service'
            replacement: 'postgresql'

      # Redis metrics
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter:9121']
        relabel_configs:
          - target_label: 'service'
            replacement: 'redis'

      # Kafka metrics
      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka-exporter:9308']
        relabel_configs:
          - target_label: 'service'
            replacement: 'kafka'

      # Kubernetes cluster metrics
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      # NGINX Ingress Controller metrics
      - job_name: 'nginx-ingress'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ingress-nginx
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
            action: keep
            regex: ingress-nginx

      # External regulatory API monitoring
      - job_name: 'regulatory-apis'
        metrics_path: '/metrics'
        static_configs:
          - targets: 
            - 'regulatory-api-monitor:8080'
        relabel_configs:
          - target_label: 'api_type'
            replacement: 'regulatory'

      # Corda network monitoring
      - job_name: 'corda-network'
        metrics_path: '/metrics'
        static_configs:
          - targets:
            - 'corda-monitor:8080'
        relabel_configs:
          - target_label: 'network_type'
            replacement: 'corda'

      # Blackbox monitoring for external endpoints
      - job_name: 'blackbox-http'
        metrics_path: /probe
        params:
          module: [http_2xx]
        static_configs:
          - targets:
            - https://api.centralbank.ae/health
            - https://api.vara.ae/health
            - https://api.hsa.ae/health
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - source_labels: [__param_target]
            target_label: instance
          - target_label: __address__
            replacement: blackbox-exporter:9115

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: amanahfi-platform
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
      annotations:
        prometheus.io/scrape: "false"  # Don't scrape itself
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        imagePullPolicy: IfNotPresent
        
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=50GB'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.route-prefix=/'
          - '--web.external-url=https://prometheus.amanahfi.ae'
          - '--query.max-concurrency=20'
          - '--query.timeout=2m'
        
        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
        
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
          readOnly: true
        - name: rules-volume
          mountPath: /etc/prometheus/rules
          readOnly: true
        - name: storage-volume
          mountPath: /prometheus
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 15
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 5
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: rules-volume
        configMap:
          name: prometheus-rules
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-storage

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: amanahfi-platform
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
  annotations:
    prometheus.io/scrape: "false"
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    targetPort: web
    protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: amanahfi-platform
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp3  # Adjust based on your storage class