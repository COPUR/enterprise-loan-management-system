plugins {
    id 'java'
}

description = 'AmanahFi Platform - UAE & MENAT Islamic Finance Platform'

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.amanahfi'
    version = '0.9.0-SNAPSHOT'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    ext {
        springBootVersion = '3.2.0'
        springCloudVersion = '2023.0.0'
        kafkaVersion = '3.8.0'
        cordaVersion = '5.0.0'
        keycloakVersion = '26.0.0'
        testcontainersVersion = '1.19.3'
    }

    dependencies {
        // Spring Boot Core
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        
        // Islamic Finance & Compliance
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        
        // Event Driven Architecture (only for contexts that need it)
        // implementation "org.springframework.kafka:spring-kafka:${kafkaVersion}"
        
        // Database
        runtimeOnly 'org.postgresql:postgresql'
        implementation 'org.flywaydb:flyway-core'
        
        // Redis for caching and idempotency
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        
        // JSON Processing
        implementation 'com.fasterxml.jackson.core:jackson-databind'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        
        // Observability
        implementation 'io.micrometer:micrometer-registry-prometheus'
        implementation 'io.opentelemetry:opentelemetry-api'
        
        // Utilities
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        
        // Testing - TDD Approach
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
        testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
        testImplementation "org.testcontainers:kafka:${testcontainersVersion}"
        testImplementation 'org.awaitility:awaitility'
        testImplementation 'org.mockito:mockito-inline:5.2.0'
        testImplementation 'org.assertj:assertj-core'
        
        // Islamic Finance Testing
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
        // Enable Loom virtual threads for testing (available in Java 21 without preview)
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
        ]
    }
}

// Root project has no source code
sourceSets.main.java.srcDirs = []