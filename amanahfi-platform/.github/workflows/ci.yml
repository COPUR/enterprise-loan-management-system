# AmanahFi Platform CI Pipeline
# Continuous Integration pipeline for Islamic Finance and CBDC platform
name: CI - Build and Test

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'liberica'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: amanahfi/platform

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security and compliance checks
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for security scanning
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for Islamic Finance compliance keywords
      run: |
        echo "Scanning for Sharia compliance keywords..."
        if grep -r -i "interest\|riba\|gambling\|alcohol\|pork" src/ --exclude-dir=test; then
          echo "❌ Potential Sharia compliance issue detected!"
          echo "Please review code for Islamic finance compliance."
          exit 1
        else
          echo "✅ No obvious Sharia compliance issues detected."
        fi
    
    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # Code quality and analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true
    
    - name: Run Checkstyle
      run: ./gradlew checkstyleMain checkstyleTest
    
    - name: Run SpotBugs
      run: ./gradlew spotbugsMain spotbugsTest
    
    - name: Run PMD
      run: ./gradlew pmdMain pmdTest
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          build/reports/checkstyle/
          build/reports/spotbugs/
          build/reports/pmd/
        retention-days: 7

  # Build and unit tests
  build-and-test:
    name: Build and Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        profile: [test, islamic-finance-test, cbdc-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true
    
    - name: Run unit tests
      run: |
        ./gradlew clean test \
          -Dspring.profiles.active=${{ matrix.profile }} \
          -Dtest.islamic-finance.enabled=true \
          -Dtest.cbdc.enabled=true \
          --info
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Tests (${{ matrix.profile }})
        path: build/test-results/test/*.xml
        reporter: java-junit
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.profile }}
        path: |
          build/test-results/
          build/reports/tests/
        retention-days: 7
    
    - name: Publish code coverage
      uses: codecov/codecov-action@v3
      if: matrix.profile == 'test'
      with:
        file: build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-amanahfi-platform

  # Islamic Finance specific tests
  islamic-finance-compliance:
    name: Islamic Finance Compliance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [security-scan]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: amanahfi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Run Islamic Finance compliance tests
      run: |
        ./gradlew test \
          -Dspring.profiles.active=test,islamic-finance \
          -Dtest.groups=islamic-finance,sharia-compliance \
          -Ddatabase.url=jdbc:postgresql://localhost:5432/amanahfi_test \
          -Dredis.host=localhost \
          --tests "*IslamicFinance*" \
          --tests "*Sharia*" \
          --tests "*Murabaha*" \
          --tests "*Musharakah*" \
          --tests "*Ijarah*"
    
    - name: Validate Sharia compliance rules
      run: |
        echo "Validating Sharia compliance implementation..."
        ./gradlew test \
          -Dtest.groups=sharia-validation \
          --tests "*ShariaComplianceTest*"
    
    - name: Generate Islamic Finance test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Islamic Finance Compliance Tests
        path: build/test-results/test/*.xml
        reporter: java-junit

  # CBDC and blockchain tests
  cbdc-integration:
    name: CBDC Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [security-scan]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: amanahfi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Setup mock Corda network
      run: |
        echo "Setting up mock Corda network for testing..."
        docker run -d \
          --name mock-corda \
          -p 10003:10003 \
          -e CORDA_NETWORK=test \
          wiremock/wiremock:latest \
          --global-response-templating
    
    - name: Run CBDC integration tests
      run: |
        ./gradlew test \
          -Dspring.profiles.active=test,cbdc \
          -Dtest.groups=cbdc,digital-dirham \
          -Dcorda.network.endpoint=http://localhost:10003 \
          -Ddatabase.url=jdbc:postgresql://localhost:5432/amanahfi_test \
          -Dredis.host=localhost \
          --tests "*CBDC*" \
          --tests "*DigitalDirham*" \
          --tests "*Corda*"
    
    - name: Test Digital Dirham operations
      run: |
        echo "Testing Digital Dirham specific operations..."
        ./gradlew test \
          -Dtest.groups=digital-dirham-operations \
          --tests "*DigitalDirhamService*" \
          --tests "*TransferFunds*" \
          --tests "*WalletManagement*"
    
    - name: Generate CBDC test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: CBDC Integration Tests
        path: build/test-results/test/*.xml
        reporter: java-junit
    
    - name: Cleanup mock services
      if: always()
      run: |
        docker stop mock-corda || true
        docker rm mock-corda || true

  # Build Docker image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, islamic-finance-compliance, cbdc-integration]
    if: github.event_name == 'push'
    timeout-minutes: 20
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Build application
      run: |
        ./gradlew clean bootJar \
          -Dspring.profiles.active=production \
          -x test
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=AmanahFi Platform
          org.opencontainers.image.description=Islamic Finance and CBDC Platform
          org.opencontainers.image.vendor=AmanahFi Technologies
          ae.amanahfi.compliance.sharia=certified
          ae.amanahfi.compliance.cbuae=compliant
          ae.amanahfi.features.islamic-finance=enabled
          ae.amanahfi.features.cbdc=enabled
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          JAVA_VERSION=${{ env.JAVA_VERSION }}
    
    - name: Run Trivy security scan on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Integration tests with external services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: amanahfi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
      
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Setup mock external services
      run: |
        echo "Setting up mock regulatory APIs..."
        docker-compose -f docker-compose.test.yml up -d wiremock
        
        echo "Waiting for services to be ready..."
        sleep 30
    
    - name: Run integration tests
      run: |
        ./gradlew integrationTest \
          -Dspring.profiles.active=integration-test \
          -Ddatabase.url=jdbc:postgresql://localhost:5432/amanahfi_test \
          -Dredis.host=localhost \
          -Dkafka.bootstrap-servers=localhost:9092 \
          -Dmock.regulatory-apis.url=http://localhost:8080 \
          --tests "*IntegrationTest*" \
          --tests "*E2ETest*"
    
    - name: Generate integration test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Integration Tests
        path: build/test-results/integrationTest/*.xml
        reporter: java-junit
    
    - name: Cleanup test services
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Performance and load testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup performance test environment
      run: |
        echo "Setting up performance test environment..."
        docker-compose -f docker-compose.perf.yml up -d
        
        echo "Waiting for application to start..."
        sleep 60
    
    - name: Run performance tests with k6
      uses: grafana/k6-action@v0.3.1
      with:
        filename: tests/performance/load-test.js
        flags: --out json=results.json
      env:
        K6_PROMETHEUS_RW_SERVER_URL: http://localhost:9090/api/v1/write
        BASE_URL: http://localhost:8080
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: results.json
        retention-days: 7
    
    - name: Cleanup performance test environment
      if: always()
      run: |
        docker-compose -f docker-compose.perf.yml down -v

  # Notification and summary
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, build-and-test, islamic-finance-compliance, cbdc-integration, build-image]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.security-scan.result }}" == "success" && \
              "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.build-and-test.result }}" == "success" && \
              "${{ needs.islamic-finance-compliance.result }}" == "success" && \
              "${{ needs.cbdc-integration.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All CI checks passed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some CI checks failed. Please review the results." >> $GITHUB_OUTPUT
        fi
    
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ steps.status.outputs.status }}
        channel: '#amanahfi-ci-cd'
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "attachments": [
              {
                "color": "${{ steps.status.outputs.status == 'success' && 'good' || 'danger' }}",
                "title": "AmanahFi Platform CI Pipeline",
                "text": "${{ steps.status.outputs.message }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}