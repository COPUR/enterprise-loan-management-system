# AmanahFi Platform Release Pipeline
# Automated release management for Islamic Finance and CBDC platform
name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: amanahfi/platform
  HELM_CHART_NAME: amanahfi-platform
  COSIGN_VERSION: '2.0.0'

permissions:
  contents: write
  packages: write
  security-events: write
  attestations: write
  id-token: write

jobs:
  # Prepare release information
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Get current version from build.gradle
          CURRENT_VERSION=$(grep "version = " build.gradle | sed "s/version = '\(.*\)'/\1/")
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate next version based on input
          case "${{ inputs.release_type }}" in
            "major")
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
              ;;
            "minor")
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
              ;;
            "patch")
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
              ;;
          esac
          
          echo "version=v$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=${{ inputs.pre_release }}" >> $GITHUB_OUTPUT
        else
          # Extract version from tag
          VERSION=${{ github.ref_name }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if it's a pre-release (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog..."
        
        # Get the latest tag for comparison
        LATEST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -n "$LATEST_TAG" ]]; then
          echo "Generating changelog from $LATEST_TAG to HEAD"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LATEST_TAG..HEAD)
        else
          echo "Generating changelog for all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD~10..HEAD)
        fi
        
        # Create changelog with Islamic Finance and CBDC sections
        cat > changelog.md << EOF
        ## What's Changed
        
        ### üïå Islamic Finance Enhancements
        $(echo "$CHANGELOG" | grep -i "islamic\|sharia\|murabaha\|musharakah\|ijarah\|halal" || echo "- No Islamic Finance specific changes")
        
        ### üíé CBDC Features
        $(echo "$CHANGELOG" | grep -i "cbdc\|digital.*dirham\|corda\|blockchain" || echo "- No CBDC specific changes")
        
        ### üîí Security & Compliance
        $(echo "$CHANGELOG" | grep -i "security\|compliance\|audit\|vulnerability" || echo "- No security specific changes")
        
        ### üöÄ Platform Improvements
        $(echo "$CHANGELOG" | grep -v -i "islamic\|sharia\|murabaha\|cbdc\|digital.*dirham\|security\|compliance" || echo "- General platform improvements")
        
        ### üìù All Changes
        $CHANGELOG
        EOF
        
        # Set output for GitHub
        {
          echo 'changelog<<EOF'
          cat changelog.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Update version in build.gradle
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION_NUMBER=$(echo "${{ steps.version.outputs.version }}" | sed 's/v//')
        sed -i "s/version = '[^']*'/version = '$VERSION_NUMBER'/" build.gradle
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add build.gradle
        git commit -m "chore: bump version to $VERSION_NUMBER"
        git tag "${{ steps.version.outputs.version }}"
        git push origin HEAD --tags

  # Build and test release candidate
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [prepare-release]
    timeout-minutes: 30
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.version }}
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'liberica'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Run comprehensive tests
      run: |
        ./gradlew clean test integrationTest \
          -Dspring.profiles.active=release \
          -Dtest.islamic-finance.enabled=true \
          -Dtest.cbdc.enabled=true \
          --info
    
    - name: Build application
      run: |
        ./gradlew bootJar \
          -Dspring.profiles.active=production \
          -x test
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: ${{ env.COSIGN_VERSION }}
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=AmanahFi Platform
          org.opencontainers.image.description=Islamic Finance and CBDC Platform
          org.opencontainers.image.vendor=AmanahFi Technologies
          org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
          ae.amanahfi.compliance.sharia=certified
          ae.amanahfi.compliance.cbuae=compliant
          ae.amanahfi.compliance.vara=registered
          ae.amanahfi.features.islamic-finance=enabled
          ae.amanahfi.features.cbdc=enabled
          ae.amanahfi.release-type=official
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ needs.prepare-release.outputs.version }}
        annotations: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created={{date 'iso8601'}}
    
    - name: Sign container image
      run: |
        echo "Signing container image..."
        cosign sign --yes ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        output-file: sbom.spdx.json
        format: spdx-json
    
    - name: Sign SBOM
      run: |
        echo "Signing SBOM..."
        cosign sign-blob --yes --output-signature sbom.spdx.json.sig sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: |
          sbom.spdx.json
          sbom.spdx.json.sig
        retention-days: 90

  # Security validation for release
  release-security-validation:
    name: Release Security Validation
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run release security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-release.outputs.image-digest }}
        format: 'sarif'
        output: 'trivy-release-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail if critical vulnerabilities found
    
    - name: Validate Islamic Finance compliance for release
      run: |
        echo "Validating Islamic Finance compliance for release..."
        
        # Check that all required Islamic Finance features are present
        REQUIRED_FEATURES=("murabaha" "musharakah" "ijarah" "salam" "istisna" "qard-hassan")
        
        for feature in "${REQUIRED_FEATURES[@]}"; do
          if grep -r -i "$feature" src/main/java/ --include="*.java"; then
            echo "‚úÖ $feature implementation found"
          else
            echo "‚ùå $feature implementation missing!"
            exit 1
          fi
        done
    
    - name: Validate CBDC compliance for release
      run: |
        echo "Validating CBDC compliance for release..."
        
        # Check CBDC features
        REQUIRED_CBDC_FEATURES=("digital-dirham" "corda" "wallet" "transfer")
        
        for feature in "${REQUIRED_CBDC_FEATURES[@]}"; do
          if grep -r -i "$feature" src/main/java/ --include="*.java"; then
            echo "‚úÖ $feature implementation found"
          else
            echo "‚ùå $feature implementation missing!"
            exit 1
          fi
        done
    
    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-release-results.sarif'

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, release-security-validation]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download SBOM artifact
      uses: actions/download-artifact@v3
      with:
        name: sbom
    
    - name: Create release notes
      run: |
        cat > release-notes.md << EOF
        # AmanahFi Platform ${{ needs.prepare-release.outputs.version }}
        
        ## üéâ Release Highlights
        
        This release includes enhancements to our Islamic Finance and CBDC capabilities, ensuring full Sharia compliance and seamless Digital Dirham integration.
        
        ## üïå Islamic Finance Features
        
        - **Sharia Compliance**: All financial products are validated by HSA (Higher Sharia Authority)
        - **Murabaha Financing**: Cost-plus financing with transparent profit margins
        - **Musharakah Partnerships**: Profit and loss sharing arrangements
        - **Ijarah Leasing**: Asset leasing with ownership transfer options
        - **Halal Asset Verification**: Automated screening for Sharia-compliant assets
        
        ## üíé CBDC Capabilities
        
        - **Digital Dirham Integration**: Native support for UAE's CBDC
        - **Corda Network**: Blockchain-based settlement and clearing
        - **Real-time Transfers**: Instant cross-border and domestic payments
        - **CBUAE Compliance**: Full regulatory compliance with UAE Central Bank
        
        ## üîí Security & Compliance
        
        - **Zero Trust Architecture**: DPoP, mTLS, and OAuth 2.1 authentication
        - **Regulatory Reporting**: Automated compliance with CBUAE, VARA, and HSA
        - **Data Protection**: End-to-end encryption and secure key management
        - **Audit Trails**: Comprehensive logging and monitoring
        
        ## üìä Technical Specifications
        
        - **Java Version**: 21 (LTS)
        - **Spring Boot**: 3.3.x
        - **Database**: PostgreSQL 15+
        - **Cache**: Redis 7+
        - **Messaging**: Apache Kafka
        - **Monitoring**: Prometheus + Grafana
        - **Container**: Docker with multi-arch support (amd64, arm64)
        
        ## üöÄ Deployment
        
        ### Docker
        \`\`\`bash
        docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}
        \`\`\`
        
        ### Kubernetes
        \`\`\`bash
        kubectl apply -k k8s/overlays/production
        \`\`\`
        
        ### Helm
        \`\`\`bash
        helm upgrade --install amanahfi-platform ./helm-charts/amanahfi-platform \\
          --set image.tag=${{ needs.prepare-release.outputs.version }}
        \`\`\`
        
        ## üìã Changelog
        
        ${{ needs.prepare-release.outputs.changelog }}
        
        ## üõ°Ô∏è Security Verification
        
        This release has been thoroughly tested and scanned for security vulnerabilities:
        
        - ‚úÖ Container security scan passed
        - ‚úÖ Dependency vulnerability scan passed
        - ‚úÖ Islamic Finance compliance validated
        - ‚úÖ CBDC security requirements met
        - ‚úÖ Regulatory compliance confirmed
        
        ## üì¶ Artifacts
        
        - **Container Image**: \`${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}\`
        - **Image Digest**: \`${{ needs.build-release.outputs.image-digest }}\`
        - **SBOM**: Software Bill of Materials included
        - **Signatures**: Container and SBOM are signed with Cosign
        
        ## üîó Verification
        
        Verify the container signature:
        \`\`\`bash
        cosign verify ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }} \\
          --certificate-identity-regexp="https://github.com/${{ github.repository }}" \\
          --certificate-oidc-issuer="https://token.actions.githubusercontent.com"
        \`\`\`
        
        ## üÜò Support
        
        - **Documentation**: https://docs.amanahfi.ae
        - **API Reference**: https://api.amanahfi.ae/docs
        - **Support**: platform-support@amanahfi.ae
        - **Issues**: https://github.com/${{ github.repository }}/issues
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ needs.prepare-release.outputs.version }}
        EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        name: AmanahFi Platform ${{ needs.prepare-release.outputs.version }}
        body_path: release-notes.md
        prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
        generate_release_notes: false
        files: |
          sbom.spdx.json
          sbom.spdx.json.sig
        make_latest: ${{ needs.prepare-release.outputs.is-prerelease == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create Helm chart release
  helm-chart-release:
    name: Release Helm Chart
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.is-prerelease == 'false'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Update Helm chart version
      run: |
        VERSION_NUMBER=$(echo "${{ needs.prepare-release.outputs.version }}" | sed 's/v//')
        
        # Update Chart.yaml
        sed -i "s/version: .*/version: $VERSION_NUMBER/" helm-charts/amanahfi-platform/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: $VERSION_NUMBER/" helm-charts/amanahfi-platform/Chart.yaml
        
        # Update values.yaml with new image tag
        sed -i "s/tag: .*/tag: ${{ needs.prepare-release.outputs.version }}/" helm-charts/amanahfi-platform/values.yaml
    
    - name: Package Helm chart
      run: |
        helm package helm-charts/amanahfi-platform --destination .
    
    - name: Upload Helm chart to release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        files: |
          amanahfi-platform-*.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify stakeholders
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, helm-chart-release]
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.create-release.result }}
        channel: '#amanahfi-releases'
        fields: repo,commit,author,took
        custom_payload: |
          {
            "attachments": [
              {
                "color": "${{ needs.create-release.result == 'success' && 'good' || 'danger' }}",
                "title": "üöÄ AmanahFi Platform Release ${{ needs.prepare-release.outputs.version }}",
                "text": "${{ needs.create-release.result == 'success' && 'Release created successfully!' || 'Release creation failed!' }}",
                "fields": [
                  {
                    "title": "Version",
                    "value": "${{ needs.prepare-release.outputs.version }}",
                    "short": true
                  },
                  {
                    "title": "Pre-release",
                    "value": "${{ needs.prepare-release.outputs.is-prerelease }}",
                    "short": true
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Released by",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Release",
                    "url": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}"
                  },
                  {
                    "type": "button",
                    "text": "View Documentation",
                    "url": "https://docs.amanahfi.ae"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Send email notification
      if: needs.create-release.result == 'success' && needs.prepare-release.outputs.is-prerelease == 'false'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.amanahfi.ae
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "üöÄ AmanahFi Platform ${{ needs.prepare-release.outputs.version }} Released"
        to: stakeholders@amanahfi.ae,platform-team@amanahfi.ae
        from: releases@amanahfi.ae
        body: |
          Dear AmanahFi Stakeholders,
          
          We're excited to announce the release of AmanahFi Platform ${{ needs.prepare-release.outputs.version }}!
          
          üïå **Islamic Finance Features**
          - Enhanced Sharia compliance validation
          - Improved Murabaha and Musharakah calculations
          - Updated HSA integration
          
          üíé **CBDC Enhancements**
          - Digital Dirham performance improvements
          - Enhanced Corda network integration
          - Improved CBUAE compliance reporting
          
          üîí **Security & Compliance**
          - Latest security patches applied
          - Enhanced regulatory reporting
          - Improved audit capabilities
          
          üì¶ **Release Information**
          - Version: ${{ needs.prepare-release.outputs.version }}
          - Container Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}
          - Release Notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}
          
          üìö **Documentation**
          - API Documentation: https://api.amanahfi.ae/docs
          - Platform Documentation: https://docs.amanahfi.ae
          - Integration Guides: https://docs.amanahfi.ae/integration
          
          For technical support, please contact platform-support@amanahfi.ae
          
          Best regards,
          AmanahFi Platform Team