plugins {
    id 'banking-base-conventions'
    id 'jvm-test-suite'
}

// Testing-specific dependencies - High cohesion for testing concerns
dependencies {
    // Core testing framework
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    
    // Mocking
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    
    // Test containers
    testImplementation 'org.testcontainers:testcontainers:1.19.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:postgresql:1.19.3'
    
    // API testing
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'io.rest-assured:json-schema-validator:5.4.0'
    
    // Async testing
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    // External service mocking
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.1'
}

// Test suite configuration - Configuration cache safe
testing {
    suites {
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
                implementation 'org.springframework.boot:spring-boot-starter-test'
                implementation 'org.testcontainers:postgresql:1.19.3'
            }
            
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                        
                        useJUnitPlatform {
                            includeTags 'integration'
                        }
                        
                        systemProperty 'spring.profiles.active', 'test'
                        systemProperty 'testcontainers.reuse.enable', 'true'
                        
                        timeout = Duration.ofMinutes(10)
                    }
                }
            }
        }
        
        functionalTest(JvmTestSuite) {
            dependencies {
                implementation project()
                implementation 'io.rest-assured:rest-assured:5.4.0'
            }
            
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(integrationTest)
                        
                        useJUnitPlatform {
                            includeTags 'functional', 'e2e'
                        }
                        
                        timeout = Duration.ofMinutes(15)
                    }
                }
            }
        }
        
        performanceTest(JvmTestSuite) {
            dependencies {
                implementation project()
                implementation 'org.openjdk.jmh:jmh-core:1.37'
            }
            
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(functionalTest)
                        
                        useJUnitPlatform {
                            includeTags 'performance', 'load'
                        }
                        
                        minHeapSize = "1g"
                        maxHeapSize = "4g"
                        timeout = Duration.ofMinutes(30)
                    }
                }
            }
        }
    }
}

// Enhanced test configuration for all test tasks
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    
    // Performance configuration
    maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors().intdiv(2))
    
    // JVM configuration
    jvmArgs = [
        '-Xms512m',
        '-Xmx2g',
        '-XX:+UseG1GC',
        '-XX:MaxGCPauseMillis=100'
    ]
    
    // Test logging configuration
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "short"
        showStackTraces = false
        
        // Detailed logging for CI
        if (System.getenv('CI')) {
            events "started", "passed", "skipped", "failed"
            exceptionFormat "full"
            showStackTraces = true
        }
    }
    
    // System properties for banking tests
    systemProperty 'banking.test.enabled', 'true'
    systemProperty 'banking.test.environment', 'test'
    systemProperty 'java.awt.headless', 'true'
    
    // Test result processing - Configuration cache safe
    outputs.upToDateWhen { false }
    
    reports {
        html.required = true
        junitXml.required = true
    }
}

// Test data generation task - Configuration cache safe
tasks.register('generateBankingTestData') {
    description = 'Generate banking test data'
    group = 'banking-test'
    
    def outputDir = layout.buildDirectory.dir("test-data")
    outputs.dir(outputDir)
    
    doLast {
        def testDataDir = outputDir.get().asFile
        testDataDir.mkdirs()
        
        // Customer test data
        def customerData = [
            customers: [
                [
                    id: "CUST-001",
                    name: "Ahmed Al-Rashid", 
                    email: "ahmed@example.ae",
                    accountType: "ISLAMIC_SAVINGS",
                    balance: 10000.00,
                    currency: "AED"
                ],
                [
                    id: "CUST-002",
                    name: "Fatima Al-Zahra",
                    email: "fatima@example.ae", 
                    accountType: "MURABAHA_FINANCING",
                    balance: 50000.00,
                    currency: "AED"
                ]
            ]
        ]
        
        def customerFile = new File(testDataDir, "customers.json")
        customerFile.text = new groovy.json.JsonBuilder(customerData).toPrettyString()
        
        // Loan test data
        def loanData = [
            loans: [
                [
                    id: "LOAN-001",
                    customerId: "CUST-001",
                    type: "MURABAHA",
                    amount: 100000.00,
                    currency: "AED",
                    term: 60,
                    profitRate: 0.05,
                    status: "ACTIVE"
                ]
            ]
        ]
        
        def loanFile = new File(testDataDir, "loans.json")
        loanFile.text = new groovy.json.JsonBuilder(loanData).toPrettyString()
    }
}

// Test coverage validation task
tasks.register('validateBankingTestCoverage') {
    description = 'Validate test coverage meets banking standards'
    group = 'banking-test'
    
    dependsOn jacocoTestReport
    
    inputs.files(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
    
    doLast {
        def reportFile = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
        
        if (reportFile.exists()) {
            // Simple validation - could be enhanced with XML parsing
            def reportText = reportFile.text
            
            if (reportText.contains('<counter type="LINE"')) {
                logger.info("Test coverage report generated successfully")
            } else {
                logger.warn("Test coverage report may be incomplete")
            }
        } else {
            logger.warn("Test coverage report not found")
        }
    }
}

// Task dependencies - Clear separation
test.dependsOn generateBankingTestData
check.dependsOn validateBankingTestCoverage

// Test suite execution order
tasks.named('integrationTest') {
    mustRunAfter test
}
tasks.named('functionalTest') {
    mustRunAfter 'integrationTest'
}
tasks.named('performanceTest') {
    mustRunAfter 'functionalTest'
}