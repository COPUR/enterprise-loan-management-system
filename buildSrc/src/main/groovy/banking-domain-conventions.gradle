plugins {
    id 'banking-quality-conventions'
}

// Domain-specific dependencies - High cohesion for domain modeling
dependencies {
    // Domain modeling essentials
    api 'org.javamoney:moneta:1.4.2'
    api 'javax.money:money-api:1.1'
    
    // Jackson for domain events
    api 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    api 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.0'
    
    // Spring context for domain events
    api 'org.springframework:spring-context:6.1.0'
    api 'org.springframework:spring-tx:6.1.0'
    api 'org.springframework.security:spring-security-core:6.2.0'
    
    // Web infrastructure for shared kernel (optional dependency)
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    
    // OpenTelemetry for tracing (shared kernel needs this)
    api 'io.opentelemetry:opentelemetry-api:1.33.0'
    
    // Time handling
    implementation 'org.threeten:threeten-extra:1.7.2'
    
    // Domain testing
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'net.jqwik:jqwik:1.8.2'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.1'
}

// Domain-specific test configuration
test {
    useJUnitPlatform {
        includeTags 'unit', 'domain'
        excludeTags 'integration', 'functional'
    }
    
    timeout = Duration.ofMinutes(5) // Domain tests should be fast
    
    // Property-based testing configuration
    systemProperty 'jqwik.tries.default', '100'
    systemProperty 'jqwik.shrinking.mode', 'FULL'
    systemProperty 'jqwik.reporting.usejunitplatform', 'true'
    
    // Domain validation
    systemProperty 'banking.domain.validation.strict', 'true'
}

// Architecture testing task
tasks.register('architectureTest', Test) {
    description = 'Run domain architecture tests'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'architecture', 'domain-architecture'
    }
    
    systemProperty 'banking.architecture.test.mode', 'domain'
    
    // Configuration cache safe - no project references in task execution
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    
    timeout = Duration.ofMinutes(10)
}

// Property-based testing task
tasks.register('propertyTest', Test) {
    description = 'Run property-based tests with jqwik'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'property', 'property-based'
    }
    
    systemProperty 'jqwik.tries.default', '1000'
    systemProperty 'jqwik.shrinking.mode', 'FULL'
    
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    
    timeout = Duration.ofMinutes(15)
}

// Domain-specific javadoc configuration
javadoc {
    options.windowTitle = "Domain API Documentation"
    options.docTitle = "Banking Domain Layer API"
    options.header = "<b>Banking Domain Layer</b>"
    
    // Domain-specific documentation tags
    options.tags = [
        'aggregate:a:Aggregate Root:',
        'valueobject:a:Value Object:',
        'entity:a:Entity:', 
        'domainevent:a:Domain Event:',
        'invariant:a:Invariant:',
        'businessrule:a:Business Rule:'
    ]
    
    include '**/domain/**'
    include '**/model/**'
    include '**/event/**'
    
    exclude '**/infrastructure/**'
    exclude '**/web/**'
}

// Task dependencies
check.dependsOn architectureTest, propertyTest
architectureTest.mustRunAfter test
propertyTest.mustRunAfter architectureTest