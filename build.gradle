// =================================================================
// ENTERPRISE BANKING SYSTEM - ROOT BUILD CONFIGURATION
// =================================================================
// Multi-module enterprise banking application with DDD architecture
// BOM (Bill of Materials) for consistent dependency management
// =================================================================

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

// Enterprise Loan Management System
group = 'com.bank'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

// =================================================================
// ENTERPRISE DEPENDENCY VERSIONS (BOM)
// =================================================================
ext {
    // Core Framework Versions
    springBootVersion = '3.2.0'
    springCloudVersion = '2023.0.0'
    springSecurityVersion = '6.2.0'
    springDataVersion = '2023.1.0'
    
    // Database & Persistence
    postgresqlVersion = '42.7.1'
    flywayVersion = '10.2.0'
    hikariVersion = '5.1.0'
    h2Version = '2.2.224'
    
    // Mapping & Serialization
    mapstructVersion = '1.5.5.Final'
    jacksonVersion = '2.16.0'
    
    // Monitoring & Observability
    micrometerVersion = '1.12.0'
    logbackVersion = '7.4'
    prometheusVersion = '0.16.0'
    
    // Messaging & Communication
    kafkaVersion = '3.6.0'
    rabbitmqVersion = '3.0.10'
    
    // Testing Framework Versions
    testcontainersVersion = '1.19.3'
    archUnitVersion = '1.2.1'
    restAssuredVersion = '5.3.2'
    awaitilityVersion = '4.2.0'
    
    // Security & Compliance
    oauth2Version = '6.2.0'
    jwtVersion = '4.4.0'
    bouncyCastleVersion = '1.77'
    
    // Utilities & Libraries
    commonsLang3Version = '3.14.0'
    commonsCsvVersion = '1.10.0'
    guavaVersion = '32.1.3-jre'
    
    // Islamic Finance & Banking
    javaxMoneyVersion = '1.1'
    
    // Documentation
    openApiVersion = '2.2.0'
    
    // Build & Development
    lombokVersion = '1.18.30'
    spotbugsVersion = '4.8.2'
}

// =================================================================
// DEPENDENCY MANAGEMENT PLATFORM (BOM)
// =================================================================
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
    
    dependencies {
        // Database
        dependency "org.postgresql:postgresql:${postgresqlVersion}"
        dependency "org.flywaydb:flyway-core:${flywayVersion}"
        dependency "com.zaxxer:HikariCP:${hikariVersion}"
        dependency "com.h2database:h2:${h2Version}"
        
        // Mapping & Serialization
        dependency "org.mapstruct:mapstruct:${mapstructVersion}"
        dependency "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        dependency "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        dependency "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
        dependency "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
        
        // Monitoring & Observability
        dependency "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
        dependency "net.logstash.logback:logstash-logback-encoder:${logbackVersion}"
        
        // Testing
        dependency "com.tngtech.archunit:archunit-junit5:${archUnitVersion}"
        dependency "io.rest-assured:rest-assured:${restAssuredVersion}"
        dependency "io.rest-assured:json-path:${restAssuredVersion}"
        dependency "org.awaitility:awaitility:${awaitilityVersion}"
        
        // Security
        dependency "com.auth0:java-jwt:${jwtVersion}"
        dependency "org.bouncycastle:bcprov-jdk18on:${bouncyCastleVersion}"
        
        // Utilities
        dependency "org.apache.commons:commons-lang3:${commonsLang3Version}"
        dependency "org.apache.commons:commons-csv:${commonsCsvVersion}"
        dependency "com.google.guava:guava:${guavaVersion}"
        dependency "javax.money:money-api:${javaxMoneyVersion}"
        
        // Documentation
        dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
        
        // Development
        dependency "org.projectlombok:lombok:${lombokVersion}"
        dependency "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    }
}

dependencies {
    // Core Bounded Contexts
    implementation project(':shared-kernel')
    implementation project(':shared-infrastructure')
    implementation project(':customer-context:customer-application')
    implementation project(':loan-context:loan-application')
    // TODO: Create remaining contexts
    // implementation project(':payment-context:payment-application')
    // implementation project(':risk-context:risk-application')
    // implementation project(':compliance-context:compliance-application')
    
    // Islamic Finance Platform
    implementation project(':amanahfi-platform')
    // TODO: Enable when masrufi-framework is restructured
    // implementation project(':masrufi-framework')
    
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Database & Persistence
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'com.h2database:h2'
    
    // Resilience & Circuit Breaker
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.2.0'
    
    // Monitoring & Observability
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'net.logstash.logback:logstash-logback-encoder'
    
    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui'
    
    // Financial & Banking Standards
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'org.apache.commons:commons-csv'
    
    // Mapping & Code Generation
    implementation 'org.mapstruct:mapstruct'
    annotationProcessor 'org.mapstruct:mapstruct-processor'
    
    // Configuration & Development
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.tngtech.archunit:archunit-junit5'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.rest-assured:json-path'
    
    // BDD Testing
    testImplementation 'org.junit.platform:junit-platform-suite'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}


// Custom tasks for test execution
task useCaseTests(type: Test) {
    description = 'Run use case tests'
    group = 'verification'
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        includeTags 'use-case'
    }
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

task integrationTest(type: Test) {
    description = 'Run integration tests'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'integration'
    }
}

// Spring Boot configuration
springBoot {
    buildInfo()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
}

// =================================================================
// ENTERPRISE MULTI-MODULE CONFIGURATION
// =================================================================
allprojects {
    group = 'com.bank'
    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    
    // Apply dependency management from root project
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        }
    }
    
    // Common configurations for all subprojects
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    
    // Common test configuration
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
        // Enable parallel test execution
        systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
        systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    }
    
    // Common compiler arguments
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs = [
                '-parameters',
                '-Xlint:unchecked',
                '-Xlint:deprecation',
                '-Werror'
        ]
        options.encoding = 'UTF-8'
    }
    
    // Configure JAR packaging for library modules
    afterEvaluate {
        // Disable bootJar for library modules (not applications)
        if (project.name.endsWith('-domain') || 
            project.name.endsWith('-infrastructure') ||
            project.name.endsWith('-context') ||
            project.name == 'shared-kernel' ||
            project.name == 'shared-infrastructure') {
            
            if (tasks.findByName('bootJar')) {
                bootJar {
                    enabled = false
                }
            }
            
            jar {
                enabled = true
                archiveClassifier = ''
            }
        }
    }
}

// =================================================================
// ENTERPRISE QUALITY GATES & BUILD TASKS
// =================================================================

// Architecture Testing
task archTest(type: Test) {
    description = 'Run architecture tests to enforce DDD boundaries'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'architecture'
    }
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

// Contract Testing
task contractTest(type: Test) {
    description = 'Run contract tests between bounded contexts'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'contract'
    }
}

// Security Testing
task securityTest(type: Test) {
    description = 'Run security and compliance tests'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'security'
    }
}

// Performance Testing
task performanceTest(type: Test) {
    description = 'Run performance and load tests'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'performance'
    }
}

// Enterprise Quality Gate
task enterpriseQualityGate {
    description = 'Run all enterprise quality checks'
    group = 'verification'
    dependsOn test, archTest, contractTest, securityTest
}

// Build verification for production deployment
task productionBuild {
    description = 'Build and verify for production deployment'
    group = 'build'
    dependsOn build, enterpriseQualityGate
}