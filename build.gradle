plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

// Enterprise Loan Management System
group = 'com.bank.loan'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    springBootVersion = '3.2.0'
    springCloudVersion = '2023.0.0'
    mapstructVersion = '1.5.5.Final'
    testcontainersVersion = '1.19.3'
    archUnitVersion = '1.2.1'
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Database & Persistence
    implementation 'org.postgresql:postgresql:42.7.1'
    implementation 'org.flywaydb:flyway-core:10.2.0'
    runtimeOnly 'com.h2database:h2'
    
    // Resilience & Circuit Breaker
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.2.0'
    
    // Monitoring & Observability
    implementation 'io.micrometer:micrometer-registry-prometheus:1.12.0'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // Financial & Banking Standards
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'org.apache.commons:commons-csv:1.10.0'
    
    // Mapping & Code Generation
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    
    // Configuration & Development
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archUnitVersion}"
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.rest-assured:json-path'
    
    // BDD Testing
    testImplementation 'org.junit.platform:junit-platform-suite'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}


// Custom tasks for test execution
task useCaseTests(type: Test) {
    description = 'Run use case tests'
    group = 'verification'
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        includeTags 'use-case'
    }
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

task integrationTest(type: Test) {
    description = 'Run integration tests'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'integration'
    }
}

// Spring Boot configuration
springBoot {
    buildInfo()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
}

// Disable subproject configurations for now - running as monolith
allprojects {
    group = 'com.bank.loan'
    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
}