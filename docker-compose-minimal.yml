version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: banking-postgres
    environment:
      POSTGRES_DB: banking_system
      POSTGRES_USER: banking_user
      POSTGRES_PASSWORD: banking_secure_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - banking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U banking_user -d banking_system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: banking-redis
    command: redis-server --requirepass banking_redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Banking Application (simplified)
  banking-app:
    build:
      context: .
      dockerfile: docker/Dockerfile.minimal
    container_name: banking-app
    environment:
      SPRING_PROFILES_ACTIVE: docker,minimal
      DATABASE_URL: jdbc:postgresql://postgres:5432/banking_system
      DATABASE_USERNAME: banking_user
      DATABASE_PASSWORD: banking_secure_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: banking_redis_pass
      JAVA_OPTS: >-
        -Xmx1g -Xms512m
        --enable-preview
        -Djdk.virtualThreadScheduler.parallelism=10
        -XX:+UseZGC
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: banking-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus-minimal.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - banking-network
    depends_on:
      - banking-app

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: banking-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: banking_grafana_pass
      GF_SECURITY_ADMIN_USER: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - banking-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  banking-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16