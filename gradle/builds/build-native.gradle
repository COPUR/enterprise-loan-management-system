
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.graalvm.buildtools.native' version '0.10.4'
    id 'jacoco'
}

group = 'com.bank'
version = '1.0.0'
sourceCompatibility = '21'
targetCompatibility = '21'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    springBootVersion = '3.3.6'
    postgresqlVersion = '42.7.4'
    jedisVersion = '5.2.0'
    jjwtVersion = '0.12.6'
    mapstructVersion = '1.6.2'
    lombokVersion = '1.18.34'
    springdocVersion = '2.6.0'
}

dependencies {
    // Core Spring Boot for native compilation
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Database
    implementation "org.postgresql:postgresql:${postgresqlVersion}"
    runtimeOnly "com.h2database:h2:2.3.232"
    
    // Redis
    implementation "redis.clients:jedis:${jedisVersion}"
    
    // Security & JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    
    // Observability
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'net.logstash.logback:logstash-logback-encoder:8.0'
    
    // Utilities
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    
    // API Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

// GraalVM Native Image configuration
graalvmNative {
    binaries {
        main {
            imageName = 'enterprise-loan-management-native'
            mainClass = 'com.bank.loanmanagement.LoanManagementApplication'
            
            buildArgs.addAll([
                '--no-fallback',
                '--install-exit-handlers',
                '--enable-all-security-services',
                '--allow-incomplete-classpath',
                '--report-unsupported-elements-at-runtime',
                '-H:+UnlockExperimentalVMOptions',
                '-H:+UseContainerSupport',
                '-H:+UseG1GC',
                '-H:+InstallExitHandlers',
                '-H:+ReportUnsupportedElementsAtRuntime',
                '-H:+ReportExceptionStackTraces',
                '-H:+AddAllCharsets',
                '-H:IncludeResources=.*\\.properties$',
                '-H:IncludeResources=.*\\.yml$',
                '-H:IncludeResources=.*\\.yaml$',
                '-H:IncludeResources=.*\\.xml$',
                '-H:IncludeResources=.*\\.json$',
                '-H:IncludeResources=META-INF/.*',
                '-H:IncludeResources=static/.*',
                '-H:IncludeResources=templates/.*',
                '-H:EnableURLProtocols=http,https',
                '-H:+PrintFeatures',
                '-march=native',
                '-J-Xmx8g',
                '-J-Xms4g'
            ])
            
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21)
                vendor = JvmVendorSpec.matching("GraalVM")
            }
        }
        
        test {
            buildArgs.addAll([
                '--no-fallback',
                '-H:+UnlockExperimentalVMOptions',
                '-H:+ReportExceptionStackTraces',
                '-J-Xmx4g'
            ])
        }
    }
    
    metadataRepository {
        enabled = true
    }
}

// Spring AOT processing for native compilation
tasks.named('processAot') {
    args = [
        '--spring.aot.enabled=true',
        '--spring.native.enabled=true'
    ]
}

// Native test configuration
tasks.named('nativeTest') {
    systemProperty 'spring.profiles.active', 'native,test'
    systemProperty 'spring.main.web-application-type', 'none'
    
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = false
    }
}

// Native compile configuration
tasks.named('nativeCompile') {
    doFirst {
        println "========================================================================="
        println "ðŸ”¨ Building GraalVM Native Image"
        println "========================================================================="
        println "Target: enterprise-loan-management-native"
        println "Main Class: com.bank.loanmanagement.LoanManagementApplication"
        println "Memory: 8GB allocated for compilation"
        println "Estimated time: 10-15 minutes"
        println "========================================================================="
    }
    
    doLast {
        def nativeImage = file("${buildDir}/native/nativeCompile/enterprise-loan-management-native")
        if (nativeImage.exists()) {
            println "========================================================================="
            println "âœ… Native Image Build Successful!"
            println "========================================================================="
            println "Location: ${nativeImage.absolutePath}"
            println "Size: ${(nativeImage.length() / 1024 / 1024).round(2)} MB"
            println "========================================================================="
        }
    }
}

// Custom task for native image with runtime hints
task generateRuntimeHints(type: JavaExec) {
    group = 'native'
    description = 'Generate GraalVM runtime hints'
    
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.bank.loanmanagement.LoanManagementApplication'
    
    systemProperty 'spring.profiles.active', 'native'
    systemProperty 'spring.aot.generate-runtime-hints', 'true'
    
    jvmArgs = [
        '-agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/native-image',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseContainerSupport'
    ]
    
    args = ['--server.port=0', '--spring.main.web-application-type=none']
    
    doFirst {
        file('src/main/resources/META-INF/native-image').mkdirs()
    }
}

// Task for creating native distribution
task nativeDistribution(type: Tar) {
    dependsOn nativeCompile
    group = 'distribution'
    description = 'Create native distribution package'
    
    archiveBaseName = 'enterprise-loan-management-native'
    archiveVersion = version
    compression = Compression.GZIP
    
    from("${buildDir}/native/nativeCompile") {
        include 'enterprise-loan-management-native'
        fileMode = 0755
    }
    
    from('scripts') {
        include 'graalvm-boot.sh'
        into 'scripts'
        fileMode = 0755
    }
    
    from('src/main/resources') {
        include 'application*.yml'
        into 'config'
    }
    
    from('.') {
        include 'README.md'
        include 'LICENSE'
    }
}

// Boot JAR configuration for native compilation
bootJar {
    archiveFileName = 'enterprise-loan-management-system.jar'
    
    manifest {
        attributes(
            'Implementation-Title': 'Enterprise Loan Management System',
            'Implementation-Version': version,
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'GraalVM-Native-Ready': 'true'
        )
    }
}

// Test configuration
test {
    useJUnitPlatform()
    
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]
    
    systemProperty 'spring.profiles.active', 'test'
    
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

// Wrapper configuration
wrapper {
    gradleVersion = '8.11.1'
    distributionType = Wrapper.DistributionType.ALL
}
