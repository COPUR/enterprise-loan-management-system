# GraphQL Schema for Enterprise Loan Management System
# Optimized for MCP and LLM integration

scalar Date
scalar DateTime
scalar BigDecimal
scalar JSON

# Root Query Type
type Query {
    # Customer Operations
    customer(id: ID!): Customer
    customers(filter: CustomerFilter, page: PageInput): CustomerConnection
    customerCreditHistory(customerId: ID!, limit: Int = 10): [CreditTransaction!]!
    
    # Loan Operations
    loan(id: ID!): Loan
    loans(filter: LoanFilter, page: PageInput): LoanConnection
    loansByCustomer(customerId: ID!, status: LoanStatus): [Loan!]!
    loanInstallments(loanId: ID!): [LoanInstallment!]!
    
    # Payment Operations
    payment(id: ID!): Payment
    payments(filter: PaymentFilter, page: PageInput): PaymentConnection
    paymentsByLoan(loanId: ID!): [Payment!]!
    paymentCalculation(input: PaymentCalculationInput!): PaymentCalculation
    
    # Analytics and Reporting (LLM optimized)
    customerAnalytics(customerId: ID!): CustomerAnalytics
    loanAnalytics(period: AnalyticsPeriod!): LoanAnalytics
    paymentAnalytics(period: AnalyticsPeriod!): PaymentAnalytics
    riskAssessment(customerId: ID!): RiskAssessment
    
    # System Health and Monitoring
    systemHealth: SystemHealth
    circuitBreakerStatus: [CircuitBreakerState!]!
    sagaStates(status: SagaStatus): [SagaState!]!
    
    # Business Rules and Configuration
    businessRules: BusinessRulesConfig
    interestRates: [InterestRateConfig!]!
    
    # Natural Language Queries (LLM Integration)
    nlQuery(query: String!, context: NLContext): NLQueryResult
    recommendations(customerId: ID!, type: RecommendationType!): [Recommendation!]!
    
    # OpenAI Assistant Integration
    assistantRiskAnalysis(customerId: String!): AssistantAnalysisResult
    assistantLoanEligibility(customerId: String!, loanAmount: Float!, installmentCount: Int!): AssistantAnalysisResult
    assistantPaymentOptimization(loanId: String!, paymentAmount: Float!): AssistantAnalysisResult
    assistantBankingInsights(period: String): AssistantAnalysisResult
    assistantStatus: AssistantStatusResult
    
    # Interactive Risk Dashboard
    riskDashboardData: RiskDashboardResult
    customerRiskHeatmap: RiskHeatmapResult
    portfolioRiskAnalysis: PortfolioRiskResult
    aiRiskRecommendations: AIRecommendationsResult
}

# Root Mutation Type
type Mutation {
    # Customer Management
    createCustomer(input: CreateCustomerInput!): CustomerMutationResult!
    updateCustomer(id: ID!, input: UpdateCustomerInput!): CustomerMutationResult!
    reserveCredit(customerId: ID!, input: CreditReservationInput!): CreditReservationResult!
    releaseCredit(reservationId: ID!, input: CreditReleaseInput!): CreditReleaseResult!
    
    # Loan Management
    createLoan(input: CreateLoanInput!): LoanMutationResult!
    approveLoan(loanId: ID!, input: LoanApprovalInput!): LoanMutationResult!
    rejectLoan(loanId: ID!, input: LoanRejectionInput!): LoanMutationResult!
    
    # Payment Processing
    processPayment(input: ProcessPaymentInput!): PaymentMutationResult!
    schedulePayment(input: SchedulePaymentInput!): PaymentMutationResult!
    
    # SAGA Operations
    initiateLoanCreationSaga(input: LoanCreationSagaInput!): SagaMutationResult!
    compensateSaga(sagaId: ID!, reason: String!): SagaMutationResult!
    
    # Bulk Operations
    bulkPaymentProcessing(input: BulkPaymentInput!): BulkPaymentResult!
    bulkLoanStatusUpdate(input: BulkLoanUpdateInput!): BulkLoanUpdateResult!
    
    # OpenAI Assistant Operations
    processBankingQuery(query: String!, customerId: String): String
}

# Subscription Type (Real-time updates)
type Subscription {
    # Real-time loan status updates
    loanStatusUpdates(customerId: ID): LoanStatusUpdate!
    
    # Payment notifications
    paymentNotifications(customerId: ID): PaymentNotification!
    
    # SAGA progress tracking
    sagaProgress(sagaId: ID!): SagaProgressUpdate!
    
    # System alerts
    systemAlerts(severity: AlertSeverity): SystemAlert!
    
    # Circuit breaker state changes
    circuitBreakerUpdates: CircuitBreakerUpdate!
}

# Customer Types
type Customer {
    id: ID!
    customerId: String!
    firstName: String!
    lastName: String!
    fullName: String!
    email: String!
    phone: String
    dateOfBirth: Date
    address: Address
    creditLimit: BigDecimal!
    availableCredit: BigDecimal!
    usedCredit: BigDecimal!
    annualIncome: BigDecimal
    employmentStatus: EmploymentStatus!
    creditScore: Int
    accountStatus: AccountStatus!
    kycStatus: KYCStatus!
    riskLevel: RiskLevel!
    createdAt: DateTime!
    updatedAt: DateTime!
    
    # Related data
    loans: [Loan!]!
    payments: [Payment!]!
    creditHistory: [CreditTransaction!]!
    riskProfile: RiskProfile
}

type Address {
    street: String!
    city: String!
    state: String!
    zipCode: String!
    country: String!
}

# Loan Types
type Loan {
    id: ID!
    loanId: String!
    customer: Customer!
    loanAmount: BigDecimal!
    outstandingAmount: BigDecimal!
    interestRate: BigDecimal!
    installmentCount: Int!
    installmentAmount: BigDecimal!
    totalRepaymentAmount: BigDecimal!
    loanType: LoanType!
    purpose: String
    status: LoanStatus!
    applicationDate: DateTime!
    approvalDate: DateTime
    disbursementDate: DateTime
    maturityDate: Date
    
    # Related data
    installments: [LoanInstallment!]!
    payments: [Payment!]!
    documents: [LoanDocument!]!
    
    # Calculated fields
    paymentHistory: PaymentSummary!
    nextInstallment: LoanInstallment
    overdueAmount: BigDecimal!
    daysOverdue: Int!
}

type LoanInstallment {
    id: ID!
    installmentNumber: Int!
    dueDate: Date!
    principalAmount: BigDecimal!
    interestAmount: BigDecimal!
    totalAmount: BigDecimal!
    status: InstallmentStatus!
    paidDate: DateTime
    paidAmount: BigDecimal!
    discountApplied: BigDecimal!
    penaltyApplied: BigDecimal!
    remainingAmount: BigDecimal!
}

# Payment Types
type Payment {
    id: ID!
    paymentId: String!
    loan: Loan!
    customer: Customer!
    paymentAmount: BigDecimal!
    paymentDate: DateTime!
    paymentMethod: PaymentMethod!
    paymentReference: String
    status: PaymentStatus!
    processingFee: BigDecimal!
    totalAmount: BigDecimal!
    
    # Payment breakdown
    installmentPayments: [InstallmentPayment!]!
    calculation: PaymentCalculationResult!
}

type InstallmentPayment {
    installmentNumber: Int!
    paidAmount: BigDecimal!
    principalPaid: BigDecimal!
    interestPaid: BigDecimal!
    penaltyPaid: BigDecimal!
    discountApplied: BigDecimal!
}

# Analytics Types (LLM Optimized)
type CustomerAnalytics {
    customerId: ID!
    totalLoans: Int!
    activeLoans: Int!
    totalBorrowed: BigDecimal!
    totalRepaid: BigDecimal!
    outstandingAmount: BigDecimal!
    averagePaymentDelay: Float!
    creditUtilization: Float!
    riskScore: Float!
    paymentReliability: PaymentReliabilityScore!
    recommendations: [CustomerRecommendation!]!
}

type LoanAnalytics {
    period: AnalyticsPeriod!
    totalLoansCreated: Int!
    totalLoanAmount: BigDecimal!
    averageLoanAmount: BigDecimal!
    approvalRate: Float!
    defaultRate: Float!
    loanTypeDistribution: [LoanTypeMetric!]!
    interestRateDistribution: [InterestRateMetric!]!
    geographicDistribution: [GeographicMetric!]!
}

type PaymentAnalytics {
    period: AnalyticsPeriod!
    totalPayments: Int!
    totalPaymentAmount: BigDecimal!
    averagePaymentAmount: BigDecimal!
    onTimePaymentRate: Float!
    earlyPaymentRate: Float!
    latePaymentRate: Float!
    paymentMethodDistribution: [PaymentMethodMetric!]!
}

type RiskAssessment {
    customerId: ID!
    overallRiskScore: Float!
    creditRisk: Float!
    incomeRisk: Float!
    behavioralRisk: Float!
    marketRisk: Float!
    riskFactors: [RiskFactor!]!
    recommendations: [RiskRecommendation!]!
    nextReviewDate: Date!
}

# SAGA and Workflow Types
type SagaState {
    sagaId: ID!
    sagaType: SagaType!
    status: SagaStatus!
    currentStep: String!
    completedSteps: [SagaStep!]!
    compensationData: JSON
    startTime: DateTime!
    endTime: DateTime
    timeoutAt: DateTime!
    errorDetails: String
}

type SagaStep {
    stepName: String!
    status: SagaStepStatus!
    startTime: DateTime!
    endTime: DateTime
    duration: String!
    result: JSON
    errorMessage: String
}

# System Health Types
type SystemHealth {
    status: HealthStatus!
    timestamp: DateTime!
    services: [ServiceHealth!]!
    database: DatabaseHealth!
    cache: CacheHealth!
    circuitBreakers: [CircuitBreakerState!]!
    metrics: SystemMetrics!
}

type ServiceHealth {
    serviceName: String!
    status: HealthStatus!
    port: Int!
    responseTime: Float!
    errorRate: Float!
}

type CircuitBreakerState {
    name: String!
    state: CircuitBreakerStatus!
    failureRate: Float!
    callsCount: Int!
    failedCalls: Int!
    lastFailureTime: DateTime
    nextAttemptTime: DateTime
}

# Natural Language Processing Types
type NLQueryResult {
    query: String!
    intent: QueryIntent!
    entities: [QueryEntity!]!
    result: JSON!
    confidence: Float!
    suggestions: [String!]!
    executionTime: Float!
}

type QueryEntity {
    type: EntityType!
    value: String!
    confidence: Float!
    position: Int!
}

type Recommendation {
    type: RecommendationType!
    title: String!
    description: String!
    priority: RecommendationPriority!
    impact: String!
    actionRequired: Boolean!
    estimatedBenefit: String
    implementationEffort: ImplementationEffort!
}

# Input Types
input CustomerFilter {
    name: String
    email: String
    creditScore: IntRange
    accountStatus: AccountStatus
    riskLevel: RiskLevel
    dateRange: DateRangeInput
}

input LoanFilter {
    customerId: ID
    loanType: LoanType
    status: LoanStatus
    amountRange: BigDecimalRange
    dateRange: DateRangeInput
    overdueOnly: Boolean
}

input PaymentFilter {
    customerId: ID
    loanId: ID
    status: PaymentStatus
    paymentMethod: PaymentMethod
    dateRange: DateRangeInput
}

input PageInput {
    page: Int = 0
    size: Int = 20
    sort: [SortInput!]
}

input SortInput {
    field: String!
    direction: SortDirection!
}

input DateRangeInput {
    start: Date!
    end: Date!
}

input IntRange {
    min: Int
    max: Int
}

input BigDecimalRange {
    min: BigDecimal
    max: BigDecimal
}

input CreateCustomerInput {
    customerId: String!
    firstName: String!
    lastName: String!
    email: String!
    phone: String
    dateOfBirth: Date
    address: AddressInput!
    creditLimit: BigDecimal!
    annualIncome: BigDecimal!
    employmentStatus: EmploymentStatus!
    identificationNumber: String!
    identificationType: String!
}

input AddressInput {
    street: String!
    city: String!
    state: String!
    zipCode: String!
    country: String!
}

input CreateLoanInput {
    customerId: ID!
    loanAmount: BigDecimal!
    interestRate: BigDecimal!
    installmentCount: Int!
    loanType: LoanType!
    purpose: String
    collateralDetails: JSON
    employmentDetails: JSON
}

input ProcessPaymentInput {
    loanId: ID!
    paymentAmount: BigDecimal!
    paymentMethod: PaymentMethod!
    paymentReference: String
    installmentNumbers: [Int!]
    notes: String
}

input PaymentCalculationInput {
    loanId: ID!
    paymentAmount: BigDecimal!
    paymentDate: DateTime!
    installmentNumbers: [Int!]!
    simulateOnly: Boolean = true
}

input LoanCreationSagaInput {
    customerId: ID!
    loanAmount: BigDecimal!
    interestRate: BigDecimal!
    installmentCount: Int!
    loanType: LoanType!
    purpose: String
    sagaTimeout: Int = 300
}

input NLContext {
    userId: ID
    customerId: ID
    sessionId: String
    language: String = "en"
    domain: QueryDomain = GENERAL
}

# Enums
enum EmploymentStatus {
    EMPLOYED
    UNEMPLOYED
    SELF_EMPLOYED
    RETIRED
    STUDENT
}

enum AccountStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    CLOSED
}

enum KYCStatus {
    PENDING
    VERIFIED
    REJECTED
    EXPIRED
}

enum RiskLevel {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum LoanType {
    PERSONAL
    HOME
    AUTO
    BUSINESS
    EDUCATION
}

enum LoanStatus {
    PENDING_APPROVAL
    APPROVED
    REJECTED
    ACTIVE
    COMPLETED
    DEFAULTED
    CANCELLED
}

enum InstallmentStatus {
    PENDING
    PAID
    OVERDUE
    PARTIALLY_PAID
}

enum PaymentMethod {
    BANK_TRANSFER
    CREDIT_CARD
    DEBIT_CARD
    CASH
    CHECK
    ONLINE_PAYMENT
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
    REFUNDED
}

enum SagaType {
    LOAN_CREATION
    PAYMENT_PROCESSING
    CREDIT_ADJUSTMENT
    LOAN_CLOSURE
}

enum SagaStatus {
    STARTED
    IN_PROGRESS
    COMPLETED
    FAILED
    TIMEOUT
    COMPENSATED
}

enum SagaStepStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
    FAILED
    COMPENSATED
}

enum HealthStatus {
    UP
    DOWN
    DEGRADED
    UNKNOWN
}

enum CircuitBreakerStatus {
    CLOSED
    OPEN
    HALF_OPEN
}

enum QueryIntent {
    SEARCH
    ANALYTICS
    RECOMMENDATION
    TRANSACTION
    REPORT
    HELP
}

enum EntityType {
    CUSTOMER
    LOAN
    PAYMENT
    DATE
    AMOUNT
    PERCENTAGE
    STATUS
}

enum RecommendationType {
    CREDIT_INCREASE
    LOAN_RESTRUCTURE
    EARLY_PAYMENT
    RISK_MITIGATION
    PRODUCT_RECOMMENDATION
    PROCESS_IMPROVEMENT
}

enum RecommendationPriority {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum ImplementationEffort {
    LOW
    MEDIUM
    HIGH
}

enum AnalyticsPeriod {
    LAST_7_DAYS
    LAST_30_DAYS
    LAST_90_DAYS
    LAST_YEAR
    CUSTOM
}

enum SortDirection {
    ASC
    DESC
}

enum AlertSeverity {
    INFO
    WARNING
    ERROR
    CRITICAL
}

enum QueryDomain {
    GENERAL
    CUSTOMER_SERVICE
    LOAN_MANAGEMENT
    PAYMENT_PROCESSING
    ANALYTICS
    RISK_MANAGEMENT
}

# Connection Types (Pagination)
type CustomerConnection {
    nodes: [Customer!]!
    edges: [CustomerEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type CustomerEdge {
    node: Customer!
    cursor: String!
}

type LoanConnection {
    nodes: [Loan!]!
    edges: [LoanEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type LoanEdge {
    node: Loan!
    cursor: String!
}

type PaymentConnection {
    nodes: [Payment!]!
    edges: [PaymentEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type PaymentEdge {
    node: Payment!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

# Result Types
union CustomerMutationResult = CustomerSuccess | CustomerError
union LoanMutationResult = LoanSuccess | LoanError  
union PaymentMutationResult = PaymentSuccess | PaymentError
union SagaMutationResult = SagaSuccess | SagaError

type CustomerSuccess {
    customer: Customer!
    message: String!
}

type CustomerError {
    message: String!
    code: String!
    field: String
}

type LoanSuccess {
    loan: Loan!
    message: String!
}

type LoanError {
    message: String!
    code: String!
    field: String
}

type PaymentSuccess {
    payment: Payment!
    message: String!
}

type PaymentError {
    message: String!
    code: String!
    field: String
}

type SagaSuccess {
    sagaId: ID!
    status: SagaStatus!
    message: String!
}

type SagaError {
    message: String!
    code: String!
    sagaId: ID
}

# Supporting types that need definitions
type CreditTransaction {
    id: ID!
    transactionType: String!
    amount: BigDecimal!
    previousBalance: BigDecimal!
    newBalance: BigDecimal!
    description: String!
    timestamp: DateTime!
}

type RiskProfile {
    overallRisk: RiskLevel!
    paymentHistory: Float!
    creditUtilization: Float!
    incomeStability: Float!
    lastUpdated: DateTime!
}

type LoanDocument {
    id: ID!
    documentType: String!
    fileName: String!
    uploadDate: DateTime!
    status: String!
}

type PaymentSummary {
    totalPaid: BigDecimal!
    remainingAmount: BigDecimal!
    lastPaymentDate: DateTime
    nextDueDate: Date
}

type PaymentReliabilityScore {
    score: Float!
    onTimePercentage: Float!
    averageDelayDays: Float!
    totalPayments: Int!
}

type CustomerRecommendation {
    type: String!
    description: String!
    priority: RecommendationPriority!
}

type LoanTypeMetric {
    loanType: LoanType!
    count: Int!
    totalAmount: BigDecimal!
    percentage: Float!
}

type InterestRateMetric {
    rateRange: String!
    count: Int!
    averageRate: BigDecimal!
}

type GeographicMetric {
    location: String!
    count: Int!
    totalAmount: BigDecimal!
}

type RiskFactor {
    factor: String!
    impact: Float!
    description: String!
}

type RiskRecommendation {
    action: String!
    description: String!
    urgency: RecommendationPriority!
}

type DatabaseHealth {
    status: HealthStatus!
    connectionCount: Int!
    responseTime: Float!
}

type CacheHealth {
    status: HealthStatus!
    hitRate: Float!
    memoryUsage: Float!
}

type SystemMetrics {
    cpuUsage: Float!
    memoryUsage: Float!
    activeConnections: Int!
    requestsPerSecond: Float!
}

type PaymentCalculation {
    baseAmount: BigDecimal!
    discountAmount: BigDecimal!
    penaltyAmount: BigDecimal!
    finalAmount: BigDecimal!
    earlyPaymentDays: Int!
    latePaymentDays: Int!
    installmentBreakdown: [InstallmentCalculation!]!
}

type InstallmentCalculation {
    installmentNumber: Int!
    originalAmount: BigDecimal!
    discountApplied: BigDecimal!
    penaltyApplied: BigDecimal!
    amountToPay: BigDecimal!
}

type PaymentCalculationResult {
    calculation: PaymentCalculation!
    paymentAdvice: PaymentAdvice!
}

type PaymentAdvice {
    recommendedAmount: BigDecimal!
    savingsOpportunity: BigDecimal!
    paymentWindow: PaymentWindow!
}

type PaymentWindow {
    earlyPaymentUntil: Date
    gracePeriodUntil: Date
    penaltyStartsFrom: Date
}

type BusinessRulesConfig {
    allowedInstallmentCounts: [Int!]!
    minInterestRate: BigDecimal!
    maxInterestRate: BigDecimal!
    earlyPaymentDiscountRate: BigDecimal!
    latePaymentPenaltyRate: BigDecimal!
    maxLoanAmount: BigDecimal!
    minCreditScore: Int!
}

type InterestRateConfig {
    loanType: LoanType!
    minRate: BigDecimal!
    maxRate: BigDecimal!
    baseRate: BigDecimal!
    riskAdjustment: BigDecimal!
}

type PaymentMethodMetric {
    method: PaymentMethod!
    count: Int!
    totalAmount: BigDecimal!
    percentage: Float!
}

# Real-time update types
type LoanStatusUpdate {
    loanId: ID!
    customerId: ID!
    oldStatus: LoanStatus!
    newStatus: LoanStatus!
    timestamp: DateTime!
    reason: String
}

type PaymentNotification {
    paymentId: ID!
    loanId: ID!
    customerId: ID!
    amount: BigDecimal!
    status: PaymentStatus!
    timestamp: DateTime!
}

type SagaProgressUpdate {
    sagaId: ID!
    currentStep: String!
    status: SagaStatus!
    progress: Float!
    estimatedCompletion: DateTime
}

type SystemAlert {
    id: ID!
    severity: AlertSeverity!
    message: String!
    component: String!
    timestamp: DateTime!
    resolved: Boolean!
}

type CircuitBreakerUpdate {
    name: String!
    oldState: CircuitBreakerStatus!
    newState: CircuitBreakerStatus!
    timestamp: DateTime!
}

# Additional input types
input UpdateCustomerInput {
    firstName: String
    lastName: String
    email: String
    phone: String
    address: AddressInput
    annualIncome: BigDecimal
    employmentStatus: EmploymentStatus
}

input CreditReservationInput {
    amount: BigDecimal!
    purpose: String!
    timeoutMinutes: Int = 5
}

input CreditReleaseInput {
    reason: String!
    actualAmountUsed: BigDecimal
}

input LoanApprovalInput {
    approvedAmount: BigDecimal
    approvedRate: BigDecimal
    conditions: [String!]
    notes: String
}

input LoanRejectionInput {
    reason: String!
    notes: String
}

input SchedulePaymentInput {
    loanId: ID!
    paymentAmount: BigDecimal!
    scheduledDate: DateTime!
    paymentMethod: PaymentMethod!
    recurring: Boolean = false
}

input BulkPaymentInput {
    payments: [ProcessPaymentInput!]!
    batchId: String
}

input BulkLoanUpdateInput {
    loanIds: [ID!]!
    status: LoanStatus!
    reason: String!
}

# Additional result types
type CreditReservationResult {
    reservationId: ID!
    amount: BigDecimal!
    expiresAt: DateTime!
    success: Boolean!
    message: String!
}

type CreditReleaseResult {
    reservationId: ID!
    releasedAmount: BigDecimal!
    success: Boolean!
    message: String!
}

type BulkPaymentResult {
    batchId: ID!
    totalProcessed: Int!
    successful: Int!
    failed: Int!
    results: [PaymentMutationResult!]!
}

type BulkLoanUpdateResult {
    batchId: ID!
    totalProcessed: Int!
    successful: Int!
    failed: Int!
    results: [LoanMutationResult!]!
}

# OpenAI Assistant Types
type AssistantAnalysisResult {
    customerId: String
    loanId: String
    analysisType: String!
    analysis: String!
    timestamp: DateTime!
    success: Boolean!
    error: String
}

type AssistantStatusResult {
    configured: Boolean!
    service: String!
    capabilities: [String!]!
    timestamp: DateTime!
}

# Risk Dashboard Types
type RiskDashboardResult {
    riskMetrics: RiskMetrics!
    portfolioHealth: PortfolioHealth!
    customerRiskDistribution: CustomerRiskDistribution!
    loanPerformanceTrends: LoanPerformanceTrends!
    aiInsights: AIInsights!
    riskAlerts: [RiskAlert!]!
    timestamp: DateTime!
    status: String!
}

type RiskMetrics {
    overallRiskScore: Float!
    totalCustomers: Int!
    activeCustomers: Int!
    totalLoans: Int!
    totalOutstanding: Float!
    overdueLoansCount: Int!
    criticalOverdueCount: Int!
    defaultRate: Float!
    criticalRiskRate: Float!
    lastUpdated: String!
}

type PortfolioHealth {
    creditScoreDistribution: CreditScoreDistribution!
    paymentPerformance: PaymentPerformance!
    riskDistribution: [RiskDistributionItem!]!
    healthScore: Float!
    timestamp: DateTime!
}

type CreditScoreDistribution {
    excellent: Int!
    good: Int!
    fair: Int!
    poor: Int!
    avg_credit_score: Float!
}

type PaymentPerformance {
    on_time_rate: Float!
    delinquency_rate: Float!
    avg_interest_rate: Float!
}

type RiskDistributionItem {
    risk_level: String!
    count: Int!
    avg_credit_limit: Float!
}

type CustomerRiskDistribution {
    customerDetails: [CustomerRiskDetail!]!
    riskCategorySummary: JSON!
    riskCategoryAmounts: JSON!
    totalCustomers: Int!
    timestamp: DateTime!
}

type CustomerRiskDetail {
    customer_id: String!
    full_name: String!
    credit_score: Int!
    risk_level: String!
    credit_limit: Float!
    available_credit: Float!
    total_outstanding: Float!
    max_days_overdue: Int!
    calculated_risk_category: String!
}

type LoanPerformanceTrends {
    loanDetails: [LoanPerformanceDetail!]!
    performanceBreakdown: JSON!
    performanceAmounts: JSON!
    totalPortfolioValue: Float!
    totalAmountPaid: Float!
    portfolioCompletionRate: Float!
    timestamp: DateTime!
}

type LoanPerformanceDetail {
    loan_id: String!
    customer_id: String!
    customer_name: String!
    loan_amount: Float!
    outstanding_amount: Float!
    interest_rate_percent: Float!
    installment_count: Int!
    days_overdue: Int!
    status: String!
    created_at: DateTime!
    due_date: Date!
    performance_status: String!
    amount_paid: Float!
    completion_percentage: Float!
}

type AIInsights {
    insights: String!
    portfolioSummary: String!
    generatedAt: DateTime!
    source: String!
}

type RiskAlert {
    alert_type: String!
    alert_message: String!
    severity: String!
    customer_id: String
    customer_name: String
    loan_id: String
    outstanding_amount: Float
    days_overdue: Int
    credit_score: Int
    credit_limit: Float
    available_credit: Float
    timestamp: DateTime!
}

type RiskHeatmapResult {
    criticalRisk: [CustomerRiskHeatmapItem!]!
    highRisk: [CustomerRiskHeatmapItem!]!
    mediumRisk: [CustomerRiskHeatmapItem!]!
    lowRisk: [CustomerRiskHeatmapItem!]!
    totalCustomers: Int!
    riskZoneCounts: RiskZoneCounts!
    generatedAt: DateTime!
}

type CustomerRiskHeatmapItem {
    customer_id: String!
    customer_name: String!
    credit_score: Int!
    risk_level: String!
    credit_limit: Float!
    available_credit: Float!
    outstanding_amount: Float!
    days_overdue: Int!
    risk_heat_score: Int!
}

type RiskZoneCounts {
    critical: Int!
    high: Int!
    medium: Int!
    low: Int!
}

type PortfolioRiskResult {
    riskMetrics: RiskMetrics!
    portfolioHealth: PortfolioHealth!
    customerDistribution: CustomerRiskDistribution!
    performanceTrends: LoanPerformanceTrends!
    riskAlerts: [RiskAlert!]!
    riskHeatmap: RiskHeatmapResult!
    overallRiskAssessment: String!
    analysisTimestamp: DateTime!
}

type AIRecommendationsResult {
    recommendations: String!
    portfolioSummary: String!
    generatedAt: DateTime!
    confidence: String!
}