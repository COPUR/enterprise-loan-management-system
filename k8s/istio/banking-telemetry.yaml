# Enhanced Enterprise Banking System - Observability & Compliance
# Comprehensive telemetry, audit, and compliance configuration

# Telemetry v2 Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: banking-telemetry
  namespace: banking-system
spec:
  metrics:
  # Custom banking metrics
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        banking_service:
          value: "%{CLUSTER_NAME}-%{SOURCE_APP}"
        compliance_level:
          value: "FAPI"
        audit_required:
          value: "true"
    - match:
        metric: requests_total
      tagOverrides:
        banking_transaction_type:
          value: "%{REQUEST_HEADERS['x-transaction-type']}"
        customer_segment:
          value: "%{REQUEST_HEADERS['x-customer-segment']}"
        risk_level:
          value: "%{REQUEST_HEADERS['x-risk-level']}"
  
  # Access logging for audit
  accessLogging:
  - providers:
    - name: otel
  - providers:
    - name: audit-logger
  
  # Distributed tracing
  tracing:
  - providers:
    - name: jaeger
---
# Custom Banking Metrics
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: banking-custom-metrics
  namespace: banking-system
spec:
  metrics:
  # Loan application metrics
  - metrics:
    - name: banking_loan_applications_total
      value: "1"
      tags:
        loan_type: request.headers['x-loan-type'] | 'unknown'
        approval_status: request.headers['x-approval-status'] | 'pending'
        loan_amount_range: request.headers['x-loan-amount-range'] | 'unknown'
      unit: UNSPECIFIED
    overrides:
    - match:
        mode: CLIENT
        metric: banking_loan_applications_total
      operation: UPSERT
  
  # Payment processing metrics
  - metrics:
    - name: banking_payments_total
      value: "1"
      tags:
        payment_method: request.headers['x-payment-method'] | 'unknown'
        payment_status: request.headers['x-payment-status'] | 'pending'
        amount_range: request.headers['x-amount-range'] | 'unknown'
        currency: request.headers['x-currency'] | 'USD'
      unit: UNSPECIFIED
    overrides:
    - match:
        mode: CLIENT
        metric: banking_payments_total
      operation: UPSERT
  
  # Fraud detection metrics
  - metrics:
    - name: banking_fraud_score
      value: request.headers['x-fraud-score'] | '0'
      tags:
        risk_level: request.headers['x-risk-level'] | 'low'
        detection_method: request.headers['x-detection-method'] | 'rule'
      unit: UNSPECIFIED
    overrides:
    - match:
        mode: CLIENT
        metric: banking_fraud_score
      operation: UPSERT
  
  # FAPI compliance metrics
  - metrics:
    - name: banking_fapi_compliance_total
      value: "1"
      tags:
        fapi_version: request.headers['x-fapi-version'] | 'unknown'
        financial_id: request.headers['x-fapi-financial-id'] | 'unknown'
        interaction_id: request.headers['x-fapi-interaction-id'] | 'unknown'
      unit: UNSPECIFIED
    overrides:
    - match:
        mode: CLIENT
        metric: banking_fapi_compliance_total
      operation: UPSERT
---
# Audit Logging Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: audit-logging-config
  namespace: banking-system
data:
  audit-policy.yaml: |
    apiVersion: audit.k8s.io/v1
    kind: Policy
    rules:
    # Log all banking API requests
    - level: RequestResponse
      namespaces: ["banking-system"]
      resources:
      - group: ""
        resources: ["*"]
      omitStages:
      - RequestReceived
    
    # Log authentication events
    - level: Metadata
      namespaces: ["keycloak"]
      resources:
      - group: ""
        resources: ["*"]
    
    # Log security policy violations
    - level: Request
      namespaces: ["istio-system"]
      resources:
      - group: "security.istio.io"
        resources: ["authorizationpolicies", "requestauthentications"]
---
# Jaeger Tracing Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
  namespace: istio-system
data:
  jaeger.yaml: |
    apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    metadata:
      name: banking-tracing
    spec:
      values:
        pilot:
          traceSampling: 100.0
        global:
          tracer:
            zipkin:
              address: jaeger-collector.istio-system:9411
        meshConfig:
          defaultConfig:
            tracing:
              sampling: 100.0
              custom_tags:
                banking_service:
                  literal:
                    value: "enhanced-banking-system"
                compliance_framework:
                  literal:
                    value: "FAPI-BIAN-PCI"
                audit_level:
                  literal:
                    value: "high"
---
# PCI DSS Compliance Telemetry
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: pci-compliance-telemetry
  namespace: banking-system
spec:
  accessLogging:
  - providers:
    - name: pci-audit-logger
  - filter:
      expression: |
        has(request.headers['authorization']) &&
        (
          request.url_path.startsWith('/api/payments/') ||
          request.url_path.startsWith('/api/cards/') ||
          request.url_path.startsWith('/api/transfers/')
        )
---
# OWASP Top 10 Security Monitoring
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: security-monitoring
  namespace: banking-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.wasm
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          config:
            name: security_monitoring
            vm_config:
              vm_id: security_monitoring
              runtime: envoy.wasm.runtime.v8
              inline_code: |
                class SecurityMonitor {
                  constructor(rootContext) {
                    this.rootContext = rootContext;
                  }
                  
                  onRequestHeaders() {
                    // SQL Injection Detection
                    const userAgent = this.getRequestHeader('user-agent');
                    const queryString = this.getRequestHeader(':path');
                    
                    if (this.detectSQLInjection(queryString)) {
                      this.logSecurityEvent('SQL_INJECTION_ATTEMPT', {
                        path: queryString,
                        userAgent: userAgent,
                        severity: 'HIGH'
                      });
                      return Headers.StopIteration;
                    }
                    
                    // XSS Detection
                    if (this.detectXSS(queryString)) {
                      this.logSecurityEvent('XSS_ATTEMPT', {
                        path: queryString,
                        userAgent: userAgent,
                        severity: 'HIGH'
                      });
                      return Headers.StopIteration;
                    }
                    
                    return Headers.Continue;
                  }
                  
                  detectSQLInjection(input) {
                    const patterns = [
                      /('|(\-\-)|(;)|(\||\|)|(\*|\*))/i,
                      /(union|select|insert|delete|update|drop|create|alter)/i
                    ];
                    return patterns.some(pattern => pattern.test(input));
                  }
                  
                  detectXSS(input) {
                    const patterns = [
                      /<script[^>]*>.*?<\/script>/gi,
                      /javascript:/i,
                      /on\w+=/i
                    ];
                    return patterns.some(pattern => pattern.test(input));
                  }
                  
                  logSecurityEvent(eventType, details) {
                    console.log(JSON.stringify({
                      timestamp: new Date().toISOString(),
                      event_type: eventType,
                      source_ip: this.getRequestHeader('x-forwarded-for'),
                      details: details
                    }));
                  }
                }
---
# Compliance Dashboard Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: compliance-dashboard
  namespace: banking-system
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "Enhanced Banking System - Compliance Dashboard",
        "tags": ["banking", "compliance", "security"],
        "timezone": "utc",
        "panels": [
          {
            "title": "FAPI Compliance Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(banking_fapi_compliance_total[5m])) by (fapi_version)",
                "legendFormat": "FAPI {{fapi_version}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 0.95},
                    {"color": "green", "value": 0.99}
                  ]
                }
              }
            }
          },
          {
            "title": "PCI DSS Audit Events",
            "type": "logs",
            "targets": [
              {
                "expr": "{namespace=\"banking-system\"} |= \"PCI\" | json",
                "legendFormat": "PCI Audit Events"
              }
            ]
          },
          {
            "title": "Security Incidents (OWASP Top 10)",
            "type": "table",
            "targets": [
              {
                "expr": "sum by (event_type, severity) (rate(security_incidents_total[1h]))",
                "legendFormat": "{{event_type}} - {{severity}}"
              }
            ]
          },
          {
            "title": "Fraud Detection Scores",
            "type": "heatmap",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(banking_fraud_score_bucket[5m]))",
                "legendFormat": "95th Percentile Fraud Score"
              }
            ]
          },
          {
            "title": "Authentication Success Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{response_code=~\"2..\"}[5m])) / sum(rate(istio_requests_total[5m]))",
                "legendFormat": "Success Rate"
              }
            ]
          }
        ]
      }
    }
---
# Audit Retention Policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: audit-retention-policy
  namespace: banking-system
data:
  retention-policy.yaml: |
    # Banking audit log retention requirements
    retention_policies:
      # PCI DSS: 1 year minimum
      payment_data:
        retention_period: "365d"
        storage_class: "encrypted"
        compliance_framework: "PCI_DSS"
      
      # SOX: 7 years for financial records
      financial_transactions:
        retention_period: "2555d"  # 7 years
        storage_class: "archival"
        compliance_framework: "SOX"
      
      # GDPR: varies by data type
      customer_data:
        retention_period: "1095d"  # 3 years
        storage_class: "encrypted"
        compliance_framework: "GDPR"
        deletion_policy: "on_request"
      
      # Security logs: 2 years
      security_events:
        retention_period: "730d"
        storage_class: "hot"
        compliance_framework: "NIST"
      
      # Operational logs: 90 days
      operational_logs:
        retention_period: "90d"
        storage_class: "standard"
        compliance_framework: "internal"
---
# Compliance Monitoring Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-monitor
  namespace: banking-system
  labels:
    app: compliance-monitor
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: compliance-monitor
      version: v1
  template:
    metadata:
      labels:
        app: compliance-monitor
        version: v1
    spec:
      containers:
      - name: compliance-monitor
        image: banking/compliance-monitor:latest
        env:
        - name: COMPLIANCE_FRAMEWORKS
          value: "PCI_DSS,SOX,GDPR,FAPI,BIAN"
        - name: AUDIT_LEVEL
          value: "HIGH"
        - name: RETENTION_POLICY_CONFIG
          value: "/etc/compliance/retention-policy.yaml"
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: retention-config
          mountPath: /etc/compliance
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: retention-config
        configMap:
          name: audit-retention-policy
      securityContext:
        fsGroup: 1000
---
# Compliance Monitor Service
apiVersion: v1
kind: Service
metadata:
  name: compliance-monitor
  namespace: banking-system
  labels:
    app: compliance-monitor
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: compliance-monitor