apiVersion: admissionregistration.k8s.io/v1
kind: MutatingAdmissionWebhook
metadata:
  name: banking-sidecar-injection
  labels:
    app: banking-sidecar-injector
    compliance: fapi-2.0
webhooks:
- name: banking-sidecar.injection.webhook
  clientConfig:
    service:
      name: banking-sidecar-injector
      namespace: banking
      path: "/inject"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
  namespaceSelector:
    matchLabels:
      banking-sidecar-injection: enabled
  objectSelector:
    matchLabels:
      banking-sidecar: enabled

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: banking-sidecar-injector
  namespace: banking
  labels:
    app: banking-sidecar-injector
    version: v1.0
    compliance: fapi-2.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: banking-sidecar-injector
  template:
    metadata:
      labels:
        app: banking-sidecar-injector
        version: v1.0
        compliance: fapi-2.0
      annotations:
        sidecar.istio.io/inject: "false"  # Don't inject into the injector itself
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: banking-sidecar-injector
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: sidecar-injector
        image: banking-registry.com/sidecar/banking-injector:v1.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        ports:
        - name: https
          containerPort: 8443
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: TLS_CERT_FILE
          value: "/etc/certs/tls.crt"
        - name: TLS_PRIVATE_KEY_FILE
          value: "/etc/certs/tls.key"
        - name: SIDECAR_CONFIG_FILE
          value: "/etc/config/sidecar-injection-template.yaml"
        - name: BANKING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: BANKING_COMPLIANCE_LEVEL
          value: "FAPI-2.0"
        - name: BANKING_SECURITY_LEVEL
          value: "HIGH"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/certs
          readOnly: true
        - name: sidecar-config
          mountPath: /etc/config
          readOnly: true
        - name: banking-security-config
          mountPath: /etc/banking/security
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /ready
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6

      volumes:
      - name: webhook-certs
        secret:
          secretName: banking-sidecar-injector-certs
          defaultMode: 0644
      - name: sidecar-config
        configMap:
          name: banking-sidecar-template
          defaultMode: 0644
      - name: banking-security-config
        configMap:
          name: banking-security-config
          defaultMode: 0644
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: banking-sidecar-injector
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: banking-sidecar-injector
  namespace: banking
  labels:
    app: banking-sidecar-injector
    compliance: fapi-2.0
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: banking-sidecar-injector
  ports:
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: banking-sidecar-injector
  namespace: banking
  labels:
    app: banking-sidecar-injector
    compliance: fapi-2.0
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: banking-sidecar-injector
  labels:
    app: banking-sidecar-injector
    compliance: fapi-2.0
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: banking-sidecar-injector
  labels:
    app: banking-sidecar-injector
    compliance: fapi-2.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: banking-sidecar-injector
subjects:
- kind: ServiceAccount
  name: banking-sidecar-injector
  namespace: banking

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: banking-sidecar-injector-config
  namespace: banking
  labels:
    app: banking-sidecar-injector
    compliance: fapi-2.0
data:
  config.yaml: |
    # Banking Sidecar Injector Configuration
    server:
      port: 8443
      tls:
        cert_file: "/etc/certs/tls.crt"
        key_file: "/etc/certs/tls.key"
      
    injection:
      # Injection Rules
      enabled: true
      fail_on_error: true
      default_policy: "disabled"
      
      # Banking Specific Configuration
      banking:
        compliance_level: "FAPI-2.0"
        security_level: "HIGH"
        audit_level: "FULL"
        encryption_required: true
        
      # Sidecar Configuration
      sidecars:
        - name: "banking-security-sidecar"
          image: "banking-registry.com/security/banking-sidecar:v1.0.0"
          enabled: true
          required: true
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
              
        - name: "banking-audit-sidecar"
          image: "banking-registry.com/audit/banking-audit:v1.0.0"
          enabled: true
          required: true
          resources:
            requests:
              cpu: "25m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
              
        - name: "banking-compliance-sidecar"
          image: "banking-registry.com/compliance/banking-compliance:v1.0.0"
          enabled: true
          required: false
          resources:
            requests:
              cpu: "25m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
              
        - name: "banking-metrics-sidecar"
          image: "banking-registry.com/observability/banking-metrics:v1.0.0"
          enabled: true
          required: false
          resources:
            requests:
              cpu: "25m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
      
      # Injection Policies
      policies:
        # Always inject for banking services
        - selector:
            matchLabels:
              banking-service: "true"
          action: "inject"
          sidecars: ["banking-security-sidecar", "banking-audit-sidecar"]
          
        # Inject compliance sidecar for regulatory services
        - selector:
            matchLabels:
              regulatory-compliance: "required"
          action: "inject"
          sidecars: ["banking-compliance-sidecar"]
          
        # Inject metrics for all services
        - selector:
            matchLabels:
              monitoring: "enabled"
          action: "inject"
          sidecars: ["banking-metrics-sidecar"]
          
        # Skip injection for system services
        - selector:
            matchLabels:
              system-service: "true"
          action: "skip"
      
      # Volume Configurations
      volumes:
        - name: "banking-security-config"
          configMap:
            name: "banking-security-config"
        - name: "banking-audit-config"
          configMap:
            name: "banking-audit-config"
        - name: "banking-compliance-config"
          configMap:
            name: "banking-compliance-config"
        - name: "banking-metrics-config"
          configMap:
            name: "banking-metrics-config"
        - name: "banking-certs"
          secret:
            secretName: "banking-tls-certs"
    
    # Webhook Configuration
    webhook:
      namespaces:
        # Enable injection for banking namespace
        - name: "banking"
          enabled: true
          default_policy: "inject"
        # Enable injection for specific application namespaces
        - name: "loan-services"
          enabled: true
          default_policy: "inject"
        - name: "payment-services"
          enabled: true
          default_policy: "inject"
        - name: "customer-services"
          enabled: true
          default_policy: "inject"
      
      # Exclusion Rules
      exclusions:
        namespaces:
          - "kube-system"
          - "kube-public"
          - "istio-system"
        labels:
          - "banking-sidecar-injection=disabled"
          - "sidecar-injection=disabled"
    
    # Logging Configuration
    logging:
      level: "INFO"
      format: "json"
      structured: true
      
    # Metrics Configuration
    metrics:
      enabled: true
      port: 9090
      path: "/metrics"
      
    # Health Check Configuration
    health:
      enabled: true
      liveness_path: "/health"
      readiness_path: "/ready"

---
# Certificate generation job for webhook TLS
apiVersion: batch/v1
kind: Job
metadata:
  name: banking-sidecar-injector-cert-gen
  namespace: banking
  labels:
    app: banking-sidecar-injector
    component: cert-gen
    compliance: fapi-2.0
spec:
  template:
    metadata:
      labels:
        app: banking-sidecar-injector
        component: cert-gen
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: cert-gen
        image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.3.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        args:
        - create
        - --host=banking-sidecar-injector,banking-sidecar-injector.banking.svc
        - --namespace=banking
        - --secret-name=banking-sidecar-injector-certs
        - --cert-name=tls.crt
        - --key-name=tls.key
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 50Mi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: banking-sidecar-examples
  namespace: banking
  labels:
    app: banking-sidecar
    component: examples
    compliance: fapi-2.0
data:
  loan-service-example.yaml: |
    # Example: Loan Service with Banking Sidecars
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: loan-service
      namespace: banking
      labels:
        app: loan-service
        banking-service: "true"
        regulatory-compliance: "required"
        monitoring: "enabled"
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: loan-service
      template:
        metadata:
          labels:
            app: loan-service
            version: v1.0
            banking-service: "true"
            banking-sidecar: "enabled"
            regulatory-compliance: "required"
            monitoring: "enabled"
          annotations:
            banking.sidecar/compliance-level: "FAPI-2.0"
            banking.sidecar/audit-enabled: "true"
            banking.sidecar/security-level: "high"
        spec:
          containers:
          - name: loan-service
            image: banking-registry.com/services/loan-service:v1.0.0
            ports:
            - containerPort: 8080
            env:
            - name: BANKING_COMPLIANCE_LEVEL
              value: "FAPI-2.0"
            resources:
              requests:
                cpu: 200m
                memory: 256Mi
              limits:
                cpu: 1000m
                memory: 1Gi

  payment-service-example.yaml: |
    # Example: Payment Service with Banking Sidecars
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: payment-service
      namespace: banking
      labels:
        app: payment-service
        banking-service: "true"
        pci-dss-compliance: "required"
        monitoring: "enabled"
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: payment-service
      template:
        metadata:
          labels:
            app: payment-service
            version: v1.0
            banking-service: "true"
            banking-sidecar: "enabled"
            pci-dss-compliance: "required"
            monitoring: "enabled"
          annotations:
            banking.sidecar/compliance-level: "PCI-DSS"
            banking.sidecar/audit-enabled: "true"
            banking.sidecar/security-level: "high"
            banking.sidecar/encryption: "required"
        spec:
          containers:
          - name: payment-service
            image: banking-registry.com/services/payment-service:v1.0.0
            ports:
            - containerPort: 8080
            env:
            - name: BANKING_COMPLIANCE_LEVEL
              value: "PCI-DSS"
            resources:
              requests:
                cpu: 300m
                memory: 512Mi
              limits:
                cpu: 1500m
                memory: 2Gi