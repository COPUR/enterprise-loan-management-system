{{- if .Values.microservices.customerService.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservices.customerService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.customerService.name }}
    service: microservice
    component: customer
spec:
  replicas: {{ .Values.microservices.customerService.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.microservices.customerService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.microservices.customerService.name }}
        service: microservice
        component: customer
      annotations:
        {{- if .Values.global.istio.sidecarInjection }}
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
        traffic.sidecar.istio.io/includeInboundPorts: "{{ .Values.microservices.customerService.istio.includeInboundPorts }}"
        traffic.sidecar.istio.io/excludeOutboundPorts: "{{ .Values.microservices.customerService.istio.excludeOutboundPorts }}"
        {{- end }}
    spec:
      containers:
      - name: {{ .Values.microservices.customerService.name }}
        image: "{{ .Values.global.imageRegistry }}/{{ .Values.microservices.customerService.image.repository }}:{{ .Values.microservices.customerService.image.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.microservices.customerService.port }}
          name: http
        env:
        {{- range $key, $value := .Values.microservices.customerService.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        - name: ENVIRONMENT
          value: "{{ .Values.global.environment }}"
        - name: REDIS_HOST
          value: "banking-redis"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        resources:
          {{- toYaml .Values.microservices.customerService.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: http
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.microservices.customerService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.customerService.name }}
    service: microservice
spec:
  type: {{ .Values.microservices.customerService.service.type }}
  ports:
  - port: {{ .Values.microservices.customerService.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: {{ .Values.microservices.customerService.name }}
{{- end }}

{{- if .Values.microservices.loanService.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservices.loanService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.loanService.name }}
    service: microservice
    component: loan
spec:
  replicas: {{ .Values.microservices.loanService.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.microservices.loanService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.microservices.loanService.name }}
        service: microservice
        component: loan
      annotations:
        {{- if .Values.global.istio.sidecarInjection }}
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
        traffic.sidecar.istio.io/includeInboundPorts: "{{ .Values.microservices.loanService.istio.includeInboundPorts }}"
        traffic.sidecar.istio.io/excludeOutboundPorts: "{{ .Values.microservices.loanService.istio.excludeOutboundPorts }}"
        {{- end }}
    spec:
      containers:
      - name: {{ .Values.microservices.loanService.name }}
        image: "{{ .Values.global.imageRegistry }}/{{ .Values.microservices.loanService.image.repository }}:{{ .Values.microservices.loanService.image.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.microservices.loanService.port }}
          name: http
        env:
        {{- range $key, $value := .Values.microservices.loanService.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        - name: ENVIRONMENT
          value: "{{ .Values.global.environment }}"
        - name: REDIS_HOST
          value: "banking-redis"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        resources:
          {{- toYaml .Values.microservices.loanService.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: http
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: http
          initialDelaySeconds: 90
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.microservices.loanService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.loanService.name }}
    service: microservice
spec:
  type: {{ .Values.microservices.loanService.service.type }}
  ports:
  - port: {{ .Values.microservices.loanService.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: {{ .Values.microservices.loanService.name }}
{{- end }}

{{- if .Values.microservices.paymentService.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservices.paymentService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.paymentService.name }}
    service: microservice
    component: payment
spec:
  replicas: {{ .Values.microservices.paymentService.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.microservices.paymentService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.microservices.paymentService.name }}
        service: microservice
        component: payment
      annotations:
        {{- if .Values.global.istio.sidecarInjection }}
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
        traffic.sidecar.istio.io/includeInboundPorts: "{{ .Values.microservices.paymentService.istio.includeInboundPorts }}"
        traffic.sidecar.istio.io/excludeOutboundPorts: "{{ .Values.microservices.paymentService.istio.excludeOutboundPorts }}"
        {{- end }}
    spec:
      containers:
      - name: {{ .Values.microservices.paymentService.name }}
        image: "{{ .Values.global.imageRegistry }}/{{ .Values.microservices.paymentService.image.repository }}:{{ .Values.microservices.paymentService.image.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.microservices.paymentService.port }}
          name: http
        env:
        {{- range $key, $value := .Values.microservices.paymentService.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        - name: ENVIRONMENT
          value: "{{ .Values.global.environment }}"
        - name: REDIS_HOST
          value: "banking-redis"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        resources:
          {{- toYaml .Values.microservices.paymentService.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: http
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.microservices.paymentService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.paymentService.name }}
    service: microservice
spec:
  type: {{ .Values.microservices.paymentService.service.type }}
  ports:
  - port: {{ .Values.microservices.paymentService.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: {{ .Values.microservices.paymentService.name }}
{{- end }}

{{- if .Values.microservices.partyService.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservices.partyService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.partyService.name }}
    service: microservice
    component: party
spec:
  replicas: {{ .Values.microservices.partyService.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.microservices.partyService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.microservices.partyService.name }}
        service: microservice
        component: party
      annotations:
        {{- if .Values.global.istio.sidecarInjection }}
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
        traffic.sidecar.istio.io/includeInboundPorts: "{{ .Values.microservices.partyService.istio.includeInboundPorts }}"
        traffic.sidecar.istio.io/excludeOutboundPorts: "{{ .Values.microservices.partyService.istio.excludeOutboundPorts }}"
        {{- end }}
    spec:
      containers:
      - name: {{ .Values.microservices.partyService.name }}
        image: "{{ .Values.global.imageRegistry }}/{{ .Values.microservices.partyService.image.repository }}:{{ .Values.microservices.partyService.image.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.microservices.partyService.port }}
          name: http
        env:
        {{- range $key, $value := .Values.microservices.partyService.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        - name: ENVIRONMENT
          value: "{{ .Values.global.environment }}"
        - name: REDIS_HOST
          value: "banking-redis"
        resources:
          {{- toYaml .Values.microservices.partyService.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: http
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.microservices.partyService.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.microservices.partyService.name }}
    service: microservice
spec:
  type: {{ .Values.microservices.partyService.service.type }}
  ports:
  - port: {{ .Values.microservices.partyService.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: {{ .Values.microservices.partyService.name }}
{{- end }}