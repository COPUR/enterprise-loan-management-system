apiVersion: v1
kind: ConfigMap
metadata:
  name: loan-management-config-java21
  namespace: loan-management
  labels:
    app: loan-management
    version: java21
data:
  # Application configuration
  application.yaml: |
    spring:
      profiles:
        active: production,java21
      threads:
        virtual:
          enabled: true
      
    # Banking service configurations
    loanmanagement:
      # Virtual Threads configuration
      threading:
        loan-processing:
          virtual-threads: true
          core-pool-size: 50
          max-pool-size: 1000
        payment-processing:
          virtual-threads: true
          core-pool-size: 100
          max-pool-size: 2000
        risk-assessment:
          virtual-threads: true
          core-pool-size: 30
          max-pool-size: 500
        fraud-detection:
          virtual-threads: true
          core-pool-size: 25
          max-pool-size: 300
        compliance-check:
          virtual-threads: true
          core-pool-size: 20
          max-pool-size: 200
      
      # Performance thresholds
      performance:
        thresholds:
          loan-processing-ms: 5000
          payment-processing-ms: 2000
          risk-assessment-ms: 3000
          fraud-detection-ms: 1000
          compliance-check-ms: 1500
      
      # Banking-specific settings
      trading:
        batch-size: 1000
        max-concurrent-batches: 10
        timeout-ms: 100
        virtual-threads-enabled: true
      
      payments:
        batch-processing: true
        batch-size: 500
        concurrent-validation: true
        validation-timeout-ms: 2000
      
      loans:
        concurrent-checks: true
        parallel-risk-assessment: true
        pattern-matching-optimization: true
        state-transition-caching: true
      
      # Caching configurations
      cache:
        customer-profiles:
          ttl: 300s
          max-size: 10000
        risk-assessments:
          ttl: 600s
          max-size: 5000
        compliance-rules:
          ttl: 1800s
          max-size: 1000
    
    # Management endpoints
    management:
      endpoints:
        web:
          exposure:
            include: health,metrics,prometheus,performance
      endpoint:
        health:
          show-details: always
          probes:
            enabled: true
        metrics:
          enabled: true
        prometheus:
          enabled: true
      metrics:
        export:
          prometheus:
            enabled: true
        distribution:
          percentiles-histogram:
            http.server.requests: true
            virtual.threads.active: true
            pattern.matching.operations: true
    
    # Logging configuration
    logging:
      level:
        com.loanmanagement: INFO
        com.loanmanagement.performance: INFO
        com.loanmanagement.metrics: INFO
      pattern:
        console: "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"
  
  # Redis configuration
  redis.host: "redis-master.loan-management.svc.cluster.local"
  redis.port: "6379"
  
  # Java 21 JVM options
  java-opts.conf: |
    # Memory settings
    -Xms2g
    -Xmx8g
    
    # Garbage collector
    -XX:+UseZGC
    -XX:MaxGCPauseMillis=10
    
    # Virtual Threads
    -Djdk.virtualThreadScheduler.parallelism=32
    -Djdk.virtualThreadScheduler.maxPoolSize=512
    
    # Performance optimizations
    -XX:+UnlockExperimentalVMOptions
    -XX:+EnableJVMCI
    -XX:+UseLargePages
    
    # Enable preview features
    --enable-preview
    
    # Security
    -Djava.security.egd=file:/dev/./urandom
  
  # Prometheus metrics mapping
  prometheus-metrics.yaml: |
    # Virtual Threads metrics
    - pattern: 'virtual_threads_<name>_<type>'
      name: virtual_threads_$1_$2
      labels:
        pool: "$1"
        metric: "$2"
    
    # Pattern Matching metrics
    - pattern: 'pattern_matching_<operation>_<metric>'
      name: pattern_matching_$1_$2
      labels:
        operation: "$1"
        metric: "$2"
    
    # Banking operation metrics
    - pattern: 'banking_<service>_<operation>_<metric>'
      name: banking_$1_$2_$3
      labels:
        service: "$1"
        operation: "$2"
        metric: "$3"