# Enterprise Banking Service Mesh Configuration
# Implements comprehensive Istio service mesh with:
# - FAPI-compliant OAuth2.1 authentication
# - mTLS for inter-service communication
# - Advanced traffic management and circuit breaking
# - Observability with distributed tracing
# - Rate limiting and throttling
# - Security policies and network segmentation

apiVersion: v1
kind: Namespace
metadata:
  name: istio-system
  labels:
    name: istio-system
    istio-injection: disabled

---
# Istio Control Plane Configuration
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: banking-control-plane
  namespace: istio-system
spec:
  # FAPI-compliant configuration
  values:
    global:
      meshID: banking-mesh
      network: banking-network
      # Enable strict mTLS for banking security
      defaultPodDisruptionBudget:
        enabled: true
      proxy:
        # Enhanced security for banking workloads
        holdApplicationUntilProxyStarts: true
        # FAPI requires strong encryption
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
    pilot:
      env:
        # Banking-specific security settings
        PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
        PILOT_ENABLE_CROSS_CLUSTER_WORKLOAD_ENTRY: true
        # FAPI compliance requires strict validation
        PILOT_ENABLE_VALIDATION: true
    gateways:
      istio-ingressgateway:
        # High availability for banking services
        autoscaleEnabled: true
        autoscaleMin: 2
        autoscaleMax: 10
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi
        # Banking-specific service annotations
        serviceAnnotations:
          service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
          service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
          service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
        # FAPI requires specific ports and protocols
        ports:
        - port: 15021
          targetPort: 15021
          name: status-port
          protocol: TCP
        - port: 80
          targetPort: 8080
          name: http2
          protocol: TCP
        - port: 443
          targetPort: 8443
          name: https
          protocol: TCP
        - port: 15443
          targetPort: 15443
          name: tls
          protocol: TCP

  components:
    pilot:
      k8s:
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
        env:
          # Banking compliance requirements
          - name: PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION
            value: "true"
          - name: PILOT_TRACE_SAMPLING
            value: "1.0"
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
        service:
          type: LoadBalancer
          annotations:
            # AWS Application Load Balancer for banking
            service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
            service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
            service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/banking-cert"

---
# Banking Namespace with Istio Injection
apiVersion: v1
kind: Namespace
metadata:
  name: banking-system
  labels:
    istio-injection: enabled
    banking-tier: production
    compliance: fapi

---
# Strict mTLS Policy for Banking Services
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: banking-strict-mtls
  namespace: banking-system
spec:
  # Require mTLS for all banking communications
  mtls:
    mode: STRICT

---
# FAPI-Compliant Request Authentication
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: banking-oauth2-jwt
  namespace: banking-system
spec:
  # Apply to all banking services
  selector:
    matchLabels:
      app: banking-service
  jwtRules:
  - issuer: "https://keycloak.banking.local/realms/banking-enterprise"
    jwksUri: "https://keycloak.banking.local/realms/banking-enterprise/protocol/openid_connect/certs"
    # FAPI requires specific JWT validation
    audiences:
    - "banking-client"
    - "api://banking"
    forwardOriginalToken: true
    fromHeaders:
    - name: "Authorization"
      prefix: "Bearer "
    # DPoP token binding for FAPI
    fromParams:
    - "access_token"

---
# Authorization Policy for Banking APIs
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: banking-api-authz
  namespace: banking-system
spec:
  selector:
    matchLabels:
      app: banking-service
  action: ALLOW
  rules:
  # Allow health checks without authentication
  - to:
    - operation:
        paths: ["/actuator/health", "/health", "/ready"]
  # Require JWT for all banking operations
  - from:
    - source:
        requestPrincipals: ["https://keycloak.banking.local/realms/banking-enterprise/*"]
    to:
    - operation:
        paths: ["/api/loans/*", "/api/payments/*", "/api/customers/*"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]
  # Admin operations require specific roles
  - from:
    - source:
        requestPrincipals: ["https://keycloak.banking.local/realms/banking-enterprise/*"]
    to:
    - operation:
        paths: ["/api/admin/*"]
    when:
    - key: request.auth.claims[banking_roles]
      values: ["ADMIN", "COMPLIANCE_OFFICER"]

---
# Gateway for Banking Services
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: banking-gateway
  namespace: banking-system
spec:
  selector:
    istio: ingressgateway
  servers:
  # HTTPS for production banking
  - port:
      number: 443
      name: https-banking
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: banking-tls-cert
    hosts:
    - "api.banking.local"
    - "banking.example.com"
  # HTTP redirect to HTTPS
  - port:
      number: 80
      name: http-banking
      protocol: HTTP
    hosts:
    - "api.banking.local"
    - "banking.example.com"
    tls:
      httpsRedirect: true

---
# Virtual Service for Banking API Routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: banking-api-routes
  namespace: banking-system
spec:
  hosts:
  - "api.banking.local"
  - "banking.example.com"
  gateways:
  - banking-gateway
  http:
  # Health check routes (no authentication required)
  - match:
    - uri:
        prefix: "/actuator/health"
    - uri:
        prefix: "/health"
    route:
    - destination:
        host: banking-service
        port:
          number: 8080
    timeout: 5s
    
  # Loan service routes
  - match:
    - uri:
        prefix: "/api/loans"
    route:
    - destination:
        host: loan-service
        port:
          number: 8080
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: 5xx,reset,connect-failure,refused-stream
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 100ms
    headers:
      request:
        add:
          x-banking-service: "loan-service"
          x-request-id: "%REQ(x-request-id)%"
          
  # Payment service routes
  - match:
    - uri:
        prefix: "/api/payments"
    route:
    - destination:
        host: payment-service
        port:
          number: 8080
    timeout: 60s
    retries:
      attempts: 2
      perTryTimeout: 30s
      retryOn: 5xx,reset,connect-failure
    headers:
      request:
        add:
          x-banking-service: "payment-service"
          x-request-id: "%REQ(x-request-id)%"
          
  # Customer service routes
  - match:
    - uri:
        prefix: "/api/customers"
    route:
    - destination:
        host: customer-service
        port:
          number: 8080
    timeout: 15s
    retries:
      attempts: 3
      perTryTimeout: 5s
    headers:
      request:
        add:
          x-banking-service: "customer-service"
          x-request-id: "%REQ(x-request-id)%"
          
  # Admin routes with additional security
  - match:
    - uri:
        prefix: "/api/admin"
    route:
    - destination:
        host: admin-service
        port:
          number: 8080
    timeout: 45s
    headers:
      request:
        add:
          x-banking-service: "admin-service"
          x-admin-request: "true"
          x-request-id: "%REQ(x-request-id)%"

---
# Destination Rules for Banking Services
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: banking-services-dr
  namespace: banking-system
spec:
  host: "*.banking-system.svc.cluster.local"
  trafficPolicy:
    # Require mTLS for all banking communications
    tls:
      mode: ISTIO_MUTUAL
    # Circuit breaker configuration
    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 3
        idleTimeout: 90s
        h2UpgradePolicy: UPGRADE
    outlierDetection:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30

---
# Specific Destination Rule for Loan Service
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: loan-service-dr
  namespace: banking-system
spec:
  host: loan-service
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    # Enhanced circuit breaking for critical loan operations
    connectionPool:
      tcp:
        maxConnections: 50
        connectTimeout: 10s
      http:
        http1MaxPendingRequests: 25
        http2MaxRequests: 50
        maxRequestsPerConnection: 5
        maxRetries: 2
        idleTimeout: 60s
    outlierDetection:
      consecutiveGatewayErrors: 3
      consecutive5xxErrors: 3
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 25
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2

---
# Rate Limiting for Banking APIs
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: banking-rate-limit
  namespace: banking-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.local_ratelimit
        typed_config:
          "@type": type.googleapis.com/udpa.type.v1.TypedStruct
          type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
          value:
            stat_prefix: banking_rate_limiter
            token_bucket:
              max_tokens: 1000
              tokens_per_fill: 100
              fill_interval: 60s
            filter_enabled:
              runtime_key: banking_rate_limit_enabled
              default_value:
                numerator: 100
                denominator: HUNDRED
            filter_enforced:
              runtime_key: banking_rate_limit_enforced
              default_value:
                numerator: 100
                denominator: HUNDRED

---
# Telemetry Configuration for Banking Observability
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: banking-telemetry
  namespace: banking-system
spec:
  # Comprehensive tracing for banking operations
  tracing:
  - providers:
    - name: jaeger
  # Banking-specific metrics
  metrics:
  - providers:
    - name: prometheus
  - overrides:
  - match:
      metric: ALL_METRICS
    tagOverrides:
      banking_service_type:
        value: "%{REQUEST_HEADERS:x-banking-service}"
      customer_id:
        value: "%{REQUEST_HEADERS:x-customer-id}"
      transaction_id:
        value: "%{REQUEST_HEADERS:x-transaction-id}"
  # Access logging for audit compliance
  accessLogging:
  - providers:
  - name: banking-audit-log
    service: audit-service.banking-system.svc.cluster.local

---
# Network Policy for Banking Service Segmentation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: banking-network-policy
  namespace: banking-system
spec:
  podSelector:
    matchLabels:
      app: banking-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from Istio gateway
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 15090
  # Allow inter-service communication within banking namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: banking-system
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow egress to databases and external services
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9092  # Kafka
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS