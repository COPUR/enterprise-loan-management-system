# Enterprise Loan Management System - Comprehensive End-to-End Docker Setup
# Full feature set with complete monitoring, security, and compliance stack

services:
  # === DATABASE TIER (12-Factor: Backing Services) ===
  
  postgres:
    image: postgres:15-alpine
    container_name: banking-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-banking_db}
      POSTGRES_USER: ${DATABASE_USER:-banking_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init:/docker-entrypoint-initdb.d
      - ./scripts/db/sample-data:/docker-entrypoint-sample-data.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-banking_user} -d ${DATABASE_NAME:-banking_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=database"
      - "com.banking.tier=data"
      - "com.banking.compliance=pci"

  # === CACHE TIER (12-Factor: Backing Services) ===
  
  redis:
    image: redis:7-alpine
    container_name: banking-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-banking_password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./scripts/redis/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-banking_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=cache"
      - "com.banking.tier=data"
      - "com.banking.compliance=pci"

  # === MESSAGE STREAMING (12-Factor: Backing Services) ===
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: banking-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=zookeeper"
      - "com.banking.tier=infrastructure"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: banking-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./scripts/kafka/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=kafka"
      - "com.banking.tier=infrastructure"
  
  # Kafka Topic Initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: banking-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts/kafka/create-topics.sh:/create-topics.sh
    command: ["/bin/bash", "/create-topics.sh"]
    networks:
      - banking-backend
    restart: "no"

  # === IDENTITY & ACCESS MANAGEMENT (OAuth2.1) ===
  
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.0
    container_name: banking-keycloak
    command: start-dev --import-realm
    environment:
      # Admin Configuration
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-banking_keycloak_admin_2024}
      
      # Database Configuration (PostgreSQL)
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_system}
      KC_DB_USERNAME: ${DATABASE_USER:-banking_user}
      KC_DB_PASSWORD: ${DATABASE_PASSWORD:-banking_secure_pass}
      KC_DB_SCHEMA: keycloak
      
      # OAuth2.1 & Security Configuration
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HTTPS_PORT: 8443
      
      # Banking Compliance Features
      KC_FEATURES: authorization,account-api,admin-fine-grained-authz,declarative-user-profile,dpop,dynamic-scopes
      KC_LOG_LEVEL: INFO
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      
      # LDAP Integration Environment
      KC_SPI_USER_FEDERATION_LDAP_ENABLED: true
      
      # Audit Configuration for Banking
      KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_SUCCESS_LEVEL: info
      KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_ERROR_LEVEL: warn
    ports:
      - "8090:8080"
      - "8443:8443"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./config/keycloak/realms:/opt/keycloak/data/import:ro
      - ./config/keycloak/themes:/opt/keycloak/themes:ro
    depends_on:
      postgres:
        condition: service_healthy
      ldap:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-backend
      - banking-frontend
    labels:
      - "com.banking.service=keycloak"
      - "com.banking.tier=security"
      - "com.banking.compliance=oauth2.1"

  # === LDAP IDENTITY PROVIDER ===
  
  ldap:
    image: osixia/openldap:1.5.0
    container_name: banking-ldap
    environment:
      # LDAP Configuration
      LDAP_ORGANISATION: "Banking Enterprise"
      LDAP_DOMAIN: "banking.local"
      LDAP_BASE_DN: "dc=banking,dc=local"
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD:-banking_ldap_admin_2024}
      LDAP_CONFIG_PASSWORD: ${LDAP_CONFIG_PASSWORD:-banking_ldap_config_2024}
      
      # Security Configuration
      LDAP_READONLY_USER: true
      LDAP_READONLY_USER_USERNAME: readonly
      LDAP_READONLY_USER_PASSWORD: ${LDAP_READONLY_PASSWORD:-banking_ldap_readonly_2024}
      
      # Banking Compliance
      LDAP_RFC2307BIS_SCHEMA: true
      LDAP_BACKEND: mdb
      LDAP_TLS: true
      LDAP_TLS_CRT_FILENAME: ldap.crt
      LDAP_TLS_KEY_FILENAME: ldap.key
      LDAP_TLS_DH_PARAM_FILENAME: dhparam.pem
      LDAP_TLS_CA_CRT_FILENAME: ca.crt
      LDAP_TLS_ENFORCE: false
      LDAP_TLS_CIPHER_SUITE: "SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC"
      LDAP_TLS_PROTOCOL_MIN: 3.1
      LDAP_TLS_VERIFY_CLIENT: demand
    ports:
      - "389:389"
      - "636:636"
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d
      - ./config/ldap/bootstrap:/container/service/slapd/assets/config/bootstrap/ldif/custom:ro
      - ./config/ldap/certs:/container/service/slapd/assets/certs:ro
    command: --copy-service --loglevel debug
    healthcheck:
      test: ["CMD", "ldapsearch", "-x", "-H", "ldap://localhost", "-b", "dc=banking,dc=local", "-D", "cn=admin,dc=banking,dc=local", "-w", "${LDAP_ADMIN_PASSWORD:-banking_ldap_admin_2024}", "(objectclass=*)", "-LLL", "-s", "base"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=ldap"
      - "com.banking.tier=identity"
      - "com.banking.compliance=directory"

  # === LDAP ADMIN UI ===
  
  phpldapadmin:
    image: osixia/phpldapadmin:0.9.0
    container_name: banking-ldap-admin
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: ldap
      PHPLDAPADMIN_HTTPS: false
    ports:
      - "8091:80"
    depends_on:
      ldap:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - banking-backend
      - banking-frontend
    labels:
      - "com.banking.service=ldap-admin"
      - "com.banking.tier=management"

  # === MICROSERVICES ARCHITECTURE ===
  
  # Party Data Server (IDP)
  party-data-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-party-server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: party-data-server
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KEYCLOAK_URL: "http://keycloak:8080"
      KEYCLOAK_REALM: "banking"
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8081:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-frontend
      - banking-backend
    labels:
      - "com.banking.service=party-data-server"
      - "com.banking.tier=application"
  
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-api-gateway
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: api-gateway
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KEYCLOAK_URL: "http://keycloak:8080"
      KEYCLOAK_REALM: "banking"
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8082:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-frontend
      - banking-backend
    labels:
      - "com.banking.service=api-gateway"
      - "com.banking.tier=application"
  
  # Customer Service
  customer-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-customer-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: customer-service
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8083:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=customer-service"
      - "com.banking.tier=application"
  
  # Loan Service
  loan-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-loan-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: loan-service
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8084:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=loan-service"
      - "com.banking.tier=application"
  
  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-payment-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: payment-service
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8085:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=payment-service"
      - "com.banking.tier=application"
  
  # Open Banking Gateway
  open-banking-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-open-banking-gateway
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: open-banking-gateway
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8086:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-frontend
      - banking-backend
    labels:
      - "com.banking.service=open-banking-gateway"
      - "com.banking.tier=application"
  
  # ML Anomaly Detection Service
  ml-anomaly-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-ml-anomaly-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ml-anomaly-service
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8087:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=ml-anomaly-service"
      - "com.banking.tier=application"
  
  # Federation Monitoring Service
  federation-monitoring:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: enterprise-loan-system:1.0.0
    container_name: banking-federation-monitoring
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: federation
      SERVER_PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-banking_db}
      DATABASE_USERNAME: ${DATABASE_USER:-banking_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-banking_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-banking_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_OPTS: "-server -XX:+UseG1GC -XX:MaxRAMPercentage=75.0"
    ports:
      - "8088:8080"
    volumes:
      - banking_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=federation-monitoring"
      - "com.banking.tier=application"

  # === MONITORING STACK (12-Factor: Admin Processes) ===
  
  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: banking-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./scripts/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - banking-frontend
      - banking-backend
    labels:
      - "com.banking.service=prometheus"
      - "com.banking.tier=monitoring"

  # Grafana
  grafana:
    image: grafana/grafana:10.2.2
    container_name: banking-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./scripts/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - banking-frontend
    labels:
      - "com.banking.service=grafana"
      - "com.banking.tier=monitoring"

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: banking-elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms1g -Xmx2g
      xpack.security.enabled: false
      xpack.monitoring.collection.enabled: true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - banking-backend
    labels:
      - "com.banking.service=elasticsearch"
      - "com.banking.tier=monitoring"

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: banking-kibana
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    ports:
      - "5601:5601"
    volumes:
      - kibana_data:/usr/share/kibana/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - banking-frontend
      - banking-backend
    labels:
      - "com.banking.service=kibana"
      - "com.banking.tier=monitoring"

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: banking-jaeger
    depends_on:
      - elasticsearch
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    volumes:
      - jaeger_data:/tmp
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - banking-frontend
      - banking-backend
    labels:
      - "com.banking.service=jaeger"
      - "com.banking.tier=monitoring"

  # === REVERSE PROXY / API GATEWAY ===
  
  nginx:
    image: nginx:1.25-alpine
    container_name: banking-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./scripts/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - party-data-server
      - open-banking-gateway
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - banking-frontend
    labels:
      - "com.banking.service=nginx"
      - "com.banking.tier=edge"

# === PERSISTENT VOLUMES ===
volumes:
  postgres_data:
    driver: local
    labels:
      - "com.banking.persistence=database"
  redis_data:
    driver: local
    labels:
      - "com.banking.persistence=cache"
  kafka_data:
    driver: local
    labels:
      - "com.banking.persistence=streaming"
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
    labels:
      - "com.banking.persistence=monitoring"
  grafana_data:
    driver: local
    labels:
      - "com.banking.persistence=monitoring"
  elasticsearch_data:
    driver: local
    labels:
      - "com.banking.persistence=search"
  kibana_data:
    driver: local
    labels:
      - "com.banking.persistence=logging"
  jaeger_data:
    driver: local
    labels:
      - "com.banking.persistence=tracing"
  banking_logs:
    driver: local
    labels:
      - "com.banking.persistence=application-logs"
  banking_tmp:
    driver: local
  keycloak_data:
    driver: local
    labels:
      - "com.banking.persistence=keycloak"
      - "com.banking.compliance=oauth2.1"
  ldap_data:
    driver: local
    labels:
      - "com.banking.persistence=ldap-data"
      - "com.banking.compliance=directory"
  ldap_config:
    driver: local
    labels:
      - "com.banking.persistence=ldap-config"
      - "com.banking.compliance=directory"

# === NETWORK SEGMENTATION ===
networks:
  banking-frontend:
    driver: bridge
    name: banking-frontend
    labels:
      - "com.banking.network=frontend"
      - "com.banking.security=dmz"
  banking-backend:
    driver: bridge
    name: banking-backend
    internal: false  # Allow external access for development
    labels:
      - "com.banking.network=backend"
      - "com.banking.security=internal"
