plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco' // For test coverage analysis
}

group = 'com.loanmanagement'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // Jakarta EE APIs
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    // Spring framework core
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework:spring-tx'
    implementation 'org.springframework:spring-core'
    implementation 'org.springframework:spring-beans'
    implementation 'org.springframework:spring-webmvc'

    // Logging
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic'

    // Metrics
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    
    // JWT and security
    implementation 'com.nimbusds:nimbus-jose-jwt:9.40'
    implementation 'com.nimbusds:oauth2-oidc-sdk:11.19.1'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.security:spring-security-config'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'commons-codec:commons-codec:1.16.0'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.20'

    // Database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.wiremock:wiremock-standalone:3.3.1'
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    
    // Enable test coverage
    finalizedBy jacocoTestReport
    
    // Test execution settings
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
    
    // Fail fast to identify issues quickly
    failFast = true
    
    // Memory settings for tests
    jvmArgs = ['-Xmx2g', '-XX:+UseG1GC']
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**', 
                '**/entity/**',
                '**/*Application*',
                '**/*Config*',
                '**/*Test*'
            ])
        }))
    }
}

// Task to check coverage threshold
task checkCoverage(dependsOn: jacocoTestReport) {
    doLast {
        def xmlReport = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        if (xmlReport.exists()) {
            def parser = new XmlParser()
            def report = parser.parse(xmlReport)
            def counters = report.counter
            
            def lineCoverage = counters.find { it.@type == 'LINE' }
            if (lineCoverage) {
                def covered = lineCoverage.@covered as Double
                def missed = lineCoverage.@missed as Double
                def total = covered + missed
                def coverage = (covered / total) * 100
                
                println "Line Coverage: ${String.format('%.2f', coverage)}%"
                println "Lines Covered: ${covered.intValue()}"
                println "Lines Missed: ${missed.intValue()}"
                println "Total Lines: ${total.intValue()}"
                
                if (coverage < 83.0) {
                    throw new GradleException("Test coverage (${String.format('%.2f', coverage)}%) is below required threshold of 83%")
                } else {
                    println "âœ… Test coverage meets the 83% threshold!"
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
}

// Custom task to run only unit tests (fast feedback)
task unitTest(type: Test) {
    useJUnitPlatform {
        excludeTags 'integration', 'slow', 'e2e'
    }
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

// Custom task to run integration tests
task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    shouldRunAfter unitTest
}

// Task to run TDD cycle - compile, test, coverage check
task tddCycle {
    dependsOn compileJava, compileTestJava, test, checkCoverage
    description = 'Runs complete TDD cycle: compile -> test -> coverage check'
}