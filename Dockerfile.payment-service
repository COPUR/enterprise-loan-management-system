# Payment Service - PCI DSS Compliance & Real-time Processing
# Multi-stage Docker build optimized for payment processing and PCI DSS compliance

# ========================================
# Stage 1: Builder
# ========================================
FROM eclipse-temurin:21-jdk-alpine AS builder

LABEL stage=builder \
      com.enterprise.banking.service="payment-service" \
      com.enterprise.banking.compliance="PCI-DSS,Real-time-Payments"

# Install build dependencies
RUN apk add --no-cache \
    curl \
    git \
    bash \
    && rm -rf /var/cache/apk/*

# Create build user
RUN addgroup -g 1001 builder && \
    adduser -D -s /bin/sh -u 1001 -G builder builder

USER builder:builder
WORKDIR /workspace

# Copy build files (layer caching optimization)
COPY --chown=builder:builder build.gradle settings.gradle gradle.properties ./
COPY --chown=builder:builder gradle/ ./gradle/
COPY --chown=builder:builder gradlew ./

# Download dependencies
RUN ./gradlew dependencies --no-daemon

# Copy payment service source
COPY --chown=builder:builder payment-service/src/ ./payment-service/src/
COPY --chown=builder:builder shared-kernel/src/ ./shared-kernel/src/

# Build payment service
RUN ./gradlew :payment-service:clean :payment-service:build -x test --no-daemon \
    && cp payment-service/build/libs/*.jar payment-service.jar

# ========================================
# Stage 2: Production - Payment Service
# ========================================
FROM eclipse-temurin:21-jre-alpine AS production

LABEL maintainer="payment-service-team@banking.com" \
      version="1.0.0" \
      com.enterprise.banking.service="payment-service" \
      com.enterprise.banking.compliance="PCI-DSS-v4.0,Real-time-Payments,Anti-Money-Laundering" \
      com.enterprise.banking.security-profile="pci-dss-level1" \
      com.enterprise.banking.audit-required="true" \
      com.enterprise.banking.encryption-required="true" \
      com.enterprise.banking.payment-processing="real-time"

# Security hardening for PCI DSS compliance
RUN apk update && apk upgrade \
    && apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    openssl \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Create banking user with payment processing privileges
RUN addgroup -g 1000 banking && \
    adduser -D -s /bin/sh -u 1000 -G banking banking

# Create secure directories for payment processing
RUN mkdir -p /app/config /app/logs /app/data /app/payment-vault /app/audit /app/encryption-keys \
    && chown -R banking:banking /app \
    && chmod 750 /app \
    && chmod 700 /app/payment-vault /app/audit /app/encryption-keys

USER banking:banking
WORKDIR /app

# Copy payment service jar
COPY --from=builder --chown=banking:banking /workspace/payment-service.jar ./app.jar

# Payment service optimized JVM settings for real-time processing
ENV JAVA_OPTS="-server \
    -XX:+UseG1GC \
    -XX:MaxGCPauseMillis=20 \
    -XX:+UseStringDeduplication \
    -XX:+OptimizeStringConcat \
    -XX:+UseLargePages \
    -Xms1g \
    -Xmx4g \
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath=/app/logs/ \
    -XX:+ExitOnOutOfMemoryError \
    -Djava.security.egd=file:/dev/./urandom \
    -Dspring.profiles.active=production \
    -Dlogging.file.path=/app/logs \
    -Dbanking.payment.pci-compliance=strict \
    -Dbanking.payment.encryption=enabled \
    -Dbanking.payment.realtime-processing=enabled"

# Payment service environment
ENV SPRING_PROFILES_ACTIVE=production \
    SERVER_PORT=8080 \
    MANAGEMENT_SERVER_PORT=8081 \
    SERVICE_NAME=payment-service \
    TZ=UTC

# PCI DSS compliance settings
ENV PCI_DSS_COMPLIANCE=strict \
    PAYMENT_CARD_ENCRYPTION=AES-256 \
    PAYMENT_AUDIT_TRAIL=comprehensive \
    REAL_TIME_FRAUD_DETECTION=enabled \
    PAYMENT_TOKENIZATION=enabled \
    SECURE_PAYMENT_GATEWAY=enabled

# Real-time payment processing settings
ENV PAYMENT_PROCESSING_MODE=real-time \
    PAYMENT_TIMEOUT_MS=5000 \
    PAYMENT_RETRY_ATTEMPTS=3 \
    PAYMENT_QUEUE_SIZE=10000 \
    CONCURRENT_PAYMENT_THREADS=20

# Anti-Money Laundering (AML) settings
ENV AML_SCREENING_ENABLED=true \
    AML_TRANSACTION_MONITORING=real-time \
    AML_SUSPICIOUS_ACTIVITY_REPORTING=enabled \
    AML_COMPLIANCE_CHECKS=strict

# Expose ports
EXPOSE 8080 8081

# Volume for payment data, audit trails, and encryption keys
VOLUME ["/app/data", "/app/logs", "/app/payment-vault", "/app/audit", "/app/encryption-keys"]

# Health check with payment service validation
HEALTHCHECK --interval=15s --timeout=5s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8081/actuator/health/payment-processing || exit 1

ENTRYPOINT ["java"]
CMD ["-jar", "app.jar"]