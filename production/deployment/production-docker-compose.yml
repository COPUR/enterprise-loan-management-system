# Enterprise Banking Production Docker Compose
# Production-ready banking system with proper security and monitoring

version: '3.8'

networks:
  banking-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  banking-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  banking-data:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16
  banking-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/banking/data/postgres'
  vault_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/banking/data/vault'
  redis_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/banking/data/redis'
  kafka_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/banking/data/kafka'
  elasticsearch_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/banking/data/elasticsearch'
  prometheus_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/banking/data/prometheus'
  grafana_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/banking/data/grafana'

services:
  # ================================
  # INFRASTRUCTURE SERVICES
  # ================================
  
  # HashiCorp Vault - Secrets Management
  vault:
    image: vault:1.15.2
    container_name: banking-vault
    hostname: vault
    restart: unless-stopped
    networks:
      - banking-data
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./security/vault/vault-config.hcl:/vault/config/vault-config.hcl:ro
      - ./security/vault/certs:/vault/certs:ro
      - ./security/vault/policies:/vault/policies:ro
    environment:
      VAULT_ADDR: "https://0.0.0.0:8200"
      VAULT_API_ADDR: "https://vault:8200"
      VAULT_CLUSTER_ADDR: "https://vault:8201"
      VAULT_UI: "true"
    command: ["vault", "server", "-config=/vault/config/vault-config.hcl"]
    cap_add:
      - IPC_LOCK
    ulimits:
      memlock:
        soft: -1
        hard: -1
    security_opt:
      - no-new-privileges:true
    user: "100:1000"
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database with encryption
  postgres:
    image: postgres:15.4-alpine
    container_name: banking-postgres
    hostname: postgres
    restart: unless-stopped
    networks:
      - banking-data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./security/database/encryption-schema.sql:/docker-entrypoint-initdb.d/01-encryption-schema.sql:ro
      - ./scripts/db/init:/docker-entrypoint-initdb.d/init:ro
      - ./production/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-banking_db}
      POSTGRES_USER: ${POSTGRES_USER:-banking_user}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    secrets:
      - postgres_password
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-banking_user} -d ${POSTGRES_DB:-banking_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis with encryption and authentication
  redis:
    image: redis:7.2-alpine
    container_name: banking-redis
    hostname: redis
    restart: unless-stopped
    networks:
      - banking-data
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./production/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    healthcheck:
      test: ["CMD", "redis-cli", "--tls", "--cert", "/tls/redis.crt", "--key", "/tls/redis.key", "--cacert", "/tls/ca.crt", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kafka with SASL/SSL
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: banking-zookeeper
    hostname: zookeeper
    restart: unless-stopped
    networks:
      - banking-data
    ports:
      - "2181:2181"
    volumes:
      - ./production/kafka/zookeeper.properties:/etc/kafka/zookeeper.properties:ro
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/zookeeper_jaas.conf"
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: banking-kafka
    hostname: kafka
    restart: unless-stopped
    networks:
      - banking-data
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./production/kafka/server.properties:/etc/kafka/server.properties:ro
      - ./production/kafka/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf:ro
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,SASL_SSL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,SASL_SSL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN,SCRAM-SHA-256
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka_ssl_key_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka_truststore_creds
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: PLAINTEXT
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Elasticsearch with security
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: banking-elasticsearch
    hostname: elasticsearch
    restart: unless-stopped
    networks:
      - banking-data
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./production/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      - node.name=banking-elasticsearch
      - cluster.name=banking-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elasticsearch.p12
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elasticsearch.p12
      - xpack.security.transport.ssl.truststore.path=/usr/share/elasticsearch/config/certs/elasticsearch.p12
      - ELASTIC_PASSWORD_FILE=/run/secrets/elasticsearch_password
    secrets:
      - elasticsearch_password
    ulimits:
      memlock:
        soft: -1
        hard: -1
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:$(cat /run/secrets/elasticsearch_password) -k https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # BANKING SERVICES
  # ================================

  # API Gateway with production hardening
  api-gateway:
    image: enterprise-banking/api-gateway:${VERSION:-latest}
    container_name: banking-api-gateway
    hostname: api-gateway
    restart: unless-stopped
    networks:
      - banking-frontend
      - banking-backend
    ports:
      - "8082:8080"
    volumes:
      - ./production/config/api-gateway.yml:/app/config/application.yml:ro
      - /var/log/banking:/var/log/banking
    environment:
      SPRING_PROFILES_ACTIVE: production
      VAULT_ADDR: https://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/api_gateway_vault_token
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_BANK: INFO
      JAVA_OPTS: >-
        -Xms1g -Xmx2g
        -XX:+UseG1GC
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=80
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/var/log/banking
        -Dspring.security.require-ssl=true
        -Dmanagement.endpoints.web.exposure.include=health,metrics,prometheus
        -Dmanagement.endpoints.web.base-path=/actuator
        -Dmanagement.server.port=8081
    secrets:
      - api_gateway_vault_token
    depends_on:
      - vault
      - postgres
      - redis
      - kafka
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Customer Service
  customer-service:
    image: enterprise-banking/customer-service:${VERSION:-latest}
    container_name: banking-customer-service
    hostname: customer-service
    restart: unless-stopped
    networks:
      - banking-backend
    ports:
      - "8083:8080"
    volumes:
      - ./production/config/customer-service.yml:/app/config/application.yml:ro
      - /var/log/banking:/var/log/banking
    environment:
      SPRING_PROFILES_ACTIVE: production
      VAULT_ADDR: https://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/customer_service_vault_token
      LOGGING_LEVEL_ROOT: INFO
      JAVA_OPTS: >-
        -Xms512m -Xmx1g
        -XX:+UseG1GC
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=80
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/var/log/banking
        -Dspring.security.require-ssl=true
    secrets:
      - customer_service_vault_token
    depends_on:
      - vault
      - postgres
      - redis
      - kafka
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Loan Service
  loan-service:
    image: enterprise-banking/loan-service:${VERSION:-latest}
    container_name: banking-loan-service
    hostname: loan-service
    restart: unless-stopped
    networks:
      - banking-backend
    ports:
      - "8084:8080"
    volumes:
      - ./production/config/loan-service.yml:/app/config/application.yml:ro
      - /var/log/banking:/var/log/banking
    environment:
      SPRING_PROFILES_ACTIVE: production
      VAULT_ADDR: https://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/loan_service_vault_token
      LOGGING_LEVEL_ROOT: INFO
      JAVA_OPTS: >-
        -Xms1g -Xmx2g
        -XX:+UseG1GC
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=80
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/var/log/banking
        -Dspring.security.require-ssl=true
    secrets:
      - loan_service_vault_token
    depends_on:
      - vault
      - postgres
      - redis
      - kafka
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Payment Service (highest security)
  payment-service:
    image: enterprise-banking/payment-service:${VERSION:-latest}
    container_name: banking-payment-service
    hostname: payment-service
    restart: unless-stopped
    networks:
      - banking-backend
    ports:
      - "8085:8080"
    volumes:
      - ./production/config/payment-service.yml:/app/config/application.yml:ro
      - /var/log/banking:/var/log/banking
    environment:
      SPRING_PROFILES_ACTIVE: production
      VAULT_ADDR: https://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/payment_service_vault_token
      LOGGING_LEVEL_ROOT: INFO
      JAVA_OPTS: >-
        -Xms1g -Xmx2g
        -XX:+UseG1GC
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=80
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/var/log/banking
        -Dspring.security.require-ssl=true
        -Dcom.bank.security.pci-dss.enabled=true
    secrets:
      - payment_service_vault_token
    depends_on:
      - vault
      - postgres
      - redis
      - kafka
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ML Anomaly Service
  ml-anomaly-service:
    image: enterprise-banking/ml-anomaly-service:${VERSION:-latest}
    container_name: banking-ml-service
    hostname: ml-anomaly-service
    restart: unless-stopped
    networks:
      - banking-backend
    ports:
      - "8087:8080"
    volumes:
      - ./production/config/ml-service.yml:/app/config/application.yml:ro
      - /var/log/banking:/var/log/banking
      - ./production/ml/models:/app/models:ro
    environment:
      SPRING_PROFILES_ACTIVE: production
      VAULT_ADDR: https://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/ml_service_vault_token
      LOGGING_LEVEL_ROOT: INFO
      JAVA_OPTS: >-
        -Xms2g -Xmx4g
        -XX:+UseG1GC
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=80
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/var/log/banking
        -Dspring.security.require-ssl=true
    secrets:
      - ml_service_vault_token
    depends_on:
      - vault
      - postgres
      - redis
      - kafka
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # MONITORING SERVICES
  # ================================

  # Prometheus with high availability
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: banking-prometheus
    hostname: prometheus
    restart: unless-stopped
    networks:
      - banking-monitoring
      - banking-backend
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./production/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./production/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana with security hardening
  grafana:
    image: grafana/grafana:10.1.0
    container_name: banking-grafana
    hostname: grafana
    restart: unless-stopped
    networks:
      - banking-monitoring
      - banking-frontend
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./production/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./production/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
      GF_SECURITY_SECRET_KEY_FILE: /run/secrets/grafana_secret_key
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD_FILE: /run/secrets/grafana_db_password
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-clock-panel"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_CONTENT_TYPE_PROTECTION: "true"
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: "true"
      GF_SECURITY_X_XSS_PROTECTION: "true"
    secrets:
      - grafana_admin_password
      - grafana_secret_key
      - grafana_db_password
    depends_on:
      - postgres
      - prometheus
    security_opt:
      - no-new-privileges:true
    user: "472:472"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Load Balancer with security
  nginx:
    image: nginx:1.25-alpine
    container_name: banking-nginx
    hostname: nginx
    restart: unless-stopped
    networks:
      - banking-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./production/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./production/nginx/ssl:/etc/nginx/ssl:ro
      - ./production/nginx/security:/etc/nginx/security:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - api-gateway
      - customer-service
      - loan-service
      - payment-service
      - grafana
    security_opt:
      - no-new-privileges:true
    user: "101:101"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # SECURITY SERVICES
  # ================================

  # Fail2ban for intrusion prevention
  fail2ban:
    image: crazymax/fail2ban:1.0.2
    container_name: banking-fail2ban
    hostname: fail2ban
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./production/fail2ban/jail.local:/etc/fail2ban/jail.local:ro
      - ./production/fail2ban/filter.d:/etc/fail2ban/filter.d:ro
      - /var/log/nginx:/var/log/nginx:ro
      - /var/log/banking:/var/log/banking:ro
    environment:
      TZ: UTC
      F2B_LOG_LEVEL: INFO
      F2B_DB_PURGE_AGE: 7d
    security_opt:
      - no-new-privileges:true

# ================================
# SECRETS MANAGEMENT
# ================================

secrets:
  postgres_password:
    file: ./production/secrets/postgres_password.txt
  elasticsearch_password:
    file: ./production/secrets/elasticsearch_password.txt
  grafana_admin_password:
    file: ./production/secrets/grafana_admin_password.txt
  grafana_secret_key:
    file: ./production/secrets/grafana_secret_key.txt
  grafana_db_password:
    file: ./production/secrets/grafana_db_password.txt
  api_gateway_vault_token:
    file: ./production/secrets/api_gateway_vault_token.txt
  customer_service_vault_token:
    file: ./production/secrets/customer_service_vault_token.txt
  loan_service_vault_token:
    file: ./production/secrets/loan_service_vault_token.txt
  payment_service_vault_token:
    file: ./production/secrets/payment_service_vault_token.txt
  ml_service_vault_token:
    file: ./production/secrets/ml_service_vault_token.txt